{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/wxgzh.jpg","path":"images/wxgzh.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipay.jpg","path":"images/donate/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/weixin.jpg","path":"images/donate/weixin.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1600694542000},{"_id":"source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1600694542000},{"_id":"source/_posts/coding-py.md","hash":"018136b8924ab105a2faabb87bf6f18c2ca6889e","modified":1600694542000},{"_id":"source/_posts/crack-gitlab-ee-licence.md","hash":"34a3f805a854331ba4d20f3dd098f0c22660ad0e","modified":1600694542000},{"_id":"source/_posts/curl-ip.md","hash":"2a0b52843f0be7869a8d8beac395031e39c6d553","modified":1600694542000},{"_id":"source/_posts/docker-shadowsocks-install.md","hash":"3da79594bbd94a4bffd76c852000b057cbccc162","modified":1600694542000},{"_id":"source/_posts/gcp-install-gfw-v2ray-server.md","hash":"9ba6d2e7c80c34da7a6c7d29b8c461cdecb0c3af","modified":1600694542000},{"_id":"source/_posts/gitlab-install-docker.md","hash":"d660d54d0b3e05dbfb4721abdf54e937e2226dae","modified":1600694542000},{"_id":"source/_posts/gitlab-ops.md","hash":"64d5acd07407b81c7e791edd8768d369d62eb833","modified":1600694542000},{"_id":"source/_posts/gitops-basic-concept.md","hash":"6677b759fbd59514227131f1a5786e10ee15b3a6","modified":1600694542000},{"_id":"source/_posts/helm-basic.md","hash":"f4562cd1368c2779ab9657d546569ce2704fdfed","modified":1600694542000},{"_id":"source/_posts/install-ros-melodic-ubuntu-18-04.md","hash":"2e89b9d6357642e4ec30f222c5fdf14093f96024","modified":1600694542000},{"_id":"source/_posts/k8s-cloud-001.md","hash":"7a6237e24f5f7693a80e79b6b7d9a608bccb1a39","modified":1600694542000},{"_id":"source/_posts/k8s-jenkins-ops.md","hash":"d465d6a0fee5d58abb5cfceb7ef5b728aa6f1ef8","modified":1600694542000},{"_id":"source/_posts/k8s-local-install.md","hash":"a3f660fffa3602530706b3fee3008bab60977d7a","modified":1600694542000},{"_id":"source/_posts/macos-init-env.md","hash":"90f6ff1c86fc6fecddb674e5c5a116bb5fb9393e","modified":1600694542000},{"_id":"source/_posts/magic-of-helm.md","hash":"3c717011818cbdde63d73acc49a09e339809f56c","modified":1600694542000},{"_id":"source/_posts/oss-crossdomain-ssl.md","hash":"705bd68cc81b141224ca8d8f4dcaa371f0a00b32","modified":1600694542000},{"_id":"source/_posts/vmwareworkstation_16_pro_license.md","hash":"fec92910e155e10c1d10d1f0c38dda2d44bc6ab5","modified":1600694542000},{"_id":"source/_posts/zoom-not-connect.md","hash":"5a60f756624398b6969e2904b3e25ba3f100f307","modified":1600694542000},{"_id":"source/_posts/创世纪.md","hash":"4b68c6592245dce0c351124fb317f1f6e08ce55a","modified":1600694542000},{"_id":"source/about/index.md","hash":"4c6892e25e77b37b9f68c31dc9cba9ae0ef200d1","modified":1618130934492},{"_id":"source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1600694542000},{"_id":"source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1600694542000},{"_id":"source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1600694542000},{"_id":"source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1600694542000},{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1600694542000},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1600694542000},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1600694542000},{"_id":"themes/pure/README.cn.md","hash":"a634af4addbb57088935e060e8ec6035ea7bab76","modified":1600694542000},{"_id":"themes/pure/_config.yml","hash":"69dae72811d3eb3e9e9bb5878d781c8ba6c5f264","modified":1618138451946},{"_id":"themes/pure/_config.yml.example","hash":"4714f87fdb6d4a6ea5ece84f4fe37f922337f14d","modified":1600694542000},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1600694542000},{"_id":"themes/pure/languages/default.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1600694542000},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1600694542000},{"_id":"themes/pure/languages/en.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1600694542000},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1600694542000},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1600694542000},{"_id":"themes/pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1600694542000},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1600694542000},{"_id":"themes/pure/layout/categories.ejs","hash":"22a2bc1712dd9ba1a3027e875d636132d334fb00","modified":1600694542000},{"_id":"themes/pure/layout/category.ejs","hash":"3ca5651bbce7b0c280c906468f2eb18c2e55ebcb","modified":1600694542000},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1600694542000},{"_id":"themes/pure/layout/layout.ejs","hash":"a29ab2e881954a252bfc0dc1a7eb5aa52768dd2a","modified":1600694542000},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1600694542000},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1600694542000},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1600694542000},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1600694542000},{"_id":"themes/pure/layout/tag.ejs","hash":"df60564c162f7ad3422f8959dfea19351857a7cd","modified":1600694542000},{"_id":"themes/pure/layout/tags.ejs","hash":"29f19a6ed10f8b1f069259a7aeaaacddcfaa2ed4","modified":1600694542000},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1600694542000},{"_id":"themes/pure/_source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1600694542000},{"_id":"themes/pure/source/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1600694542000},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1600694542000},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1600694542000},{"_id":"themes/pure/_source/about/index.md","hash":"9c95cabb533409d06daefc4295021ad199761efc","modified":1600694542000},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1600694542000},{"_id":"themes/pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1600694542000},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1600694542000},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1600694542000},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1600694542000},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1600694542000},{"_id":"themes/pure/layout/_common/script.ejs","hash":"0031114d2a58f8601c2869f78ceedc75a10be90d","modified":1600694542000},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1600694542000},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1600694542000},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1600694542000},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1600694542000},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1600694542000},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1600694542000},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1600694542000},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1600694542000},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1600694542000},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1600694542000},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1600694542000},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1600694542000},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"9f755b0da1ea928dece32c2050d8a04b3a9fb13b","modified":1600694542000},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"0f9b71de0087d1f777d92c5a0f3873971aec5a5b","modified":1600694542000},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"79222a6845f45bf24ebff9269adffd9e25c44532","modified":1600694542000},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1600694542000},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"e10ea0176ba87e64888234bafedc01c92544352c","modified":1600694542000},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1600694542000},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1600694542000},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1600694542000},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1600694542000},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1600694542000},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"143087db0573772b0bdaf7f93312553158942ec7","modified":1600694542000},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1600694542000},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"fb9b5f16029f2ccef4b83cf4facfdcdd748b65b4","modified":1600694542000},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"14f2e7d4c1055ff6a5f5867dc0e9a9f6f4c28fe1","modified":1600694542000},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1600694542000},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1600694542000},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1600694542000},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1600694542000},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1600694542000},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1600694542000},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1600694542000},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1600694542000},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1600694542000},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1600694542000},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1600694542000},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1600694542000},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1600694542000},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1600694542000},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1600694542000},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1600694542000},{"_id":"themes/pure/source/images/avatar.jpg","hash":"cba4db2d57eae70d378b98f210ca897cffbe7418","modified":1600694542000},{"_id":"themes/pure/source/images/wxgzh.jpg","hash":"6e203974345218568426c1baa4d450bcccf1fbab","modified":1600694542000},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1600694542000},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1600694542000},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1600694542000},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1600694542000},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1600694542000},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"a9d3d05428e5844a07706c7fcfeb842e44a36a64","modified":1600694542000},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1600694542000},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1600694542000},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1600694542000},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"95eabc0fe4033ec61b240a16eeaf7dc62a9e3da1","modified":1600694542000},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1600694542000},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1600694542000},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1600694542000},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1600694542000},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1600694542000},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1600694542000},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1600694542000},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1600694542000},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1600694542000},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"fb01f1631c3ae7fe6211dc03233506cb344229be","modified":1600694542000},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1600694542000},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1600694542000},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1600694542000},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1600694542000},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1600694542000},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1600694542000},{"_id":"themes/pure/source/images/donate/alipay.jpg","hash":"1fd6d3d700d4c9e2c41456f497f5129a0f4c4398","modified":1600694542000},{"_id":"themes/pure/source/images/donate/weixin.jpg","hash":"6115cb6eec601baa374030e792c9fb787461e60a","modified":1600694542000},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1600694542000},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1600694542000},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1600694542000},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1600694542000},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1600694542000},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1600694542000},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1600694542000},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1600694542000},{"_id":"themes/pure/source/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1600694542000},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1600694542000},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1600694542000},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1600694542000},{"_id":"themes/pure/source/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1600694542000},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1600694542000},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1600694542000},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1600694542000},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1600694542000},{"_id":"public/baidusitemap.xml","hash":"19f94a2fbb694117b6406a5e2d86eb93d2681d73","modified":1618138473996},{"_id":"public/atom.xml","hash":"541c8899377626cf32cc864b8676b3d0c51a31bc","modified":1618138473996},{"_id":"public/content.json","hash":"ec840811536be8868acb66c70d139cafc1216656","modified":1618138473996},{"_id":"public/search.xml","hash":"66df265d7283881923cd759931b167bf6f3fef23","modified":1618138473996},{"_id":"public/sitemap.xml","hash":"0d3b5759307478bae5183e4758c87b63516d7b12","modified":1618138473996},{"_id":"public/about/index.html","hash":"d04439098f7f10e99322b952a29b6612d22a0789","modified":1618138473996},{"_id":"public/categories/index.html","hash":"977292ae5422cf0c93703d1fc7b9310c4fbcb8b8","modified":1618138473996},{"_id":"public/links/index.html","hash":"afaa7e07b0ee69c6a7be18fef28d3cab420a3709","modified":1618138473996},{"_id":"public/repository/index.html","hash":"9fa705db5492675f9cd63baa957a68eee454418a","modified":1618138473996},{"_id":"public/tags/index.html","hash":"e9505659f0d6317dde4e4923651dc44b30d13092","modified":1618138473996},{"_id":"public/2020/09/20/macos-init-env/index.html","hash":"5b37bba620b5fc90a1c876f7d40aae8ef02ea750","modified":1618138473996},{"_id":"public/2020/09/16/vmwareworkstation_16_pro_license/index.html","hash":"45f433f28c3c0c3ab056f25af83a6aec28aec496","modified":1618138473996},{"_id":"public/2020/08/09/oss-crossdomain-ssl/index.html","hash":"88abfa859957cb9e495e26104ee05cba76255cbf","modified":1618138473996},{"_id":"public/2020/08/06/gcp-install-gfw-v2ray-server/index.html","hash":"4caf19709ecc3b0541f98b2991ada89e0b9ad801","modified":1618138473996},{"_id":"public/2020/06/04/install-ros-melodic-ubuntu-18-04/index.html","hash":"f31886d4b3a0c6db10aea6850f3769b9bbf4a13a","modified":1618138473996},{"_id":"public/2019/12/26/zoom-not-connect/index.html","hash":"f228146562d406be3c29f3300b0b18932e63a348","modified":1618138473996},{"_id":"public/2019/12/24/gitops-basic-concept/index.html","hash":"3d2d1a52a8328feb35feda25297f132ef5a2ca4e","modified":1618138473996},{"_id":"public/2019/12/23/crack-gitlab-ee-licence/index.html","hash":"0a36b4f141ca0ed025e54ac67ff781f563b35406","modified":1618138473996},{"_id":"public/2019/12/20/k8s-local-install/index.html","hash":"2761ad5e6620f3f325eb03a0fb71fe65eb4a7bd2","modified":1618138473996},{"_id":"public/2019/12/19/gitlab-install-docker/index.html","hash":"38086af1ddfb2fc459da0a3202c62c17a679b08b","modified":1618138473996},{"_id":"public/2019/12/19/curl-ip/index.html","hash":"c47183f4a9c38e9a0aae5c1fc7539ba15608747f","modified":1618138473996},{"_id":"public/2019/12/01/k8s-cloud-001/index.html","hash":"32c0e1fef4ba26c74454a0b2c239a03660a1d8ea","modified":1618138473996},{"_id":"public/2019/11/21/k8s-jenkins-ops/index.html","hash":"61adcbfc5ab67b81b92ac18070b1109854675e49","modified":1618138473996},{"_id":"public/2019/11/20/docker-shadowsocks-install/index.html","hash":"f3b1ed25ab069f131782a2dd0eb454fc1914e7b9","modified":1618138473996},{"_id":"public/2019/05/19/gitlab-ops/index.html","hash":"28d85a5810bc3a51136f56da1a12689ea5c148a2","modified":1618138473996},{"_id":"public/2019/05/05/coding-py/index.html","hash":"dfe41ef64d285a8cce582967513b6bf98cc71c4d","modified":1618138473996},{"_id":"public/2019/01/03/magic-of-helm/index.html","hash":"afbee010e70a595c091d98018d6ca62fbc800823","modified":1618138473996},{"_id":"public/2018/12/11/helm-basic/index.html","hash":"8d3ace775121b3114fa0a0e496c8872b03477209","modified":1618138473996},{"_id":"public/2018/11/22/创世纪/index.html","hash":"2461feea3e1a2cfd6c571a04d5c0b59663fc27ae","modified":1618138473996},{"_id":"public/archives/index.html","hash":"03d31494aa0f3bce5055915bfdeba7b374fc8069","modified":1618138473996},{"_id":"public/archives/page/2/index.html","hash":"7b7dfb4b25f7fc0992a12e75b70c05716a27d618","modified":1618138473996},{"_id":"public/archives/2018/index.html","hash":"a4b3a86205178cd51256824e453efd9a52e8de2d","modified":1618138473996},{"_id":"public/archives/2018/11/index.html","hash":"3272928102d0aeca6468789c3d966aa423a69cb4","modified":1618138473996},{"_id":"public/archives/2018/12/index.html","hash":"64a5296f9912393b41b6b31149ec6d3955673558","modified":1618138473996},{"_id":"public/archives/2019/index.html","hash":"38e9a18f6a0a44a7f4bd21d11c91df3ecc85216f","modified":1618138473996},{"_id":"public/archives/2019/page/2/index.html","hash":"f104c9a53be5b1e89af01d40826f457ada9f6a38","modified":1618138473996},{"_id":"public/archives/2019/01/index.html","hash":"395717010a987af3132bc5716e2184683faa204f","modified":1618138473996},{"_id":"public/archives/2019/05/index.html","hash":"7a66cadd744d28f437ea798f51fdc049ec8857a9","modified":1618138473996},{"_id":"public/archives/2019/11/index.html","hash":"25c441258fdc5b756ede3dbb2da574a868fe450e","modified":1618138473996},{"_id":"public/archives/2019/12/index.html","hash":"0cd45027fd49f1b4ead52bc4505ecd686df3d89a","modified":1618138473996},{"_id":"public/archives/2020/index.html","hash":"15895bdd6440e5d1629bf597e722c74a07a9f846","modified":1618138473996},{"_id":"public/archives/2020/06/index.html","hash":"964f5ac4155308e2be787044a4eba271d78d0b4c","modified":1618138473996},{"_id":"public/archives/2020/08/index.html","hash":"b5d32c9aeb691b9ec36831890808f45d7cfdc728","modified":1618138473996},{"_id":"public/archives/2020/09/index.html","hash":"6b9272c3ec6afb8db100d61421409cc6bf0accbe","modified":1618138473996},{"_id":"public/categories/Coding/index.html","hash":"964c44a772201c88840e095111b7e21fce221d64","modified":1618138473996},{"_id":"public/categories/DevOps/index.html","hash":"1244548f882de9fc7c83cf433cb98590349eee54","modified":1618138473996},{"_id":"public/categories/Ops/index.html","hash":"c251081285e41092ea16d695680f7fc139484d2c","modified":1618138473996},{"_id":"public/categories/GitOps/index.html","hash":"10927d6bd2738ff272bd2cb4ed7aed87b2cf624d","modified":1618138473996},{"_id":"public/categories/Container-Cloud/index.html","hash":"878cca768d14d5ed8a0c2b8504ad268eec3b3e97","modified":1618138473996},{"_id":"public/categories/ROS/index.html","hash":"1325b14c49a070b721b17318013ad42bacb2fe53","modified":1618138473996},{"_id":"public/categories/Tools/index.html","hash":"a50705343adfaf2491a3ca686d171d7fc273b8bf","modified":1618138473996},{"_id":"public/categories/frontend/index.html","hash":"9be9fcbe58d63dbfb8e6fcfcbcdfc9d1dc8daa05","modified":1618138473996},{"_id":"public/categories/Story/index.html","hash":"ca830ea8d002e63be20a9a06598b59e33300c6b2","modified":1618138473996},{"_id":"public/index.html","hash":"3f16248d606e3c2ce8ce4c17259324d1afacaab1","modified":1618138473996},{"_id":"public/page/2/index.html","hash":"46334ba677bf02e5d728f6ed9a861473a788b572","modified":1618138473996},{"_id":"public/tags/算法/index.html","hash":"291b6819c2d996d6163f5e1dad3585a83b2e6610","modified":1618138473996},{"_id":"public/tags/gitlab/index.html","hash":"75a8bd3b86318ce1052efda2245d05d55f403980","modified":1618138473996},{"_id":"public/tags/cmd/index.html","hash":"0e3aefb6af359219009b94a70d138744f0e4b05e","modified":1618138473996},{"_id":"public/tags/tools/index.html","hash":"d7f22692f087c1580372abde8b455dfd0b3ba34b","modified":1618138473996},{"_id":"public/tags/gitops/index.html","hash":"1bde8fe041c43bec4961909de2f8b47130a6d738","modified":1618138473996},{"_id":"public/tags/helm/index.html","hash":"0d95d6d789c505b702c3ce8397699405524ad569","modified":1618138473996},{"_id":"public/tags/机器人/index.html","hash":"eeca930d1d9a3049837ca2606d283f4d713832f1","modified":1618138473996},{"_id":"public/tags/kubernetes/index.html","hash":"e0d69ae5cece0d95cf009620729e4d849d53d82e","modified":1618138473996},{"_id":"public/tags/前端跨域/index.html","hash":"e5f5bfcb001dff7fa975bb2a249aaff23e37ccf8","modified":1618138473996},{"_id":"public/tags/zoom/index.html","hash":"63414bb85e379fe083f94aaf22d84351ade6b5f3","modified":1618138473996},{"_id":"public/tags/story/index.html","hash":"64e783977742507b0478665ed55b57f1d8e918f7","modified":1618138473996},{"_id":"public/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1618138473996},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1618138473996},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1618138473996},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1618138473996},{"_id":"public/images/avatar.jpg","hash":"cba4db2d57eae70d378b98f210ca897cffbe7418","modified":1618138473996},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1618138473996},{"_id":"public/images/wxgzh.jpg","hash":"6e203974345218568426c1baa4d450bcccf1fbab","modified":1618138473996},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1618138473996},{"_id":"public/images/donate/alipay.jpg","hash":"1fd6d3d700d4c9e2c41456f497f5129a0f4c4398","modified":1618138473996},{"_id":"public/images/donate/weixin.jpg","hash":"6115cb6eec601baa374030e792c9fb787461e60a","modified":1618138473996},{"_id":"public/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1618138473996},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1618138473996},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1618138473996},{"_id":"public/fonts/README.html","hash":"26a13286f808d3ef09314df865be3049eef3906f","modified":1618138473996},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1618138473996},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1618138473996},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1618138473996},{"_id":"public/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1618138473996},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1618138473996},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1618138473996},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1618138473996},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1618138473996},{"_id":"public/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1618138473996},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1618138473996}],"Category":[{"name":"Coding","_id":"cknd0qoed000424lv88j45nkr"},{"name":"DevOps","_id":"cknd0qoej000c24lvfvy0aism"},{"name":"Ops","_id":"cknd0qoel000i24lv5qxb6ybr"},{"name":"GitOps","_id":"cknd0qoey001g24lv6yrw6vc2"},{"name":"Container Cloud","_id":"cknd0qof1001o24lvexee9zvw"},{"name":"ROS","_id":"cknd0qof2001t24lv7s909iqg"},{"name":"Tools","_id":"cknd0qof7002424lv4yl1e5dv"},{"name":"frontend","_id":"cknd0qof8002c24lv9vpr1dyd"},{"name":"Story","_id":"cknd0qof9002h24lv8dv0a9bi"}],"Data":[{"_id":"gallery","data":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}},{"_id":"links","data":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}],"Page":[{"title":"关于","description":"个人简介","layout":"about","comments":0,"sidebar":"custom","_content":"博主是一名从事IT行业四年的运维开发工程师，先后供职于DaoCloud、CaiCloud等公司,现就职于数字金融公司。\n\n负责基础服务平台研发运维工作。\n\n主要技术方向：**OpenStack**、**Docker**、**Swarm**、**Kubernetes**，**ServiceMesh**等方向。\n\n擅长开发语言：**Python**、**Golang**。\n\n热爱**DevOps**，熟悉开源人工智能训练平台**kubeflow**以及对于多框架训练支持的方案。\n","source":"about/index.md","raw":"---\ntitle: 关于\ndescription: 个人简介\nlayout: about\ncomments: false\nsidebar: custom\n---\n博主是一名从事IT行业四年的运维开发工程师，先后供职于DaoCloud、CaiCloud等公司,现就职于数字金融公司。\n\n负责基础服务平台研发运维工作。\n\n主要技术方向：**OpenStack**、**Docker**、**Swarm**、**Kubernetes**，**ServiceMesh**等方向。\n\n擅长开发语言：**Python**、**Golang**。\n\n热爱**DevOps**，熟悉开源人工智能训练平台**kubeflow**以及对于多框架训练支持的方案。\n","date":"2021-04-11T08:48:54.506Z","updated":"2021-04-11T08:48:54.506Z","path":"about/index.html","_id":"cknd0qoe5000024lvc7w9bx8p","content":"<p>博主是一名从事IT行业四年的运维开发工程师，先后供职于DaoCloud、CaiCloud等公司,现就职于数字金融公司。</p>\n<p>负责基础服务平台研发运维工作。</p>\n<p>主要技术方向：<strong>OpenStack</strong>、<strong>Docker</strong>、<strong>Swarm</strong>、<strong>Kubernetes</strong>，<strong>ServiceMesh</strong>等方向。</p>\n<p>擅长开发语言：<strong>Python</strong>、<strong>Golang</strong>。</p>\n<p>热爱<strong>DevOps</strong>，熟悉开源人工智能训练平台<strong>kubeflow</strong>以及对于多框架训练支持的方案。</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>博主是一名从事IT行业四年的运维开发工程师，先后供职于DaoCloud、CaiCloud等公司,现就职于数字金融公司。</p>\n<p>负责基础服务平台研发运维工作。</p>\n<p>主要技术方向：<strong>OpenStack</strong>、<strong>Docker</strong>、<strong>Swarm</strong>、<strong>Kubernetes</strong>，<strong>ServiceMesh</strong>等方向。</p>\n<p>擅长开发语言：<strong>Python</strong>、<strong>Golang</strong>。</p>\n<p>热爱<strong>DevOps</strong>，熟悉开源人工智能训练平台<strong>kubeflow</strong>以及对于多框架训练支持的方案。</p>\n"},{"title":"分类","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\ncomments: false\n---\n","date":"2021-04-11T07:34:59.742Z","updated":"2021-04-11T07:34:59.742Z","path":"categories/index.html","_id":"cknd0qoeb000224lv0que62iw","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---","date":"2021-04-11T07:34:59.742Z","updated":"2021-04-11T07:34:59.742Z","path":"links/index.html","_id":"cknd0qoef000624lv57fkcwri","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2021-04-11T07:34:59.742Z","updated":"2021-04-11T07:34:59.742Z","path":"repository/index.html","_id":"cknd0qoeg000824lv7ib4bpb9","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"标签","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: false\n---\n","date":"2021-04-11T07:34:59.742Z","updated":"2021-04-11T07:34:59.742Z","path":"tags/index.html","_id":"cknd0qoei000a24lv3owiak5s","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""}],"Post":[{"title":"算法解析-二分查找","author":"Mayer Shi","date":"2019-05-05T00:07:07.000Z","draft":false,"_content":"\n常用算法学习，并附上 python 代码实现。该篇博客主要介绍二分查找算法的原理解析与代码实现。\n\n<!--more-->\n\n**场景解析：**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在假设你登录 Facebook。当你这样做时，Facebook 必须核实你是否有其网站的账户，因此必须在其数据库中查找你的用户名。如果你的用户名为 karlmageddon，Facebook 可从以 A 打头的部分开始查找，但更合乎逻辑的做法是从中间开始查找。这是一个查找问题，在前述所有情况下，都可使用同一种算法来解决问题，这种算法就是二分查找 。\n\n**基本条件：**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二分查找是一种算法，其输入是一个有序的元素列表。如果要查找的元素包含在列表中，二分查找返回其位置；否则返回 null 。\n\n**算法原理解析：**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从 1-100 中随机挑出一个数字，然后用最少的次数猜中这个次数，如果用蛮力的方法从 1 开始猜，如果挑中的数字是 99 那么最起码要猜 99 次。那么介绍另外一种方法，从 50 开始猜。小了，但排除了一半的数字！至此，你知道 1 ～ 50 都小了。接下来，你猜 75。大了，那余下的数字又排除了一半！使用二分查找时，你猜测的是中间的数字，从而每次都将余下的数字排除一半。接下来，你猜 63（50 和 75 中间的数字）。经过几次猜测即可猜中。这就是二分查找原理。那么对于二分查找一般多少次可以能猜中呢。\n\n<span align=\"center\">答案：<b>log<sub>2</sub>N</b></span> 次\n\n**公式解析：对数**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你可能不记得什么是对数了，但很可能记得什么是幂。log<sub>10</sub> 100 相当于问“将多少个 10 相乘的结果为 100”。答案是两个：10 × 10 = 100。因此，log<sub>10</sub> 100 = 2。对数运算是幂运算的逆运算。\n\n**code 片段演示：**\n\n```python\n# -*- coding: utf-8 -*-\n\n\"\"\"二分查找代码实现\"\"\"\n\n\ndef fastSearch(glist, guess):\n    start = 0\n    end = len(glist) - 1\n    while start <= end:\n        mid = (end + start) // 2\n        if guess == glist[mid]:\n            return mid\n        elif guess > glist[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return None\n\n\nif __name__ == \"__main__\":\n    ls = [1, 2, 3, 4, 5, 6, 7, 8]\n    guess = 3\n    print(fastSearch(ls, guess))\n```\n\n**注意事项：**\n\n数组一定是有序的。\n\n**运行时间:**\n\n一般而言，应选择效率最高的算法，以最大限度地减少运行时间或占用空间。对于 40 亿有序数组的普通查找最多用 40 亿次方可查询到，对于查询时间与数组长度成正比，称为线性时间。而对于通过二分法查找的方式，40 亿数组则需要最多需要 40 亿的对数次。二分查找的运行时间为对数时间。\n\n**大 O 表示法:**\n\n大 O 表示法是一种特殊方法，他表示方法的速度有多快。表示方法是 O(log<sub>2</sub>N).其中 log<sub>2</sub>N 表示操作数。\n\n**适用场景:**\n\n大 O 表示法所能代表的是当前算法最糟糕的时候运行时间。\n\n**常见运行时间:**\n\n1. O(logn)，也叫对数时间，这样的算法包括二分查找。\n2. O(n)，也叫线性时间，这样的算法包括简单查找。\n3. O(n\\*logn)，这样的算法包括第 4 章将介绍的快速排序——一种速度较快的排序算法。\n4. O(n2)，这样的算法包括第 2 章将介绍的选择排序——一种速度较慢的排序算法。\n5. O(n!)，这样的算法包括接下来将介绍的旅行商问题的解决方案——一种非常慢的算法。\n\n**运行时间总结:**\n\n1. 算法的速度指的并非时间，而是操作数的增速。\n2. 谈论算法的速度时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加。\n3. 算法的运行时间用大 O 表示法表示。O(log n)比 O(n)快，当需要搜索的元素越多时，前者比后者快得越多。\n","source":"_posts/coding-py.md","raw":"---\ntitle: \"算法解析-二分查找\"\nauthor: \"Mayer Shi\"\ntags: [\"算法\"]\ncategories: [\"Coding\"]\ndate: 2019-05-05T16:07:07+08:00\ndraft: false\n---\n\n常用算法学习，并附上 python 代码实现。该篇博客主要介绍二分查找算法的原理解析与代码实现。\n\n<!--more-->\n\n**场景解析：**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在假设你登录 Facebook。当你这样做时，Facebook 必须核实你是否有其网站的账户，因此必须在其数据库中查找你的用户名。如果你的用户名为 karlmageddon，Facebook 可从以 A 打头的部分开始查找，但更合乎逻辑的做法是从中间开始查找。这是一个查找问题，在前述所有情况下，都可使用同一种算法来解决问题，这种算法就是二分查找 。\n\n**基本条件：**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二分查找是一种算法，其输入是一个有序的元素列表。如果要查找的元素包含在列表中，二分查找返回其位置；否则返回 null 。\n\n**算法原理解析：**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从 1-100 中随机挑出一个数字，然后用最少的次数猜中这个次数，如果用蛮力的方法从 1 开始猜，如果挑中的数字是 99 那么最起码要猜 99 次。那么介绍另外一种方法，从 50 开始猜。小了，但排除了一半的数字！至此，你知道 1 ～ 50 都小了。接下来，你猜 75。大了，那余下的数字又排除了一半！使用二分查找时，你猜测的是中间的数字，从而每次都将余下的数字排除一半。接下来，你猜 63（50 和 75 中间的数字）。经过几次猜测即可猜中。这就是二分查找原理。那么对于二分查找一般多少次可以能猜中呢。\n\n<span align=\"center\">答案：<b>log<sub>2</sub>N</b></span> 次\n\n**公式解析：对数**\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你可能不记得什么是对数了，但很可能记得什么是幂。log<sub>10</sub> 100 相当于问“将多少个 10 相乘的结果为 100”。答案是两个：10 × 10 = 100。因此，log<sub>10</sub> 100 = 2。对数运算是幂运算的逆运算。\n\n**code 片段演示：**\n\n```python\n# -*- coding: utf-8 -*-\n\n\"\"\"二分查找代码实现\"\"\"\n\n\ndef fastSearch(glist, guess):\n    start = 0\n    end = len(glist) - 1\n    while start <= end:\n        mid = (end + start) // 2\n        if guess == glist[mid]:\n            return mid\n        elif guess > glist[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return None\n\n\nif __name__ == \"__main__\":\n    ls = [1, 2, 3, 4, 5, 6, 7, 8]\n    guess = 3\n    print(fastSearch(ls, guess))\n```\n\n**注意事项：**\n\n数组一定是有序的。\n\n**运行时间:**\n\n一般而言，应选择效率最高的算法，以最大限度地减少运行时间或占用空间。对于 40 亿有序数组的普通查找最多用 40 亿次方可查询到，对于查询时间与数组长度成正比，称为线性时间。而对于通过二分法查找的方式，40 亿数组则需要最多需要 40 亿的对数次。二分查找的运行时间为对数时间。\n\n**大 O 表示法:**\n\n大 O 表示法是一种特殊方法，他表示方法的速度有多快。表示方法是 O(log<sub>2</sub>N).其中 log<sub>2</sub>N 表示操作数。\n\n**适用场景:**\n\n大 O 表示法所能代表的是当前算法最糟糕的时候运行时间。\n\n**常见运行时间:**\n\n1. O(logn)，也叫对数时间，这样的算法包括二分查找。\n2. O(n)，也叫线性时间，这样的算法包括简单查找。\n3. O(n\\*logn)，这样的算法包括第 4 章将介绍的快速排序——一种速度较快的排序算法。\n4. O(n2)，这样的算法包括第 2 章将介绍的选择排序——一种速度较慢的排序算法。\n5. O(n!)，这样的算法包括接下来将介绍的旅行商问题的解决方案——一种非常慢的算法。\n\n**运行时间总结:**\n\n1. 算法的速度指的并非时间，而是操作数的增速。\n2. 谈论算法的速度时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加。\n3. 算法的运行时间用大 O 表示法表示。O(log n)比 O(n)快，当需要搜索的元素越多时，前者比后者快得越多。\n","slug":"coding-py","published":1,"updated":"2019-05-05T00:07:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoe8000124lv0fcp6bj8","content":"<p>常用算法学习，并附上 python 代码实现。该篇博客主要介绍二分查找算法的原理解析与代码实现。</p>\n<a id=\"more\"></a>\n<p><strong>场景解析：</strong></p>\n<p>       现在假设你登录 Facebook。当你这样做时，Facebook 必须核实你是否有其网站的账户，因此必须在其数据库中查找你的用户名。如果你的用户名为 karlmageddon，Facebook 可从以 A 打头的部分开始查找，但更合乎逻辑的做法是从中间开始查找。这是一个查找问题，在前述所有情况下，都可使用同一种算法来解决问题，这种算法就是二分查找 。</p>\n<p><strong>基本条件：</strong></p>\n<p>       二分查找是一种算法，其输入是一个有序的元素列表。如果要查找的元素包含在列表中，二分查找返回其位置；否则返回 null 。</p>\n<p><strong>算法原理解析：</strong></p>\n<p>       从 1-100 中随机挑出一个数字，然后用最少的次数猜中这个次数，如果用蛮力的方法从 1 开始猜，如果挑中的数字是 99 那么最起码要猜 99 次。那么介绍另外一种方法，从 50 开始猜。小了，但排除了一半的数字！至此，你知道 1 ～ 50 都小了。接下来，你猜 75。大了，那余下的数字又排除了一半！使用二分查找时，你猜测的是中间的数字，从而每次都将余下的数字排除一半。接下来，你猜 63（50 和 75 中间的数字）。经过几次猜测即可猜中。这就是二分查找原理。那么对于二分查找一般多少次可以能猜中呢。</p>\n<p><span align=\"center\">答案：<b>log<sub>2</sub>N</b></span> 次</p>\n<p><strong>公式解析：对数</strong></p>\n<p>       你可能不记得什么是对数了，但很可能记得什么是幂。log<sub>10</sub> 100 相当于问“将多少个 10 相乘的结果为 100”。答案是两个：10 × 10 = 100。因此，log<sub>10</sub> 100 = 2。对数运算是幂运算的逆运算。</p>\n<p><strong>code 片段演示：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;二分查找代码实现&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fastSearch</span>(<span class=\"params\">glist, guess</span>):</span></span><br><span class=\"line\">    start = <span class=\"number\">0</span></span><br><span class=\"line\">    end = len(glist) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> start &lt;= end:</span><br><span class=\"line\">        mid = (end + start) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> guess == glist[mid]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> guess &gt; glist[mid]:</span><br><span class=\"line\">            start = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            end = mid - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    ls = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">    guess = <span class=\"number\">3</span></span><br><span class=\"line\">    print(fastSearch(ls, guess))</span><br></pre></td></tr></table></figure>\n<p><strong>注意事项：</strong></p>\n<p>数组一定是有序的。</p>\n<p><strong>运行时间:</strong></p>\n<p>一般而言，应选择效率最高的算法，以最大限度地减少运行时间或占用空间。对于 40 亿有序数组的普通查找最多用 40 亿次方可查询到，对于查询时间与数组长度成正比，称为线性时间。而对于通过二分法查找的方式，40 亿数组则需要最多需要 40 亿的对数次。二分查找的运行时间为对数时间。</p>\n<p><strong>大 O 表示法:</strong></p>\n<p>大 O 表示法是一种特殊方法，他表示方法的速度有多快。表示方法是 O(log<sub>2</sub>N).其中 log<sub>2</sub>N 表示操作数。</p>\n<p><strong>适用场景:</strong></p>\n<p>大 O 表示法所能代表的是当前算法最糟糕的时候运行时间。</p>\n<p><strong>常见运行时间:</strong></p>\n<ol>\n<li>O(logn)，也叫对数时间，这样的算法包括二分查找。</li>\n<li>O(n)，也叫线性时间，这样的算法包括简单查找。</li>\n<li>O(n*logn)，这样的算法包括第 4 章将介绍的快速排序——一种速度较快的排序算法。</li>\n<li>O(n2)，这样的算法包括第 2 章将介绍的选择排序——一种速度较慢的排序算法。</li>\n<li>O(n!)，这样的算法包括接下来将介绍的旅行商问题的解决方案——一种非常慢的算法。</li>\n</ol>\n<p><strong>运行时间总结:</strong></p>\n<ol>\n<li>算法的速度指的并非时间，而是操作数的增速。</li>\n<li>谈论算法的速度时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加。</li>\n<li>算法的运行时间用大 O 表示法表示。O(log n)比 O(n)快，当需要搜索的元素越多时，前者比后者快得越多。</li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>常用算法学习，并附上 python 代码实现。该篇博客主要介绍二分查找算法的原理解析与代码实现。</p>","more":"<p><strong>场景解析：</strong></p>\n<p>       现在假设你登录 Facebook。当你这样做时，Facebook 必须核实你是否有其网站的账户，因此必须在其数据库中查找你的用户名。如果你的用户名为 karlmageddon，Facebook 可从以 A 打头的部分开始查找，但更合乎逻辑的做法是从中间开始查找。这是一个查找问题，在前述所有情况下，都可使用同一种算法来解决问题，这种算法就是二分查找 。</p>\n<p><strong>基本条件：</strong></p>\n<p>       二分查找是一种算法，其输入是一个有序的元素列表。如果要查找的元素包含在列表中，二分查找返回其位置；否则返回 null 。</p>\n<p><strong>算法原理解析：</strong></p>\n<p>       从 1-100 中随机挑出一个数字，然后用最少的次数猜中这个次数，如果用蛮力的方法从 1 开始猜，如果挑中的数字是 99 那么最起码要猜 99 次。那么介绍另外一种方法，从 50 开始猜。小了，但排除了一半的数字！至此，你知道 1 ～ 50 都小了。接下来，你猜 75。大了，那余下的数字又排除了一半！使用二分查找时，你猜测的是中间的数字，从而每次都将余下的数字排除一半。接下来，你猜 63（50 和 75 中间的数字）。经过几次猜测即可猜中。这就是二分查找原理。那么对于二分查找一般多少次可以能猜中呢。</p>\n<p><span align=\"center\">答案：<b>log<sub>2</sub>N</b></span> 次</p>\n<p><strong>公式解析：对数</strong></p>\n<p>       你可能不记得什么是对数了，但很可能记得什么是幂。log<sub>10</sub> 100 相当于问“将多少个 10 相乘的结果为 100”。答案是两个：10 × 10 = 100。因此，log<sub>10</sub> 100 = 2。对数运算是幂运算的逆运算。</p>\n<p><strong>code 片段演示：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;二分查找代码实现&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fastSearch</span>(<span class=\"params\">glist, guess</span>):</span></span><br><span class=\"line\">    start = <span class=\"number\">0</span></span><br><span class=\"line\">    end = len(glist) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> start &lt;= end:</span><br><span class=\"line\">        mid = (end + start) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> guess == glist[mid]:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> guess &gt; glist[mid]:</span><br><span class=\"line\">            start = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            end = mid - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    ls = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]</span><br><span class=\"line\">    guess = <span class=\"number\">3</span></span><br><span class=\"line\">    print(fastSearch(ls, guess))</span><br></pre></td></tr></table></figure>\n<p><strong>注意事项：</strong></p>\n<p>数组一定是有序的。</p>\n<p><strong>运行时间:</strong></p>\n<p>一般而言，应选择效率最高的算法，以最大限度地减少运行时间或占用空间。对于 40 亿有序数组的普通查找最多用 40 亿次方可查询到，对于查询时间与数组长度成正比，称为线性时间。而对于通过二分法查找的方式，40 亿数组则需要最多需要 40 亿的对数次。二分查找的运行时间为对数时间。</p>\n<p><strong>大 O 表示法:</strong></p>\n<p>大 O 表示法是一种特殊方法，他表示方法的速度有多快。表示方法是 O(log<sub>2</sub>N).其中 log<sub>2</sub>N 表示操作数。</p>\n<p><strong>适用场景:</strong></p>\n<p>大 O 表示法所能代表的是当前算法最糟糕的时候运行时间。</p>\n<p><strong>常见运行时间:</strong></p>\n<ol>\n<li>O(logn)，也叫对数时间，这样的算法包括二分查找。</li>\n<li>O(n)，也叫线性时间，这样的算法包括简单查找。</li>\n<li>O(n*logn)，这样的算法包括第 4 章将介绍的快速排序——一种速度较快的排序算法。</li>\n<li>O(n2)，这样的算法包括第 2 章将介绍的选择排序——一种速度较慢的排序算法。</li>\n<li>O(n!)，这样的算法包括接下来将介绍的旅行商问题的解决方案——一种非常慢的算法。</li>\n</ol>\n<p><strong>运行时间总结:</strong></p>\n<ol>\n<li>算法的速度指的并非时间，而是操作数的增速。</li>\n<li>谈论算法的速度时，我们说的是随着输入的增加，其运行时间将以什么样的速度增加。</li>\n<li>算法的运行时间用大 O 表示法表示。O(log n)比 O(n)快，当需要搜索的元素越多时，前者比后者快得越多。</li>\n</ol>"},{"title":"gitlab-ee 企业版自签许可证license","date":"2019-12-23T03:27:40.000Z","author":"Mayer Shi","_content":"\n本篇文章主要是研究gitlab-ee的licence签发方式，仅供大家学习参考使用。请尊重软件开发者成果，支持正版。\n\n<!--more-->\n\n## 背景\n\n最近帮一个朋友推动开发测试一体化从DevOps转向GitOps。对于什么是GitOps，有时间搞个专题博客来讲讲这个概念以及最佳实践。总之在推进GitOps的时候需要，需要一些gitlab-ee 的高级特性。\n\n### 1. 安装ruby环境以及gem包管理工具\n\n- 由于我的电脑是mbp,所以自带ruby开发环境,无需安装。\n\n- 安装相关ruby包依赖`gitlab`、`gitlab-license`、`openssl`\n\n```bash\nsudo gem install gitlab\nsudo gem install gitlab-license\nsudo gem install openssl\n```\n\n### 2. 编写创建license的ruby脚本，并生成license文件\n\n\n- 创建脚本文件\n\n\n```bash\nvim createlicense.rb\n```\n\n\n- 文件内容如下\n\n```ruby\nrequire 'openssl'\nrequire 'gitlab/license'\n\n# Generate a key pair. You should do this only once.\nkey_pair = OpenSSL::PKey::RSA.generate(2048)\n\n# Write it to a file to use in the license generation application.\nFile.open(\"license_key\", \"w\") { |f| f.write(key_pair.to_pem) }\n\n# Extract the public key.\npublic_key = key_pair.public_key\n# Write it to a file to ship along with the main application.\nFile.open(\"license_key.pub\", \"w\") { |f| f.write(public_key.to_pem) }\n\n# In the license generation application, load the private key from a file.\nprivate_key = OpenSSL::PKey::RSA.new File.read(\"license_key\")\nGitlab::License.encryption_key = private_key\n\n# Build a new license.\nlicense = Gitlab::License.new\n\n# License information to be rendered as a table in the admin panel.\n# E.g.: \"This instance of GitLab Enterprise Edition is licensed to:\"\n# Specific keys don't matter, but there needs to be at least one.\nlicense.licensee = {\n  \"Name\"    => \"tester\",\n  \"Company\" => \"Google Inc\",\n  \"Email\"   => \"test@163.com\"\n}\n\n# The date the license starts. \n# Required.\nlicense.starts_at         = Date.new(2019, 4, 24) # license 开始生效时间\n# The date the license expires. \n# Not required, to allow lifetime licenses.\nlicense.expires_at        = Date.new(2026, 4, 23) # license 到期时间\n\n# The below dates are hardcoded in the license so that you can play with the\n# period after which there are \"repercussions\" to license expiration.\n\n# The date admins will be notified about the license's pending expiration. \n# Not required.\nlicense.notify_admins_at  = Date.new(2026, 3, 23) # license 管理员过期提醒时间\n\n# The date regular users will be notified about the license's pending expiration.\n# Not required.\nlicense.notify_users_at   = Date.new(2026, 3, 23) # license 普通用户过期提醒时间\n\n# The date \"changes\" like code pushes, issue or merge request creation \n# or modification and project creation will be blocked.\n# Not required.\nlicense.block_changes_at  = Date.new(2026, 5, 7) \n\n# Restrictions bundled with this license.\n# Not required, to allow unlimited-user licenses for things like educational organizations.\nlicense.restrictions  = {\n  # The maximum allowed number of active users.\n  # Not required.\n  active_user_count: 10000  # license 人数配额\n\n  # We don't currently have any other restrictions, but we might in the future.\n}\n\nputs \"License:\"\nputs license\n\n# Export the license, which encrypts and encodes it.\ndata = license.export\n\nputs \"Exported license:\"\nputs data\n\n# Write the license to a file to send to a customer.\nFile.open(\"GitLabBV.gitlab-license\", \"w\") { |f| f.write(data) }\n\n\n# In the customer's application, load the public key from a file.\npublic_key = OpenSSL::PKey::RSA.new File.read(\"license_key.pub\")\nGitlab::License.encryption_key = public_key\n\n# Read the license from a file.\ndata = File.read(\"GitLabBV.gitlab-license\")  # 生成license存储文件名\n\n# Import the license, which decodes and decrypts it.\n$license = Gitlab::License.import(data)\n\nputs \"Imported license:\"\nputs $license\n\n# Quit if the license is invalid\nunless $license\n  raise \"The license is invalid.\"\nend\n\n# Quit if the active user count exceeds the allowed amount:\nif $license.restricted?(:active_user_count)\n  active_user_count = 1000\n  if active_user_count > $license.restrictions[:active_user_count]\n    raise \"The active user count exceeds the allowed amount!\"\n  end\nend\n\n# Show admins a message if the license is about to expire.\nif $license.notify_admins?\n  puts \"The license is due to expire on #{$license.expires_at}.\"\nend\n\n# Show users a message if the license is about to expire.\nif $license.notify_users?\n  puts \"The license is due to expire on #{$license.expires_at}.\"\nend\n\n# Block pushes when the license expired two weeks ago.\nmodule Gitlab\n  class GitAccess\n    # ...\n    def check(cmd, changes = nil)\n      if $license.block_changes?\n        return build_status_object(false, \"License expired\")\n      end\n\n      # Do other Git access verification\n      # ...\n    end\n    # ...\n  end\nend\n\n# Show information about the license in the admin panel.\nputs \"This instance of GitLab Enterprise Edition is licensed to:\"\n$license.licensee.each do |key, value|\n  puts \"#{key}: #{value}\"\nend\n\nif $license.expired?\n  puts \"The license expired on #{$license.expires_at}\"\nelsif $license.will_expire?\n  puts \"The license will expire on #{$license.expires_at}\"\nelse\n  puts \"The license will never expire.\"\nend\n```\n\n- 执行以上license脚本文件，生成三个文件,\n\n```bash\nruby createlicense.rb  # 执行脚本生成如下内容\n\nLicense:\n#<Gitlab::License:0x00007fd08691eca0>\nExported license:\neyJkYXRhIjoiWVo0VEIraWJQai8zUDhWRi9OK2Y3d2JXcG1ucVZGbXhUamtP\nS0QyY01BSG9XYlBLRlh0QUcvQ1UzMm9EXG5tU1RSd0pqUmlRT2hOOC9KOWJi\nYk9mZ0krUmt5aWd2WnBNdGYydVZsUTFEemhFSU1jZWk5VjdtTWJycS9cbk9I\nV3BmMjR3TFFmcXhQdHVvNVFDbVd0Z2Njc2lNUXhPUzVxUTN0YkRvRDRhYTk2\nOVQvbjN4clc1RkNHZlxuUXU0TnZ1OHhqcjlZMTJIZk5yaVd3a2ZLZTBqZitU\ncExvem9GTk9QY2d5R3hGdEtkNGVUVzdpa0tQRUNCXG5IRmZYVlVydHdBU3Fm\nei96WFNvaHRGVTFLWW1USkxMOFQ5eW5PTFdpQ1gycXRIYkF1T0hLV0N0bi9W\ndE5cbjViZ3VRd05xd2hSOHlNanB6SFhNNC9OemZMVkRVQ3ZTTndVZWR6Q2Q1\nQ3hrcE9BOEU1cFN5aXRiSTBkZ1xucTJ1ekJnSHNtdlVVdE5mbjFPUWtTc0FS\ndkE2QUxUdGs1ZXZZN3Z6SDJ5N3FMZz09XG4iLCJrZXkiOiJnZ200N1hvRnkr\nOTRYb09wcFh5akE1VVo0NTU5REhxeWhVVHMzVWV1dDhRRDRzZGpReVZwRGVp\nQkFuajZcblgvL2RvYnM5QVRyYlRZa0V0SEJadUN5bGR5dUhlbEhQSHdJNUxS\nRXgyeUpkb2NBRnRVVTNlTjdKcm9ZZ1xuVGJPaXk5c1E4eldNMWhZYWlWWDAy\neDdpTGx6eHA3eDJVSWJpRkZZd2J1dmZXeGtiMk10dnVQdFdsOUt0XG5mcW91\nb0dYN0ZZclV1d3NWOGVNNTcyeS90elpMNFBLMFZvTE5vN3d6eEdveW1FbUNP\nSm9kYXVNR0IydjNcbkVybnFac2xsdlo1ZThnNDFKMElLclhLZ1lEK2J3WUR1\na1hqcHk4OU5GZHVaaGgzK3V5ZFNROWJwSC9wYVxuZjA4YUUwUzBkSzhyeTU2\nSzVnbEVweFRtc09SZlBTUmhSSVhnalZsYVB3PT1cbiIsIml2IjoiN1VLSTh0\nUXo0aFZ6bGV5QW9kSWFxQT09XG4ifQ==\nImported license:\n#<Gitlab::License:0x00007fd086926f40>\nThis instance of GitLab Enterprise Edition is licensed to:\nName: test\nCompany: Google Inc\nEmail: test@163.com\nThe license will expire on 2026-04-23\n\nls . # 查看当前目录下文件\nGitLabBV.gitlab-license createlicense.rb        license_key             license_key.pub\n```\n\n### 3. 替换公钥以及激活license\n\n- 将createlicense.rb脚本文件生成的license_key.pub公钥内容替换到gitlab的`/opt/gitlab/embedded/service/gitlab-rails/.license_encryption_key.pub`中。然后重启gitlab，`gitlab-ctl restart`.\n\n\n- 重启完毕后，将脚本生成的GitLabBV.gitlab-license文件，导入gitlab激活页面即可激活了。\n\n\n### 4. 修改gitlab-ee的等级为ULTIMATE_PLAN\n\n\n- 修改gitlab的文件\n\n\n`vim /opt/gitlab/embedded/service/gitlab-rails/ee/app/models/license.rb`\n```ruby\n   def plan\n     restricted_attr(:plan).presence || STARTER_PLAN  ## 将STARTER_PLAN 修改为 ULTIMATE_PLAN\n   end\n```\n\n\n### 小问题\n\n\n>- 就是生成的license虽然可以激活，但是license页面老是报500错误。这个得看下后台日志排查下即可。\n\n","source":"_posts/crack-gitlab-ee-licence.md","raw":"---\ntitle: gitlab-ee 企业版自签许可证license\ndate: 2019-12-23 11:27:40\nauthor: \"Mayer Shi\"\ntags: [\"gitlab\"]\ncategories: [\"DevOps\"]\n---\n\n本篇文章主要是研究gitlab-ee的licence签发方式，仅供大家学习参考使用。请尊重软件开发者成果，支持正版。\n\n<!--more-->\n\n## 背景\n\n最近帮一个朋友推动开发测试一体化从DevOps转向GitOps。对于什么是GitOps，有时间搞个专题博客来讲讲这个概念以及最佳实践。总之在推进GitOps的时候需要，需要一些gitlab-ee 的高级特性。\n\n### 1. 安装ruby环境以及gem包管理工具\n\n- 由于我的电脑是mbp,所以自带ruby开发环境,无需安装。\n\n- 安装相关ruby包依赖`gitlab`、`gitlab-license`、`openssl`\n\n```bash\nsudo gem install gitlab\nsudo gem install gitlab-license\nsudo gem install openssl\n```\n\n### 2. 编写创建license的ruby脚本，并生成license文件\n\n\n- 创建脚本文件\n\n\n```bash\nvim createlicense.rb\n```\n\n\n- 文件内容如下\n\n```ruby\nrequire 'openssl'\nrequire 'gitlab/license'\n\n# Generate a key pair. You should do this only once.\nkey_pair = OpenSSL::PKey::RSA.generate(2048)\n\n# Write it to a file to use in the license generation application.\nFile.open(\"license_key\", \"w\") { |f| f.write(key_pair.to_pem) }\n\n# Extract the public key.\npublic_key = key_pair.public_key\n# Write it to a file to ship along with the main application.\nFile.open(\"license_key.pub\", \"w\") { |f| f.write(public_key.to_pem) }\n\n# In the license generation application, load the private key from a file.\nprivate_key = OpenSSL::PKey::RSA.new File.read(\"license_key\")\nGitlab::License.encryption_key = private_key\n\n# Build a new license.\nlicense = Gitlab::License.new\n\n# License information to be rendered as a table in the admin panel.\n# E.g.: \"This instance of GitLab Enterprise Edition is licensed to:\"\n# Specific keys don't matter, but there needs to be at least one.\nlicense.licensee = {\n  \"Name\"    => \"tester\",\n  \"Company\" => \"Google Inc\",\n  \"Email\"   => \"test@163.com\"\n}\n\n# The date the license starts. \n# Required.\nlicense.starts_at         = Date.new(2019, 4, 24) # license 开始生效时间\n# The date the license expires. \n# Not required, to allow lifetime licenses.\nlicense.expires_at        = Date.new(2026, 4, 23) # license 到期时间\n\n# The below dates are hardcoded in the license so that you can play with the\n# period after which there are \"repercussions\" to license expiration.\n\n# The date admins will be notified about the license's pending expiration. \n# Not required.\nlicense.notify_admins_at  = Date.new(2026, 3, 23) # license 管理员过期提醒时间\n\n# The date regular users will be notified about the license's pending expiration.\n# Not required.\nlicense.notify_users_at   = Date.new(2026, 3, 23) # license 普通用户过期提醒时间\n\n# The date \"changes\" like code pushes, issue or merge request creation \n# or modification and project creation will be blocked.\n# Not required.\nlicense.block_changes_at  = Date.new(2026, 5, 7) \n\n# Restrictions bundled with this license.\n# Not required, to allow unlimited-user licenses for things like educational organizations.\nlicense.restrictions  = {\n  # The maximum allowed number of active users.\n  # Not required.\n  active_user_count: 10000  # license 人数配额\n\n  # We don't currently have any other restrictions, but we might in the future.\n}\n\nputs \"License:\"\nputs license\n\n# Export the license, which encrypts and encodes it.\ndata = license.export\n\nputs \"Exported license:\"\nputs data\n\n# Write the license to a file to send to a customer.\nFile.open(\"GitLabBV.gitlab-license\", \"w\") { |f| f.write(data) }\n\n\n# In the customer's application, load the public key from a file.\npublic_key = OpenSSL::PKey::RSA.new File.read(\"license_key.pub\")\nGitlab::License.encryption_key = public_key\n\n# Read the license from a file.\ndata = File.read(\"GitLabBV.gitlab-license\")  # 生成license存储文件名\n\n# Import the license, which decodes and decrypts it.\n$license = Gitlab::License.import(data)\n\nputs \"Imported license:\"\nputs $license\n\n# Quit if the license is invalid\nunless $license\n  raise \"The license is invalid.\"\nend\n\n# Quit if the active user count exceeds the allowed amount:\nif $license.restricted?(:active_user_count)\n  active_user_count = 1000\n  if active_user_count > $license.restrictions[:active_user_count]\n    raise \"The active user count exceeds the allowed amount!\"\n  end\nend\n\n# Show admins a message if the license is about to expire.\nif $license.notify_admins?\n  puts \"The license is due to expire on #{$license.expires_at}.\"\nend\n\n# Show users a message if the license is about to expire.\nif $license.notify_users?\n  puts \"The license is due to expire on #{$license.expires_at}.\"\nend\n\n# Block pushes when the license expired two weeks ago.\nmodule Gitlab\n  class GitAccess\n    # ...\n    def check(cmd, changes = nil)\n      if $license.block_changes?\n        return build_status_object(false, \"License expired\")\n      end\n\n      # Do other Git access verification\n      # ...\n    end\n    # ...\n  end\nend\n\n# Show information about the license in the admin panel.\nputs \"This instance of GitLab Enterprise Edition is licensed to:\"\n$license.licensee.each do |key, value|\n  puts \"#{key}: #{value}\"\nend\n\nif $license.expired?\n  puts \"The license expired on #{$license.expires_at}\"\nelsif $license.will_expire?\n  puts \"The license will expire on #{$license.expires_at}\"\nelse\n  puts \"The license will never expire.\"\nend\n```\n\n- 执行以上license脚本文件，生成三个文件,\n\n```bash\nruby createlicense.rb  # 执行脚本生成如下内容\n\nLicense:\n#<Gitlab::License:0x00007fd08691eca0>\nExported license:\neyJkYXRhIjoiWVo0VEIraWJQai8zUDhWRi9OK2Y3d2JXcG1ucVZGbXhUamtP\nS0QyY01BSG9XYlBLRlh0QUcvQ1UzMm9EXG5tU1RSd0pqUmlRT2hOOC9KOWJi\nYk9mZ0krUmt5aWd2WnBNdGYydVZsUTFEemhFSU1jZWk5VjdtTWJycS9cbk9I\nV3BmMjR3TFFmcXhQdHVvNVFDbVd0Z2Njc2lNUXhPUzVxUTN0YkRvRDRhYTk2\nOVQvbjN4clc1RkNHZlxuUXU0TnZ1OHhqcjlZMTJIZk5yaVd3a2ZLZTBqZitU\ncExvem9GTk9QY2d5R3hGdEtkNGVUVzdpa0tQRUNCXG5IRmZYVlVydHdBU3Fm\nei96WFNvaHRGVTFLWW1USkxMOFQ5eW5PTFdpQ1gycXRIYkF1T0hLV0N0bi9W\ndE5cbjViZ3VRd05xd2hSOHlNanB6SFhNNC9OemZMVkRVQ3ZTTndVZWR6Q2Q1\nQ3hrcE9BOEU1cFN5aXRiSTBkZ1xucTJ1ekJnSHNtdlVVdE5mbjFPUWtTc0FS\ndkE2QUxUdGs1ZXZZN3Z6SDJ5N3FMZz09XG4iLCJrZXkiOiJnZ200N1hvRnkr\nOTRYb09wcFh5akE1VVo0NTU5REhxeWhVVHMzVWV1dDhRRDRzZGpReVZwRGVp\nQkFuajZcblgvL2RvYnM5QVRyYlRZa0V0SEJadUN5bGR5dUhlbEhQSHdJNUxS\nRXgyeUpkb2NBRnRVVTNlTjdKcm9ZZ1xuVGJPaXk5c1E4eldNMWhZYWlWWDAy\neDdpTGx6eHA3eDJVSWJpRkZZd2J1dmZXeGtiMk10dnVQdFdsOUt0XG5mcW91\nb0dYN0ZZclV1d3NWOGVNNTcyeS90elpMNFBLMFZvTE5vN3d6eEdveW1FbUNP\nSm9kYXVNR0IydjNcbkVybnFac2xsdlo1ZThnNDFKMElLclhLZ1lEK2J3WUR1\na1hqcHk4OU5GZHVaaGgzK3V5ZFNROWJwSC9wYVxuZjA4YUUwUzBkSzhyeTU2\nSzVnbEVweFRtc09SZlBTUmhSSVhnalZsYVB3PT1cbiIsIml2IjoiN1VLSTh0\nUXo0aFZ6bGV5QW9kSWFxQT09XG4ifQ==\nImported license:\n#<Gitlab::License:0x00007fd086926f40>\nThis instance of GitLab Enterprise Edition is licensed to:\nName: test\nCompany: Google Inc\nEmail: test@163.com\nThe license will expire on 2026-04-23\n\nls . # 查看当前目录下文件\nGitLabBV.gitlab-license createlicense.rb        license_key             license_key.pub\n```\n\n### 3. 替换公钥以及激活license\n\n- 将createlicense.rb脚本文件生成的license_key.pub公钥内容替换到gitlab的`/opt/gitlab/embedded/service/gitlab-rails/.license_encryption_key.pub`中。然后重启gitlab，`gitlab-ctl restart`.\n\n\n- 重启完毕后，将脚本生成的GitLabBV.gitlab-license文件，导入gitlab激活页面即可激活了。\n\n\n### 4. 修改gitlab-ee的等级为ULTIMATE_PLAN\n\n\n- 修改gitlab的文件\n\n\n`vim /opt/gitlab/embedded/service/gitlab-rails/ee/app/models/license.rb`\n```ruby\n   def plan\n     restricted_attr(:plan).presence || STARTER_PLAN  ## 将STARTER_PLAN 修改为 ULTIMATE_PLAN\n   end\n```\n\n\n### 小问题\n\n\n>- 就是生成的license虽然可以激活，但是license页面老是报500错误。这个得看下后台日志排查下即可。\n\n","slug":"crack-gitlab-ee-licence","published":1,"updated":"2019-12-23T03:27:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoec000324lv936t4kzd","content":"<p>本篇文章主要是研究gitlab-ee的licence签发方式，仅供大家学习参考使用。请尊重软件开发者成果，支持正版。</p>\n<a id=\"more\"></a>\n<h2 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\"></a> 背景</h2>\n<p>最近帮一个朋友推动开发测试一体化从DevOps转向GitOps。对于什么是GitOps，有时间搞个专题博客来讲讲这个概念以及最佳实践。总之在推进GitOps的时候需要，需要一些gitlab-ee 的高级特性。</p>\n<h3 id=\"1-安装ruby环境以及gem包管理工具\"><a class=\"markdownIt-Anchor\" href=\"#1-安装ruby环境以及gem包管理工具\"></a> 1. 安装ruby环境以及gem包管理工具</h3>\n<ul>\n<li>\n<p>由于我的电脑是mbp,所以自带ruby开发环境,无需安装。</p>\n</li>\n<li>\n<p>安装相关ruby包依赖<code>gitlab</code>、<code>gitlab-license</code>、<code>openssl</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install gitlab</span><br><span class=\"line\">sudo gem install gitlab-license</span><br><span class=\"line\">sudo gem install openssl</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-编写创建license的ruby脚本并生成license文件\"><a class=\"markdownIt-Anchor\" href=\"#2-编写创建license的ruby脚本并生成license文件\"></a> 2. 编写创建license的ruby脚本，并生成license文件</h3>\n<ul>\n<li>创建脚本文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim createlicense.rb</span><br></pre></td></tr></table></figure>\n<ul>\n<li>文件内容如下</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&#x27;openssl&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&#x27;gitlab/license&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generate a key pair. You should do this only once.</span></span><br><span class=\"line\">key_pair = OpenSSL::PKey::RSA.generate(<span class=\"number\">2048</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Write it to a file to use in the license generation application.</span></span><br><span class=\"line\">File.open(<span class=\"string\">&quot;license_key&quot;</span>, <span class=\"string\">&quot;w&quot;</span>) &#123; <span class=\"params\">|f|</span> f.write(key_pair.to_pem) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Extract the public key.</span></span><br><span class=\"line\">public_key = key_pair.public_key</span><br><span class=\"line\"><span class=\"comment\"># Write it to a file to ship along with the main application.</span></span><br><span class=\"line\">File.open(<span class=\"string\">&quot;license_key.pub&quot;</span>, <span class=\"string\">&quot;w&quot;</span>) &#123; <span class=\"params\">|f|</span> f.write(public_key.to_pem) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># In the license generation application, load the private key from a file.</span></span><br><span class=\"line\">private_key = OpenSSL::PKey::RSA.new File.read(<span class=\"string\">&quot;license_key&quot;</span>)</span><br><span class=\"line\">Gitlab::License.encryption_key = private_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Build a new license.</span></span><br><span class=\"line\">license = Gitlab::License.new</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># License information to be rendered as a table in the admin panel.</span></span><br><span class=\"line\"><span class=\"comment\"># E.g.: &quot;This instance of GitLab Enterprise Edition is licensed to:&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># Specific keys don&#x27;t matter, but there needs to be at least one.</span></span><br><span class=\"line\">license.licensee = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;Name&quot;</span>    =&gt; <span class=\"string\">&quot;tester&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Company&quot;</span> =&gt; <span class=\"string\">&quot;Google Inc&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Email&quot;</span>   =&gt; <span class=\"string\">&quot;test@163.com&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The date the license starts. </span></span><br><span class=\"line\"><span class=\"comment\"># Required.</span></span><br><span class=\"line\">license.starts_at         = Date.new(<span class=\"number\">2019</span>, <span class=\"number\">4</span>, <span class=\"number\">24</span>) <span class=\"comment\"># license 开始生效时间</span></span><br><span class=\"line\"><span class=\"comment\"># The date the license expires. </span></span><br><span class=\"line\"><span class=\"comment\"># Not required, to allow lifetime licenses.</span></span><br><span class=\"line\">license.expires_at        = Date.new(<span class=\"number\">2026</span>, <span class=\"number\">4</span>, <span class=\"number\">23</span>) <span class=\"comment\"># license 到期时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The below dates are hardcoded in the license so that you can play with the</span></span><br><span class=\"line\"><span class=\"comment\"># period after which there are &quot;repercussions&quot; to license expiration.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The date admins will be notified about the license&#x27;s pending expiration. </span></span><br><span class=\"line\"><span class=\"comment\"># Not required.</span></span><br><span class=\"line\">license.notify_admins_at  = Date.new(<span class=\"number\">2026</span>, <span class=\"number\">3</span>, <span class=\"number\">23</span>) <span class=\"comment\"># license 管理员过期提醒时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The date regular users will be notified about the license&#x27;s pending expiration.</span></span><br><span class=\"line\"><span class=\"comment\"># Not required.</span></span><br><span class=\"line\">license.notify_users_at   = Date.new(<span class=\"number\">2026</span>, <span class=\"number\">3</span>, <span class=\"number\">23</span>) <span class=\"comment\"># license 普通用户过期提醒时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The date &quot;changes&quot; like code pushes, issue or merge request creation </span></span><br><span class=\"line\"><span class=\"comment\"># or modification and project creation will be blocked.</span></span><br><span class=\"line\"><span class=\"comment\"># Not required.</span></span><br><span class=\"line\">license.block_changes_at  = Date.new(<span class=\"number\">2026</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Restrictions bundled with this license.</span></span><br><span class=\"line\"><span class=\"comment\"># Not required, to allow unlimited-user licenses for things like educational organizations.</span></span><br><span class=\"line\">license.restrictions  = &#123;</span><br><span class=\"line\">  <span class=\"comment\"># The maximum allowed number of active users.</span></span><br><span class=\"line\">  <span class=\"comment\"># Not required.</span></span><br><span class=\"line\">  <span class=\"symbol\">active_user_count:</span> <span class=\"number\">10000</span>  <span class=\"comment\"># license 人数配额</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># We don&#x27;t currently have any other restrictions, but we might in the future.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">&quot;License:&quot;</span></span><br><span class=\"line\">puts license</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Export the license, which encrypts and encodes it.</span></span><br><span class=\"line\">data = license.export</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">&quot;Exported license:&quot;</span></span><br><span class=\"line\">puts data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Write the license to a file to send to a customer.</span></span><br><span class=\"line\">File.open(<span class=\"string\">&quot;GitLabBV.gitlab-license&quot;</span>, <span class=\"string\">&quot;w&quot;</span>) &#123; <span class=\"params\">|f|</span> f.write(data) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># In the customer&#x27;s application, load the public key from a file.</span></span><br><span class=\"line\">public_key = OpenSSL::PKey::RSA.new File.read(<span class=\"string\">&quot;license_key.pub&quot;</span>)</span><br><span class=\"line\">Gitlab::License.encryption_key = public_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Read the license from a file.</span></span><br><span class=\"line\">data = File.read(<span class=\"string\">&quot;GitLabBV.gitlab-license&quot;</span>)  <span class=\"comment\"># 生成license存储文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Import the license, which decodes and decrypts it.</span></span><br><span class=\"line\">$license = Gitlab::License.import(data)</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">&quot;Imported license:&quot;</span></span><br><span class=\"line\">puts $license</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Quit if the license is invalid</span></span><br><span class=\"line\"><span class=\"keyword\">unless</span> $license</span><br><span class=\"line\">  raise <span class=\"string\">&quot;The license is invalid.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Quit if the active user count exceeds the allowed amount:</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> $license.restricted?(<span class=\"symbol\">:active_user_count</span>)</span><br><span class=\"line\">  active_user_count = <span class=\"number\">1000</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> active_user_count &gt; $license.restrictions[<span class=\"symbol\">:active_user_count</span>]</span><br><span class=\"line\">    raise <span class=\"string\">&quot;The active user count exceeds the allowed amount!&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Show admins a message if the license is about to expire.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> $license.notify_admins?</span><br><span class=\"line\">  puts <span class=\"string\">&quot;The license is due to expire on <span class=\"subst\">#&#123;$license.expires_at&#125;</span>.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Show users a message if the license is about to expire.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> $license.notify_users?</span><br><span class=\"line\">  puts <span class=\"string\">&quot;The license is due to expire on <span class=\"subst\">#&#123;$license.expires_at&#125;</span>.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Block pushes when the license expired two weeks ago.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Gitlab</span></span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GitAccess</span></span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(cmd, changes = <span class=\"literal\">nil</span>)</span></span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> $license.block_changes?</span><br><span class=\"line\">        <span class=\"keyword\">return</span> build_status_object(<span class=\"literal\">false</span>, <span class=\"string\">&quot;License expired&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># Do other Git access verification</span></span><br><span class=\"line\">      <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Show information about the license in the admin panel.</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;This instance of GitLab Enterprise Edition is licensed to:&quot;</span></span><br><span class=\"line\">$license.licensee.each <span class=\"keyword\">do</span> <span class=\"params\">|key, value|</span></span><br><span class=\"line\">  puts <span class=\"string\">&quot;<span class=\"subst\">#&#123;key&#125;</span>: <span class=\"subst\">#&#123;value&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> $license.expired?</span><br><span class=\"line\">  puts <span class=\"string\">&quot;The license expired on <span class=\"subst\">#&#123;$license.expires_at&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elsif</span> $license.will_expire?</span><br><span class=\"line\">  puts <span class=\"string\">&quot;The license will expire on <span class=\"subst\">#&#123;$license.expires_at&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  puts <span class=\"string\">&quot;The license will never expire.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行以上license脚本文件，生成三个文件,</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby createlicense.rb  <span class=\"comment\"># 执行脚本生成如下内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">License:</span><br><span class=\"line\"><span class=\"comment\">#&lt;Gitlab::License:0x00007fd08691eca0&gt;</span></span><br><span class=\"line\">Exported license:</span><br><span class=\"line\">eyJkYXRhIjoiWVo0VEIraWJQai8zUDhWRi9OK2Y3d2JXcG1ucVZGbXhUamtP</span><br><span class=\"line\">S0QyY01BSG9XYlBLRlh0QUcvQ1UzMm9EXG5tU1RSd0pqUmlRT2hOOC9KOWJi</span><br><span class=\"line\">Yk9mZ0krUmt5aWd2WnBNdGYydVZsUTFEemhFSU1jZWk5VjdtTWJycS9cbk9I</span><br><span class=\"line\">V3BmMjR3TFFmcXhQdHVvNVFDbVd0Z2Njc2lNUXhPUzVxUTN0YkRvRDRhYTk2</span><br><span class=\"line\">OVQvbjN4clc1RkNHZlxuUXU0TnZ1OHhqcjlZMTJIZk5yaVd3a2ZLZTBqZitU</span><br><span class=\"line\">cExvem9GTk9QY2d5R3hGdEtkNGVUVzdpa0tQRUNCXG5IRmZYVlVydHdBU3Fm</span><br><span class=\"line\">ei96WFNvaHRGVTFLWW1USkxMOFQ5eW5PTFdpQ1gycXRIYkF1T0hLV0N0bi9W</span><br><span class=\"line\">dE5cbjViZ3VRd05xd2hSOHlNanB6SFhNNC9OemZMVkRVQ3ZTTndVZWR6Q2Q1</span><br><span class=\"line\">Q3hrcE9BOEU1cFN5aXRiSTBkZ1xucTJ1ekJnSHNtdlVVdE5mbjFPUWtTc0FS</span><br><span class=\"line\">dkE2QUxUdGs1ZXZZN3Z6SDJ5N3FMZz09XG4iLCJrZXkiOiJnZ200N1hvRnkr</span><br><span class=\"line\">OTRYb09wcFh5akE1VVo0NTU5REhxeWhVVHMzVWV1dDhRRDRzZGpReVZwRGVp</span><br><span class=\"line\">QkFuajZcblgvL2RvYnM5QVRyYlRZa0V0SEJadUN5bGR5dUhlbEhQSHdJNUxS</span><br><span class=\"line\">RXgyeUpkb2NBRnRVVTNlTjdKcm9ZZ1xuVGJPaXk5c1E4eldNMWhZYWlWWDAy</span><br><span class=\"line\">eDdpTGx6eHA3eDJVSWJpRkZZd2J1dmZXeGtiMk10dnVQdFdsOUt0XG5mcW91</span><br><span class=\"line\">b0dYN0ZZclV1d3NWOGVNNTcyeS90elpMNFBLMFZvTE5vN3d6eEdveW1FbUNP</span><br><span class=\"line\">Sm9kYXVNR0IydjNcbkVybnFac2xsdlo1ZThnNDFKMElLclhLZ1lEK2J3WUR1</span><br><span class=\"line\">a1hqcHk4OU5GZHVaaGgzK3V5ZFNROWJwSC9wYVxuZjA4YUUwUzBkSzhyeTU2</span><br><span class=\"line\">SzVnbEVweFRtc09SZlBTUmhSSVhnalZsYVB3PT1cbiIsIml2IjoiN1VLSTh0</span><br><span class=\"line\">UXo0aFZ6bGV5QW9kSWFxQT09XG4ifQ==</span><br><span class=\"line\">Imported license:</span><br><span class=\"line\"><span class=\"comment\">#&lt;Gitlab::License:0x00007fd086926f40&gt;</span></span><br><span class=\"line\">This instance of GitLab Enterprise Edition is licensed to:</span><br><span class=\"line\">Name: <span class=\"built_in\">test</span></span><br><span class=\"line\">Company: Google Inc</span><br><span class=\"line\">Email: <span class=\"built_in\">test</span>@163.com</span><br><span class=\"line\">The license will expire on 2026-04-23</span><br><span class=\"line\"></span><br><span class=\"line\">ls . <span class=\"comment\"># 查看当前目录下文件</span></span><br><span class=\"line\">GitLabBV.gitlab-license createlicense.rb        license_key             license_key.pub</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-替换公钥以及激活license\"><a class=\"markdownIt-Anchor\" href=\"#3-替换公钥以及激活license\"></a> 3. 替换公钥以及激活license</h3>\n<ul>\n<li>\n<p>将createlicense.rb脚本文件生成的license_key.pub公钥内容替换到gitlab的<code>/opt/gitlab/embedded/service/gitlab-rails/.license_encryption_key.pub</code>中。然后重启gitlab，<code>gitlab-ctl restart</code>.</p>\n</li>\n<li>\n<p>重启完毕后，将脚本生成的GitLabBV.gitlab-license文件，导入gitlab激活页面即可激活了。</p>\n</li>\n</ul>\n<h3 id=\"4-修改gitlab-ee的等级为ultimate_plan\"><a class=\"markdownIt-Anchor\" href=\"#4-修改gitlab-ee的等级为ultimate_plan\"></a> 4. 修改gitlab-ee的等级为ULTIMATE_PLAN</h3>\n<ul>\n<li>修改gitlab的文件</li>\n</ul>\n<p><code>vim /opt/gitlab/embedded/service/gitlab-rails/ee/app/models/license.rb</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plan</span></span></span><br><span class=\"line\">  restricted_attr(<span class=\"symbol\">:plan</span>).presence <span class=\"params\">||</span> STARTER_PLAN  <span class=\"comment\">## 将STARTER_PLAN 修改为 ULTIMATE_PLAN</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"小问题\"><a class=\"markdownIt-Anchor\" href=\"#小问题\"></a> 小问题</h3>\n<blockquote>\n<ul>\n<li>就是生成的license虽然可以激活，但是license页面老是报500错误。这个得看下后台日志排查下即可。</li>\n</ul>\n</blockquote>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>本篇文章主要是研究gitlab-ee的licence签发方式，仅供大家学习参考使用。请尊重软件开发者成果，支持正版。</p>","more":"<h2 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\"></a> 背景</h2>\n<p>最近帮一个朋友推动开发测试一体化从DevOps转向GitOps。对于什么是GitOps，有时间搞个专题博客来讲讲这个概念以及最佳实践。总之在推进GitOps的时候需要，需要一些gitlab-ee 的高级特性。</p>\n<h3 id=\"1-安装ruby环境以及gem包管理工具\"><a class=\"markdownIt-Anchor\" href=\"#1-安装ruby环境以及gem包管理工具\"></a> 1. 安装ruby环境以及gem包管理工具</h3>\n<ul>\n<li>\n<p>由于我的电脑是mbp,所以自带ruby开发环境,无需安装。</p>\n</li>\n<li>\n<p>安装相关ruby包依赖<code>gitlab</code>、<code>gitlab-license</code>、<code>openssl</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install gitlab</span><br><span class=\"line\">sudo gem install gitlab-license</span><br><span class=\"line\">sudo gem install openssl</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-编写创建license的ruby脚本并生成license文件\"><a class=\"markdownIt-Anchor\" href=\"#2-编写创建license的ruby脚本并生成license文件\"></a> 2. 编写创建license的ruby脚本，并生成license文件</h3>\n<ul>\n<li>创建脚本文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim createlicense.rb</span><br></pre></td></tr></table></figure>\n<ul>\n<li>文件内容如下</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&#x27;openssl&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&#x27;gitlab/license&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generate a key pair. You should do this only once.</span></span><br><span class=\"line\">key_pair = OpenSSL::PKey::RSA.generate(<span class=\"number\">2048</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Write it to a file to use in the license generation application.</span></span><br><span class=\"line\">File.open(<span class=\"string\">&quot;license_key&quot;</span>, <span class=\"string\">&quot;w&quot;</span>) &#123; <span class=\"params\">|f|</span> f.write(key_pair.to_pem) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Extract the public key.</span></span><br><span class=\"line\">public_key = key_pair.public_key</span><br><span class=\"line\"><span class=\"comment\"># Write it to a file to ship along with the main application.</span></span><br><span class=\"line\">File.open(<span class=\"string\">&quot;license_key.pub&quot;</span>, <span class=\"string\">&quot;w&quot;</span>) &#123; <span class=\"params\">|f|</span> f.write(public_key.to_pem) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># In the license generation application, load the private key from a file.</span></span><br><span class=\"line\">private_key = OpenSSL::PKey::RSA.new File.read(<span class=\"string\">&quot;license_key&quot;</span>)</span><br><span class=\"line\">Gitlab::License.encryption_key = private_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Build a new license.</span></span><br><span class=\"line\">license = Gitlab::License.new</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># License information to be rendered as a table in the admin panel.</span></span><br><span class=\"line\"><span class=\"comment\"># E.g.: &quot;This instance of GitLab Enterprise Edition is licensed to:&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># Specific keys don&#x27;t matter, but there needs to be at least one.</span></span><br><span class=\"line\">license.licensee = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;Name&quot;</span>    =&gt; <span class=\"string\">&quot;tester&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Company&quot;</span> =&gt; <span class=\"string\">&quot;Google Inc&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Email&quot;</span>   =&gt; <span class=\"string\">&quot;test@163.com&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The date the license starts. </span></span><br><span class=\"line\"><span class=\"comment\"># Required.</span></span><br><span class=\"line\">license.starts_at         = Date.new(<span class=\"number\">2019</span>, <span class=\"number\">4</span>, <span class=\"number\">24</span>) <span class=\"comment\"># license 开始生效时间</span></span><br><span class=\"line\"><span class=\"comment\"># The date the license expires. </span></span><br><span class=\"line\"><span class=\"comment\"># Not required, to allow lifetime licenses.</span></span><br><span class=\"line\">license.expires_at        = Date.new(<span class=\"number\">2026</span>, <span class=\"number\">4</span>, <span class=\"number\">23</span>) <span class=\"comment\"># license 到期时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The below dates are hardcoded in the license so that you can play with the</span></span><br><span class=\"line\"><span class=\"comment\"># period after which there are &quot;repercussions&quot; to license expiration.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The date admins will be notified about the license&#x27;s pending expiration. </span></span><br><span class=\"line\"><span class=\"comment\"># Not required.</span></span><br><span class=\"line\">license.notify_admins_at  = Date.new(<span class=\"number\">2026</span>, <span class=\"number\">3</span>, <span class=\"number\">23</span>) <span class=\"comment\"># license 管理员过期提醒时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The date regular users will be notified about the license&#x27;s pending expiration.</span></span><br><span class=\"line\"><span class=\"comment\"># Not required.</span></span><br><span class=\"line\">license.notify_users_at   = Date.new(<span class=\"number\">2026</span>, <span class=\"number\">3</span>, <span class=\"number\">23</span>) <span class=\"comment\"># license 普通用户过期提醒时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The date &quot;changes&quot; like code pushes, issue or merge request creation </span></span><br><span class=\"line\"><span class=\"comment\"># or modification and project creation will be blocked.</span></span><br><span class=\"line\"><span class=\"comment\"># Not required.</span></span><br><span class=\"line\">license.block_changes_at  = Date.new(<span class=\"number\">2026</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Restrictions bundled with this license.</span></span><br><span class=\"line\"><span class=\"comment\"># Not required, to allow unlimited-user licenses for things like educational organizations.</span></span><br><span class=\"line\">license.restrictions  = &#123;</span><br><span class=\"line\">  <span class=\"comment\"># The maximum allowed number of active users.</span></span><br><span class=\"line\">  <span class=\"comment\"># Not required.</span></span><br><span class=\"line\">  <span class=\"symbol\">active_user_count:</span> <span class=\"number\">10000</span>  <span class=\"comment\"># license 人数配额</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># We don&#x27;t currently have any other restrictions, but we might in the future.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">&quot;License:&quot;</span></span><br><span class=\"line\">puts license</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Export the license, which encrypts and encodes it.</span></span><br><span class=\"line\">data = license.export</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">&quot;Exported license:&quot;</span></span><br><span class=\"line\">puts data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Write the license to a file to send to a customer.</span></span><br><span class=\"line\">File.open(<span class=\"string\">&quot;GitLabBV.gitlab-license&quot;</span>, <span class=\"string\">&quot;w&quot;</span>) &#123; <span class=\"params\">|f|</span> f.write(data) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># In the customer&#x27;s application, load the public key from a file.</span></span><br><span class=\"line\">public_key = OpenSSL::PKey::RSA.new File.read(<span class=\"string\">&quot;license_key.pub&quot;</span>)</span><br><span class=\"line\">Gitlab::License.encryption_key = public_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Read the license from a file.</span></span><br><span class=\"line\">data = File.read(<span class=\"string\">&quot;GitLabBV.gitlab-license&quot;</span>)  <span class=\"comment\"># 生成license存储文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Import the license, which decodes and decrypts it.</span></span><br><span class=\"line\">$license = Gitlab::License.import(data)</span><br><span class=\"line\"></span><br><span class=\"line\">puts <span class=\"string\">&quot;Imported license:&quot;</span></span><br><span class=\"line\">puts $license</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Quit if the license is invalid</span></span><br><span class=\"line\"><span class=\"keyword\">unless</span> $license</span><br><span class=\"line\">  raise <span class=\"string\">&quot;The license is invalid.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Quit if the active user count exceeds the allowed amount:</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> $license.restricted?(<span class=\"symbol\">:active_user_count</span>)</span><br><span class=\"line\">  active_user_count = <span class=\"number\">1000</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> active_user_count &gt; $license.restrictions[<span class=\"symbol\">:active_user_count</span>]</span><br><span class=\"line\">    raise <span class=\"string\">&quot;The active user count exceeds the allowed amount!&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Show admins a message if the license is about to expire.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> $license.notify_admins?</span><br><span class=\"line\">  puts <span class=\"string\">&quot;The license is due to expire on <span class=\"subst\">#&#123;$license.expires_at&#125;</span>.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Show users a message if the license is about to expire.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> $license.notify_users?</span><br><span class=\"line\">  puts <span class=\"string\">&quot;The license is due to expire on <span class=\"subst\">#&#123;$license.expires_at&#125;</span>.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Block pushes when the license expired two weeks ago.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">Gitlab</span></span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GitAccess</span></span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span><span class=\"params\">(cmd, changes = <span class=\"literal\">nil</span>)</span></span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> $license.block_changes?</span><br><span class=\"line\">        <span class=\"keyword\">return</span> build_status_object(<span class=\"literal\">false</span>, <span class=\"string\">&quot;License expired&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># Do other Git access verification</span></span><br><span class=\"line\">      <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Show information about the license in the admin panel.</span></span><br><span class=\"line\">puts <span class=\"string\">&quot;This instance of GitLab Enterprise Edition is licensed to:&quot;</span></span><br><span class=\"line\">$license.licensee.each <span class=\"keyword\">do</span> <span class=\"params\">|key, value|</span></span><br><span class=\"line\">  puts <span class=\"string\">&quot;<span class=\"subst\">#&#123;key&#125;</span>: <span class=\"subst\">#&#123;value&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> $license.expired?</span><br><span class=\"line\">  puts <span class=\"string\">&quot;The license expired on <span class=\"subst\">#&#123;$license.expires_at&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">elsif</span> $license.will_expire?</span><br><span class=\"line\">  puts <span class=\"string\">&quot;The license will expire on <span class=\"subst\">#&#123;$license.expires_at&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  puts <span class=\"string\">&quot;The license will never expire.&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行以上license脚本文件，生成三个文件,</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby createlicense.rb  <span class=\"comment\"># 执行脚本生成如下内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">License:</span><br><span class=\"line\"><span class=\"comment\">#&lt;Gitlab::License:0x00007fd08691eca0&gt;</span></span><br><span class=\"line\">Exported license:</span><br><span class=\"line\">eyJkYXRhIjoiWVo0VEIraWJQai8zUDhWRi9OK2Y3d2JXcG1ucVZGbXhUamtP</span><br><span class=\"line\">S0QyY01BSG9XYlBLRlh0QUcvQ1UzMm9EXG5tU1RSd0pqUmlRT2hOOC9KOWJi</span><br><span class=\"line\">Yk9mZ0krUmt5aWd2WnBNdGYydVZsUTFEemhFSU1jZWk5VjdtTWJycS9cbk9I</span><br><span class=\"line\">V3BmMjR3TFFmcXhQdHVvNVFDbVd0Z2Njc2lNUXhPUzVxUTN0YkRvRDRhYTk2</span><br><span class=\"line\">OVQvbjN4clc1RkNHZlxuUXU0TnZ1OHhqcjlZMTJIZk5yaVd3a2ZLZTBqZitU</span><br><span class=\"line\">cExvem9GTk9QY2d5R3hGdEtkNGVUVzdpa0tQRUNCXG5IRmZYVlVydHdBU3Fm</span><br><span class=\"line\">ei96WFNvaHRGVTFLWW1USkxMOFQ5eW5PTFdpQ1gycXRIYkF1T0hLV0N0bi9W</span><br><span class=\"line\">dE5cbjViZ3VRd05xd2hSOHlNanB6SFhNNC9OemZMVkRVQ3ZTTndVZWR6Q2Q1</span><br><span class=\"line\">Q3hrcE9BOEU1cFN5aXRiSTBkZ1xucTJ1ekJnSHNtdlVVdE5mbjFPUWtTc0FS</span><br><span class=\"line\">dkE2QUxUdGs1ZXZZN3Z6SDJ5N3FMZz09XG4iLCJrZXkiOiJnZ200N1hvRnkr</span><br><span class=\"line\">OTRYb09wcFh5akE1VVo0NTU5REhxeWhVVHMzVWV1dDhRRDRzZGpReVZwRGVp</span><br><span class=\"line\">QkFuajZcblgvL2RvYnM5QVRyYlRZa0V0SEJadUN5bGR5dUhlbEhQSHdJNUxS</span><br><span class=\"line\">RXgyeUpkb2NBRnRVVTNlTjdKcm9ZZ1xuVGJPaXk5c1E4eldNMWhZYWlWWDAy</span><br><span class=\"line\">eDdpTGx6eHA3eDJVSWJpRkZZd2J1dmZXeGtiMk10dnVQdFdsOUt0XG5mcW91</span><br><span class=\"line\">b0dYN0ZZclV1d3NWOGVNNTcyeS90elpMNFBLMFZvTE5vN3d6eEdveW1FbUNP</span><br><span class=\"line\">Sm9kYXVNR0IydjNcbkVybnFac2xsdlo1ZThnNDFKMElLclhLZ1lEK2J3WUR1</span><br><span class=\"line\">a1hqcHk4OU5GZHVaaGgzK3V5ZFNROWJwSC9wYVxuZjA4YUUwUzBkSzhyeTU2</span><br><span class=\"line\">SzVnbEVweFRtc09SZlBTUmhSSVhnalZsYVB3PT1cbiIsIml2IjoiN1VLSTh0</span><br><span class=\"line\">UXo0aFZ6bGV5QW9kSWFxQT09XG4ifQ==</span><br><span class=\"line\">Imported license:</span><br><span class=\"line\"><span class=\"comment\">#&lt;Gitlab::License:0x00007fd086926f40&gt;</span></span><br><span class=\"line\">This instance of GitLab Enterprise Edition is licensed to:</span><br><span class=\"line\">Name: <span class=\"built_in\">test</span></span><br><span class=\"line\">Company: Google Inc</span><br><span class=\"line\">Email: <span class=\"built_in\">test</span>@163.com</span><br><span class=\"line\">The license will expire on 2026-04-23</span><br><span class=\"line\"></span><br><span class=\"line\">ls . <span class=\"comment\"># 查看当前目录下文件</span></span><br><span class=\"line\">GitLabBV.gitlab-license createlicense.rb        license_key             license_key.pub</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-替换公钥以及激活license\"><a class=\"markdownIt-Anchor\" href=\"#3-替换公钥以及激活license\"></a> 3. 替换公钥以及激活license</h3>\n<ul>\n<li>\n<p>将createlicense.rb脚本文件生成的license_key.pub公钥内容替换到gitlab的<code>/opt/gitlab/embedded/service/gitlab-rails/.license_encryption_key.pub</code>中。然后重启gitlab，<code>gitlab-ctl restart</code>.</p>\n</li>\n<li>\n<p>重启完毕后，将脚本生成的GitLabBV.gitlab-license文件，导入gitlab激活页面即可激活了。</p>\n</li>\n</ul>\n<h3 id=\"4-修改gitlab-ee的等级为ultimate_plan\"><a class=\"markdownIt-Anchor\" href=\"#4-修改gitlab-ee的等级为ultimate_plan\"></a> 4. 修改gitlab-ee的等级为ULTIMATE_PLAN</h3>\n<ul>\n<li>修改gitlab的文件</li>\n</ul>\n<p><code>vim /opt/gitlab/embedded/service/gitlab-rails/ee/app/models/license.rb</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">plan</span></span></span><br><span class=\"line\">  restricted_attr(<span class=\"symbol\">:plan</span>).presence <span class=\"params\">||</span> STARTER_PLAN  <span class=\"comment\">## 将STARTER_PLAN 修改为 ULTIMATE_PLAN</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"小问题\"><a class=\"markdownIt-Anchor\" href=\"#小问题\"></a> 小问题</h3>\n<blockquote>\n<ul>\n<li>就是生成的license虽然可以激活，但是license页面老是报500错误。这个得看下后台日志排查下即可。</li>\n</ul>\n</blockquote>"},{"title":"命令行下如何获取外网地址","author":"Mayer Shi","date":"2019-12-18T19:09:58.000Z","draft":true,"_content":"\n公司业务涉及到数据安全层面的时候，往往会通过IP白名单的方式来控制数据或者应用的访问。如何快速获取当前主机所在外网IP是个刚需。\n\n<!--more-->\n\n**第一种方式：**\n\n```bash\ncurl cip.cc\ncurl ipinfo.io\ncurl myip.ipip.net\ncurl http://members.3322.org/dyndns/getip\ncurl https://ip.cn  # 推荐使用这个\ncurl httpbin.org/ip\ncurl ip.sb \ncurl whatismyip.akamai.com\ncurl ipecho.net/plain\ncurl icanhazip.com\n```\n\n**第二种方式**\n```bash\ncurl -s  http://ip.taobao.com/service/getIpInfo2.php?ip=myip | awk -F\"ip\" '{print $2}' | awk -F'\"' '{print $3}'\n\ncurl -s ifcfg.cn/echo | python -m json.tool\n```","source":"_posts/curl-ip.md","raw":"---\ntitle: \"命令行下如何获取外网地址\"\nauthor: \"Mayer Shi\"\ntags: [\"cmd\"]\ncategories: [\"Ops\"]\ndate: 2019-12-19T11:09:58+08:00\ndraft: true\n---\n\n公司业务涉及到数据安全层面的时候，往往会通过IP白名单的方式来控制数据或者应用的访问。如何快速获取当前主机所在外网IP是个刚需。\n\n<!--more-->\n\n**第一种方式：**\n\n```bash\ncurl cip.cc\ncurl ipinfo.io\ncurl myip.ipip.net\ncurl http://members.3322.org/dyndns/getip\ncurl https://ip.cn  # 推荐使用这个\ncurl httpbin.org/ip\ncurl ip.sb \ncurl whatismyip.akamai.com\ncurl ipecho.net/plain\ncurl icanhazip.com\n```\n\n**第二种方式**\n```bash\ncurl -s  http://ip.taobao.com/service/getIpInfo2.php?ip=myip | awk -F\"ip\" '{print $2}' | awk -F'\"' '{print $3}'\n\ncurl -s ifcfg.cn/echo | python -m json.tool\n```","slug":"curl-ip","published":1,"updated":"2019-12-18T19:09:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoef000724lv6yhw8o93","content":"<p>公司业务涉及到数据安全层面的时候，往往会通过IP白名单的方式来控制数据或者应用的访问。如何快速获取当前主机所在外网IP是个刚需。</p>\n<a id=\"more\"></a>\n<p><strong>第一种方式：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl cip.cc</span><br><span class=\"line\">curl ipinfo.io</span><br><span class=\"line\">curl myip.ipip.net</span><br><span class=\"line\">curl http://members.3322.org/dyndns/getip</span><br><span class=\"line\">curl https://ip.cn  <span class=\"comment\"># 推荐使用这个</span></span><br><span class=\"line\">curl httpbin.org/ip</span><br><span class=\"line\">curl ip.sb </span><br><span class=\"line\">curl whatismyip.akamai.com</span><br><span class=\"line\">curl ipecho.net/plain</span><br><span class=\"line\">curl icanhazip.com</span><br></pre></td></tr></table></figure>\n<p><strong>第二种方式</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s  http://ip.taobao.com/service/getIpInfo2.php?ip=myip | awk -F<span class=\"string\">&quot;ip&quot;</span> <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F<span class=\"string\">&#x27;&quot;&#x27;</span> <span class=\"string\">&#x27;&#123;print $3&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl -s ifcfg.cn/<span class=\"built_in\">echo</span> | python -m json.tool</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>公司业务涉及到数据安全层面的时候，往往会通过IP白名单的方式来控制数据或者应用的访问。如何快速获取当前主机所在外网IP是个刚需。</p>","more":"<p><strong>第一种方式：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl cip.cc</span><br><span class=\"line\">curl ipinfo.io</span><br><span class=\"line\">curl myip.ipip.net</span><br><span class=\"line\">curl http://members.3322.org/dyndns/getip</span><br><span class=\"line\">curl https://ip.cn  <span class=\"comment\"># 推荐使用这个</span></span><br><span class=\"line\">curl httpbin.org/ip</span><br><span class=\"line\">curl ip.sb </span><br><span class=\"line\">curl whatismyip.akamai.com</span><br><span class=\"line\">curl ipecho.net/plain</span><br><span class=\"line\">curl icanhazip.com</span><br></pre></td></tr></table></figure>\n<p><strong>第二种方式</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -s  http://ip.taobao.com/service/getIpInfo2.php?ip=myip | awk -F<span class=\"string\">&quot;ip&quot;</span> <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F<span class=\"string\">&#x27;&quot;&#x27;</span> <span class=\"string\">&#x27;&#123;print $3&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl -s ifcfg.cn/<span class=\"built_in\">echo</span> | python -m json.tool</span><br></pre></td></tr></table></figure>"},{"title":"docker 搭建 shadowsocks 服务器","date":"2019-11-20T03:58:10.000Z","author":"Mayer Shi","_content":"搭建科学上网工具，想必通过Docker 部署的方式是最高效和简单的。本篇文章则是介绍如何通过docker 搭建 shadowsock 科学上网服务。\n<!--more-->\n\n1. 安装docker命令行工具\n```bash\nsudo apt-get remove docker docker-engine docker.io\n\nsudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\nsudo add-apt-repository \\\n   \"deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\nsudo apt-get update\nsudo apt-get install docker-ce\n```\n\n2. 执行如下命令，同时执行开放相应的防火墙\n```bash\ndocker run -d --restart unless-stopped -p 12345:12345 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 12345 -k test12345  -m aes-256-cfb\n```","source":"_posts/docker-shadowsocks-install.md","raw":"---\ntitle: docker 搭建 shadowsocks 服务器\ndate: 2019-11-20 11:58:10\nauthor: \"Mayer Shi\"\ntags: [\"tools\"]\ncategories: [\"Ops\"]\n---\n搭建科学上网工具，想必通过Docker 部署的方式是最高效和简单的。本篇文章则是介绍如何通过docker 搭建 shadowsock 科学上网服务。\n<!--more-->\n\n1. 安装docker命令行工具\n```bash\nsudo apt-get remove docker docker-engine docker.io\n\nsudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\nsudo add-apt-repository \\\n   \"deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\nsudo apt-get update\nsudo apt-get install docker-ce\n```\n\n2. 执行如下命令，同时执行开放相应的防火墙\n```bash\ndocker run -d --restart unless-stopped -p 12345:12345 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 12345 -k test12345  -m aes-256-cfb\n```","slug":"docker-shadowsocks-install","published":1,"updated":"2019-11-20T03:58:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoeh000924lveuzc5p8b","content":"<p>搭建科学上网工具，想必通过Docker 部署的方式是最高效和简单的。本篇文章则是介绍如何通过docker 搭建 shadowsock 科学上网服务。</p>\n<a id=\"more\"></a>\n<ol>\n<li>安装docker命令行工具</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove docker docker-engine docker.io</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common</span><br><span class=\"line\"></span><br><span class=\"line\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\"></span><br><span class=\"line\">sudo add-apt-repository \\</span><br><span class=\"line\">   <span class=\"string\">&quot;deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">   <span class=\"subst\">$(lsb_release -cs)</span> \\</span></span><br><span class=\"line\"><span class=\"string\">   stable&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>执行如下命令，同时执行开放相应的防火墙</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --restart unless-stopped -p 12345:12345 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 12345 -k test12345  -m aes-256-cfb</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>搭建科学上网工具，想必通过Docker 部署的方式是最高效和简单的。本篇文章则是介绍如何通过docker 搭建 shadowsock 科学上网服务。</p>","more":"<ol>\n<li>安装docker命令行工具</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove docker docker-engine docker.io</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common</span><br><span class=\"line\"></span><br><span class=\"line\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\"></span><br><span class=\"line\">sudo add-apt-repository \\</span><br><span class=\"line\">   <span class=\"string\">&quot;deb [arch=amd64] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \\</span></span><br><span class=\"line\"><span class=\"string\">   <span class=\"subst\">$(lsb_release -cs)</span> \\</span></span><br><span class=\"line\"><span class=\"string\">   stable&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>执行如下命令，同时执行开放相应的防火墙</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --restart unless-stopped -p 12345:12345 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 12345 -k test12345  -m aes-256-cfb</span><br></pre></td></tr></table></figure>"},{"title":"搭建免费科学上网服务器v2ray","author":"Mayer Shi","date":"2020-08-06T12:25:23.000Z","draft":false,"_content":"利用gcp每个绑定信用卡会送300美元可以免费搭建一个v2ray的梯子，而且这个羊毛可以重复薅无数次。当该账号用完以后，重新注册一个新的谷歌账号，绑定原来的信用卡继续赠送300美元。\n<!--more-->\n\n\n\n## 安装步骤\n\n利用gcp每个绑定信用卡会送300美元可以免费搭建一个梯子，而且这个羊毛可以重复薅无数次。当该账号用完以后，重新注册一个新的谷歌账号，绑定原来的信用卡继续赠送300美元。\n\nGoogle Cloud Platform： https://cloud.google.com/gcp\n创建compute engine—虚拟机实例—创建实例—服务器选址（ 除非有特殊需求，区域一般选亚太-，香港、台湾速度比较快，但不是太稳定，我一般选日本。）\n然后开始搭建梯子，软件比较多，SS，SSR，Trojan；但是现在主流还是V2Ray，用233boy大的一键脚本安装会比较简单，只有2行命令\n\n```bash\nsudo -i bash <(curl -s -L https://git.io/v2ray.sh)\n```\n\n然后如果想选择WebSocket + TLS传输协议，还需要有一个域名。\n","source":"_posts/gcp-install-gfw-v2ray-server.md","raw":"---\ntitle: \"搭建免费科学上网服务器v2ray\"\nauthor: \"Mayer Shi\"\ntags: [\"tools\"]\ncategories: [\"Ops\"]\ndate: 2020-08-06 20:25:23\ndraft: false\n---\n利用gcp每个绑定信用卡会送300美元可以免费搭建一个v2ray的梯子，而且这个羊毛可以重复薅无数次。当该账号用完以后，重新注册一个新的谷歌账号，绑定原来的信用卡继续赠送300美元。\n<!--more-->\n\n\n\n## 安装步骤\n\n利用gcp每个绑定信用卡会送300美元可以免费搭建一个梯子，而且这个羊毛可以重复薅无数次。当该账号用完以后，重新注册一个新的谷歌账号，绑定原来的信用卡继续赠送300美元。\n\nGoogle Cloud Platform： https://cloud.google.com/gcp\n创建compute engine—虚拟机实例—创建实例—服务器选址（ 除非有特殊需求，区域一般选亚太-，香港、台湾速度比较快，但不是太稳定，我一般选日本。）\n然后开始搭建梯子，软件比较多，SS，SSR，Trojan；但是现在主流还是V2Ray，用233boy大的一键脚本安装会比较简单，只有2行命令\n\n```bash\nsudo -i bash <(curl -s -L https://git.io/v2ray.sh)\n```\n\n然后如果想选择WebSocket + TLS传输协议，还需要有一个域名。\n","slug":"gcp-install-gfw-v2ray-server","published":1,"updated":"2020-08-06T12:25:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoei000b24lvca1adkv4","content":"<p>利用gcp每个绑定信用卡会送300美元可以免费搭建一个v2ray的梯子，而且这个羊毛可以重复薅无数次。当该账号用完以后，重新注册一个新的谷歌账号，绑定原来的信用卡继续赠送300美元。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装步骤\"><a class=\"markdownIt-Anchor\" href=\"#安装步骤\"></a> 安装步骤</h2>\n<p>利用gcp每个绑定信用卡会送300美元可以免费搭建一个梯子，而且这个羊毛可以重复薅无数次。当该账号用完以后，重新注册一个新的谷歌账号，绑定原来的信用卡继续赠送300美元。</p>\n<p>Google Cloud Platform： <a href=\"https://cloud.google.com/gcp\">https://cloud.google.com/gcp</a><br />\n创建compute engine—虚拟机实例—创建实例—服务器选址（ 除非有特殊需求，区域一般选亚太-，香港、台湾速度比较快，但不是太稳定，我一般选日本。）<br />\n然后开始搭建梯子，软件比较多，SS，SSR，Trojan；但是现在主流还是V2Ray，用233boy大的一键脚本安装会比较简单，只有2行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>\n<p>然后如果想选择WebSocket + TLS传输协议，还需要有一个域名。</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>利用gcp每个绑定信用卡会送300美元可以免费搭建一个v2ray的梯子，而且这个羊毛可以重复薅无数次。当该账号用完以后，重新注册一个新的谷歌账号，绑定原来的信用卡继续赠送300美元。</p>","more":"<h2 id=\"安装步骤\"><a class=\"markdownIt-Anchor\" href=\"#安装步骤\"></a> 安装步骤</h2>\n<p>利用gcp每个绑定信用卡会送300美元可以免费搭建一个梯子，而且这个羊毛可以重复薅无数次。当该账号用完以后，重新注册一个新的谷歌账号，绑定原来的信用卡继续赠送300美元。</p>\n<p>Google Cloud Platform： <a href=\"https://cloud.google.com/gcp\">https://cloud.google.com/gcp</a><br />\n创建compute engine—虚拟机实例—创建实例—服务器选址（ 除非有特殊需求，区域一般选亚太-，香港、台湾速度比较快，但不是太稳定，我一般选日本。）<br />\n然后开始搭建梯子，软件比较多，SS，SSR，Trojan；但是现在主流还是V2Ray，用233boy大的一键脚本安装会比较简单，只有2行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>\n<p>然后如果想选择WebSocket + TLS传输协议，还需要有一个域名。</p>"},{"title":"docker swarm 部署 gitlab-ee 并设置https","date":"2019-12-19T03:58:10.000Z","author":"Mayer Shi","_content":"通过docker swarm 安装部署gitlab服务可以更方便的升级版本，以及高效运维。本篇主要介绍gitlab的docker swarm 安装方式。\n<!--more-->\n\n1. 初始化docker swarm 集群\n\n```bash\n $ sudo docker swarm init\n```\n\n2. 创建lvm逻辑磁盘卷，格式化并挂载/gitlab目录下\n\n```bash\n $ sudo fdisk /dev/vdb\n $ sudo pvcreate /dev/vdb1\n $ sudo vgcreate gitlab /dev/vdb1\n $ sudo lvcreate -L 199G -n gitlab gitlab\n $ sudo mkfs.xfs /dev/gitlab/gitlab\n```\n\n3. 创建gitlab数据挂载目录\n\n```bash\n $ sudo mkdir -pv /gitlab/{config,data,logs}\n```\n\n4. 开始部署gitlab-ee版本\n\n```bash\n $ sudo docker service create \\\n   --name \"git-inside-gitlab\" \\\n   --hostname git.test.cn \\\n   --network pilipa-network \\\n   --replicas 1 \\\n   --publish \"mode=host,published=2222,target=22\" \\\n   --publish \"mode=host,published=80,target=80\" \\\n   --publish \"mode=host,published=443,target=443\" \\\n   --mount type=bind,src=/gitlab/config,dst=/etc/gitlab \\\n   --mount type=bind,src=/gitlab/logs,dst=/var/log/gitlab \\\n   --mount type=bind,src=/gitlab/data,dst=/var/opt/gitlab \\\n\"gitlab/gitlab-ee:11.4.9-ee.0\"\n```\n\n5. 配置gitlab.rb\n```ruby\nexternal_url \"https://git.test.cn\"\nnginx['redirect_http_to_https'] =true\nnginx['ssl_certificate'] = \"/etc/gitlab/ssl/git.test.cn.crt\"\nnginx['ssl_certificate_key'] = \"/etc/gitlab/ssl/git.test.cn.key\"\n```\n\n6. 重新加载配置文件使其生效\n```bash\n $ sudo gitlab-ctl reconfigure\n```\n\n7. 通过阿里云的SLB代理到ECS上搭建的gitlab服务上，然后设置dns解析即可。\n\n","source":"_posts/gitlab-install-docker.md","raw":"---\ntitle: docker swarm 部署 gitlab-ee 并设置https\ndate: 2019-12-19 11:58:10\nauthor: \"Mayer Shi\"\ntags: [\"gitlab\"]\ncategories: [\"Ops\"]\n---\n通过docker swarm 安装部署gitlab服务可以更方便的升级版本，以及高效运维。本篇主要介绍gitlab的docker swarm 安装方式。\n<!--more-->\n\n1. 初始化docker swarm 集群\n\n```bash\n $ sudo docker swarm init\n```\n\n2. 创建lvm逻辑磁盘卷，格式化并挂载/gitlab目录下\n\n```bash\n $ sudo fdisk /dev/vdb\n $ sudo pvcreate /dev/vdb1\n $ sudo vgcreate gitlab /dev/vdb1\n $ sudo lvcreate -L 199G -n gitlab gitlab\n $ sudo mkfs.xfs /dev/gitlab/gitlab\n```\n\n3. 创建gitlab数据挂载目录\n\n```bash\n $ sudo mkdir -pv /gitlab/{config,data,logs}\n```\n\n4. 开始部署gitlab-ee版本\n\n```bash\n $ sudo docker service create \\\n   --name \"git-inside-gitlab\" \\\n   --hostname git.test.cn \\\n   --network pilipa-network \\\n   --replicas 1 \\\n   --publish \"mode=host,published=2222,target=22\" \\\n   --publish \"mode=host,published=80,target=80\" \\\n   --publish \"mode=host,published=443,target=443\" \\\n   --mount type=bind,src=/gitlab/config,dst=/etc/gitlab \\\n   --mount type=bind,src=/gitlab/logs,dst=/var/log/gitlab \\\n   --mount type=bind,src=/gitlab/data,dst=/var/opt/gitlab \\\n\"gitlab/gitlab-ee:11.4.9-ee.0\"\n```\n\n5. 配置gitlab.rb\n```ruby\nexternal_url \"https://git.test.cn\"\nnginx['redirect_http_to_https'] =true\nnginx['ssl_certificate'] = \"/etc/gitlab/ssl/git.test.cn.crt\"\nnginx['ssl_certificate_key'] = \"/etc/gitlab/ssl/git.test.cn.key\"\n```\n\n6. 重新加载配置文件使其生效\n```bash\n $ sudo gitlab-ctl reconfigure\n```\n\n7. 通过阿里云的SLB代理到ECS上搭建的gitlab服务上，然后设置dns解析即可。\n\n","slug":"gitlab-install-docker","published":1,"updated":"2019-12-19T03:58:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoek000f24lvd26egbw3","content":"<p>通过docker swarm 安装部署gitlab服务可以更方便的升级版本，以及高效运维。本篇主要介绍gitlab的docker swarm 安装方式。</p>\n<a id=\"more\"></a>\n<ol>\n<li>初始化docker swarm 集群</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker swarm init</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>创建lvm逻辑磁盘卷，格式化并挂载/gitlab目录下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo fdisk /dev/vdb</span><br><span class=\"line\">$ sudo pvcreate /dev/vdb1</span><br><span class=\"line\">$ sudo vgcreate gitlab /dev/vdb1</span><br><span class=\"line\">$ sudo lvcreate -L 199G -n gitlab gitlab</span><br><span class=\"line\">$ sudo mkfs.xfs /dev/gitlab/gitlab</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>创建gitlab数据挂载目录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -pv /gitlab/&#123;config,data,logs&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>开始部署gitlab-ee版本</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> $ sudo docker service create \\</span><br><span class=\"line\">   --name <span class=\"string\">&quot;git-inside-gitlab&quot;</span> \\</span><br><span class=\"line\">   --hostname git.test.cn \\</span><br><span class=\"line\">   --network pilipa-network \\</span><br><span class=\"line\">   --replicas 1 \\</span><br><span class=\"line\">   --publish <span class=\"string\">&quot;mode=host,published=2222,target=22&quot;</span> \\</span><br><span class=\"line\">   --publish <span class=\"string\">&quot;mode=host,published=80,target=80&quot;</span> \\</span><br><span class=\"line\">   --publish <span class=\"string\">&quot;mode=host,published=443,target=443&quot;</span> \\</span><br><span class=\"line\">   --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,src=/gitlab/config,dst=/etc/gitlab \\</span><br><span class=\"line\">   --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,src=/gitlab/logs,dst=/var/<span class=\"built_in\">log</span>/gitlab \\</span><br><span class=\"line\">   --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,src=/gitlab/data,dst=/var/opt/gitlab \\</span><br><span class=\"line\"><span class=\"string\">&quot;gitlab/gitlab-ee:11.4.9-ee.0&quot;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>配置gitlab.rb</li>\n</ol>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">external_url <span class=\"string\">&quot;https://git.test.cn&quot;</span></span><br><span class=\"line\">nginx[<span class=\"string\">&#x27;redirect_http_to_https&#x27;</span>] =<span class=\"literal\">true</span></span><br><span class=\"line\">nginx[<span class=\"string\">&#x27;ssl_certificate&#x27;</span>] = <span class=\"string\">&quot;/etc/gitlab/ssl/git.test.cn.crt&quot;</span></span><br><span class=\"line\">nginx[<span class=\"string\">&#x27;ssl_certificate_key&#x27;</span>] = <span class=\"string\">&quot;/etc/gitlab/ssl/git.test.cn.key&quot;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>重新加载配置文件使其生效</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>通过阿里云的SLB代理到ECS上搭建的gitlab服务上，然后设置dns解析即可。</li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>通过docker swarm 安装部署gitlab服务可以更方便的升级版本，以及高效运维。本篇主要介绍gitlab的docker swarm 安装方式。</p>","more":"<ol>\n<li>初始化docker swarm 集群</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker swarm init</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>创建lvm逻辑磁盘卷，格式化并挂载/gitlab目录下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo fdisk /dev/vdb</span><br><span class=\"line\">$ sudo pvcreate /dev/vdb1</span><br><span class=\"line\">$ sudo vgcreate gitlab /dev/vdb1</span><br><span class=\"line\">$ sudo lvcreate -L 199G -n gitlab gitlab</span><br><span class=\"line\">$ sudo mkfs.xfs /dev/gitlab/gitlab</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>创建gitlab数据挂载目录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo mkdir -pv /gitlab/&#123;config,data,logs&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>开始部署gitlab-ee版本</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> $ sudo docker service create \\</span><br><span class=\"line\">   --name <span class=\"string\">&quot;git-inside-gitlab&quot;</span> \\</span><br><span class=\"line\">   --hostname git.test.cn \\</span><br><span class=\"line\">   --network pilipa-network \\</span><br><span class=\"line\">   --replicas 1 \\</span><br><span class=\"line\">   --publish <span class=\"string\">&quot;mode=host,published=2222,target=22&quot;</span> \\</span><br><span class=\"line\">   --publish <span class=\"string\">&quot;mode=host,published=80,target=80&quot;</span> \\</span><br><span class=\"line\">   --publish <span class=\"string\">&quot;mode=host,published=443,target=443&quot;</span> \\</span><br><span class=\"line\">   --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,src=/gitlab/config,dst=/etc/gitlab \\</span><br><span class=\"line\">   --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,src=/gitlab/logs,dst=/var/<span class=\"built_in\">log</span>/gitlab \\</span><br><span class=\"line\">   --mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,src=/gitlab/data,dst=/var/opt/gitlab \\</span><br><span class=\"line\"><span class=\"string\">&quot;gitlab/gitlab-ee:11.4.9-ee.0&quot;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>配置gitlab.rb</li>\n</ol>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">external_url <span class=\"string\">&quot;https://git.test.cn&quot;</span></span><br><span class=\"line\">nginx[<span class=\"string\">&#x27;redirect_http_to_https&#x27;</span>] =<span class=\"literal\">true</span></span><br><span class=\"line\">nginx[<span class=\"string\">&#x27;ssl_certificate&#x27;</span>] = <span class=\"string\">&quot;/etc/gitlab/ssl/git.test.cn.crt&quot;</span></span><br><span class=\"line\">nginx[<span class=\"string\">&#x27;ssl_certificate_key&#x27;</span>] = <span class=\"string\">&quot;/etc/gitlab/ssl/git.test.cn.key&quot;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>重新加载配置文件使其生效</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>通过阿里云的SLB代理到ECS上搭建的gitlab服务上，然后设置dns解析即可。</li>\n</ol>"},{"title":"gitlab 服务器参数优化","author":"Mayer Shi","date":"2019-05-18T19:09:58.000Z","draft":true,"_content":"\n很多企业在生产实践中采用 spring cloud 框架做开发以及 k8s 做部署的方案，但是在实践中也遇到测试环境容器的私有 IP 无法被调用本地应用调用的问题。\n\n<!--more-->\n\n### 问题背景\n\n我们公司的研发分为天津和北京两个开发团队共同开发一个整体应用，负责不同功能组件的开发。同时开发环境也是部署在 k8s 上的，所以服务暴露给开发调用的方式并不是很多。比如： 采用 loadbalancer，ingress 等方案，但是这种不够灵活，同时也无法解决服务注册和发现的问题。\n\n### 出现问题\n\n1. 生产环境某个应用系统部分服务组件容器出现的不断重启现象。\n2. gitlab web 服务正常，但是 git shell 推送时常卡慢甚至无法推送代码。\n3. jenkins 测试环境也是大面积的构建任务失败。\n4. gitlab 容器内存占用居高不下。\n\n### 故障原因\n\n1. 生产环境出问题的应用系统进过排查后，得出的原因在于应用采用的是 spring cloud 框架，而应用的配置下发拉取采用的是 spring cloud 框架的 config server 组件。应用最终的配置文件是存储在 gitlab 中。由于应用在配置的时候没有关闭应用运行后继续拉取配置的选项。应用定期会自动从 config server 拉取配置，但是 config server 从 gitlab 的 repo 同步配置的时候失败了，运行的应用也就无法拉取到相应的配置，最终导致应用无法正常启动应用且 pod 不断重启的原因。\n   题外话： 用 gitlab 做 config server 配置文件的管理的管理在社区还是饱受争议的。另外我们也在调研通过 k8s configmap 作为配置文件管理的方案。\n\n2. 我们的日常测试环境的构建频率相当频发，所以拉取代码也会很频繁，但是构建任务大规模失败的原因在于，每次发布新版本的时候，我们会通过 helm 进行版本管理，charts 的变更会被推送到 gitlab 中。基本上是推送 charts 变更的时候出的问题。\n\n3. 代码无法推送等以上各种现象其实本质上都是 gitlab 出了问题。同时我们也发现 gitlab 容器消耗内存也是特别的高。\n\n### 调优方式\n\n按照官方文档说明上的介绍，当前 gitlab 能承载的能力最起码也得有一两千人的规模，事实是一百多人的规模就出现 gitlab 各种卡顿的问题。因此我们对 gitlab 的配置参数进行优化。\n![](/media/posts/media/gitlab.png)\n\n1.增加进程数和超时时间\n\n```bash\n# 超时时间默认值60s\nunicorn['worker_timeout'] = 60\n# 不能低于2，否则卡死，官方推荐 worker=CPU核数+1，CPU是4C。\nunicorn['worker_processes'] = 5\n```\n\n2.GitLab 默认使用了 PostgreSQL，优化 PostgreSQL\n\n```bash\n# 减少数据库缓存大小 默认256，可适当改小\npostgresql['shared_buffers'] = \"256MB\"\n\n# 减少数据库并发数\npostgresql['max_worker_processes'] = 8\n\n# 减少sidekiq并发数\nsidekiq['concurrency'] = 10\n```\n\n3.减少 unicorn 内存使用\n\n```bash\n# 减少内存\nunicorn['worker_memory_limit_min'] = \"200 * 1 << 20\"\nunicorn['worker_memory_limit_max'] = \"300 * 1 << 20\"\n```\n\n4.重新加载配置以及重启服务生效配置\n\n```bash\n# 重新加载配置\ngitlab-ctl reconfigure\n\n# 重启所有组件生效配置\ngitlab-ctl restart\n```\n\n总结： 经过以上的参数配置的调优以及重启生效后，的确解决了生产环境以及 gitlab 的各种问题。\n","source":"_posts/gitlab-ops.md","raw":"---\ntitle: \"gitlab 服务器参数优化\"\nauthor: \"Mayer Shi\"\ntags: [\"gitlab\"]\ncategories: [\"Ops\"]\ndate: 2019-05-19T11:09:58+08:00\ndraft: true\n---\n\n很多企业在生产实践中采用 spring cloud 框架做开发以及 k8s 做部署的方案，但是在实践中也遇到测试环境容器的私有 IP 无法被调用本地应用调用的问题。\n\n<!--more-->\n\n### 问题背景\n\n我们公司的研发分为天津和北京两个开发团队共同开发一个整体应用，负责不同功能组件的开发。同时开发环境也是部署在 k8s 上的，所以服务暴露给开发调用的方式并不是很多。比如： 采用 loadbalancer，ingress 等方案，但是这种不够灵活，同时也无法解决服务注册和发现的问题。\n\n### 出现问题\n\n1. 生产环境某个应用系统部分服务组件容器出现的不断重启现象。\n2. gitlab web 服务正常，但是 git shell 推送时常卡慢甚至无法推送代码。\n3. jenkins 测试环境也是大面积的构建任务失败。\n4. gitlab 容器内存占用居高不下。\n\n### 故障原因\n\n1. 生产环境出问题的应用系统进过排查后，得出的原因在于应用采用的是 spring cloud 框架，而应用的配置下发拉取采用的是 spring cloud 框架的 config server 组件。应用最终的配置文件是存储在 gitlab 中。由于应用在配置的时候没有关闭应用运行后继续拉取配置的选项。应用定期会自动从 config server 拉取配置，但是 config server 从 gitlab 的 repo 同步配置的时候失败了，运行的应用也就无法拉取到相应的配置，最终导致应用无法正常启动应用且 pod 不断重启的原因。\n   题外话： 用 gitlab 做 config server 配置文件的管理的管理在社区还是饱受争议的。另外我们也在调研通过 k8s configmap 作为配置文件管理的方案。\n\n2. 我们的日常测试环境的构建频率相当频发，所以拉取代码也会很频繁，但是构建任务大规模失败的原因在于，每次发布新版本的时候，我们会通过 helm 进行版本管理，charts 的变更会被推送到 gitlab 中。基本上是推送 charts 变更的时候出的问题。\n\n3. 代码无法推送等以上各种现象其实本质上都是 gitlab 出了问题。同时我们也发现 gitlab 容器消耗内存也是特别的高。\n\n### 调优方式\n\n按照官方文档说明上的介绍，当前 gitlab 能承载的能力最起码也得有一两千人的规模，事实是一百多人的规模就出现 gitlab 各种卡顿的问题。因此我们对 gitlab 的配置参数进行优化。\n![](/media/posts/media/gitlab.png)\n\n1.增加进程数和超时时间\n\n```bash\n# 超时时间默认值60s\nunicorn['worker_timeout'] = 60\n# 不能低于2，否则卡死，官方推荐 worker=CPU核数+1，CPU是4C。\nunicorn['worker_processes'] = 5\n```\n\n2.GitLab 默认使用了 PostgreSQL，优化 PostgreSQL\n\n```bash\n# 减少数据库缓存大小 默认256，可适当改小\npostgresql['shared_buffers'] = \"256MB\"\n\n# 减少数据库并发数\npostgresql['max_worker_processes'] = 8\n\n# 减少sidekiq并发数\nsidekiq['concurrency'] = 10\n```\n\n3.减少 unicorn 内存使用\n\n```bash\n# 减少内存\nunicorn['worker_memory_limit_min'] = \"200 * 1 << 20\"\nunicorn['worker_memory_limit_max'] = \"300 * 1 << 20\"\n```\n\n4.重新加载配置以及重启服务生效配置\n\n```bash\n# 重新加载配置\ngitlab-ctl reconfigure\n\n# 重启所有组件生效配置\ngitlab-ctl restart\n```\n\n总结： 经过以上的参数配置的调优以及重启生效后，的确解决了生产环境以及 gitlab 的各种问题。\n","slug":"gitlab-ops","published":1,"updated":"2019-05-18T19:09:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoel000g24lv85tc6r1q","content":"<p>很多企业在生产实践中采用 spring cloud 框架做开发以及 k8s 做部署的方案，但是在实践中也遇到测试环境容器的私有 IP 无法被调用本地应用调用的问题。</p>\n<a id=\"more\"></a>\n<h3 id=\"问题背景\"><a class=\"markdownIt-Anchor\" href=\"#问题背景\"></a> 问题背景</h3>\n<p>我们公司的研发分为天津和北京两个开发团队共同开发一个整体应用，负责不同功能组件的开发。同时开发环境也是部署在 k8s 上的，所以服务暴露给开发调用的方式并不是很多。比如： 采用 loadbalancer，ingress 等方案，但是这种不够灵活，同时也无法解决服务注册和发现的问题。</p>\n<h3 id=\"出现问题\"><a class=\"markdownIt-Anchor\" href=\"#出现问题\"></a> 出现问题</h3>\n<ol>\n<li>生产环境某个应用系统部分服务组件容器出现的不断重启现象。</li>\n<li>gitlab web 服务正常，但是 git shell 推送时常卡慢甚至无法推送代码。</li>\n<li>jenkins 测试环境也是大面积的构建任务失败。</li>\n<li>gitlab 容器内存占用居高不下。</li>\n</ol>\n<h3 id=\"故障原因\"><a class=\"markdownIt-Anchor\" href=\"#故障原因\"></a> 故障原因</h3>\n<ol>\n<li>\n<p>生产环境出问题的应用系统进过排查后，得出的原因在于应用采用的是 spring cloud 框架，而应用的配置下发拉取采用的是 spring cloud 框架的 config server 组件。应用最终的配置文件是存储在 gitlab 中。由于应用在配置的时候没有关闭应用运行后继续拉取配置的选项。应用定期会自动从 config server 拉取配置，但是 config server 从 gitlab 的 repo 同步配置的时候失败了，运行的应用也就无法拉取到相应的配置，最终导致应用无法正常启动应用且 pod 不断重启的原因。<br />\n题外话： 用 gitlab 做 config server 配置文件的管理的管理在社区还是饱受争议的。另外我们也在调研通过 k8s configmap 作为配置文件管理的方案。</p>\n</li>\n<li>\n<p>我们的日常测试环境的构建频率相当频发，所以拉取代码也会很频繁，但是构建任务大规模失败的原因在于，每次发布新版本的时候，我们会通过 helm 进行版本管理，charts 的变更会被推送到 gitlab 中。基本上是推送 charts 变更的时候出的问题。</p>\n</li>\n<li>\n<p>代码无法推送等以上各种现象其实本质上都是 gitlab 出了问题。同时我们也发现 gitlab 容器消耗内存也是特别的高。</p>\n</li>\n</ol>\n<h3 id=\"调优方式\"><a class=\"markdownIt-Anchor\" href=\"#调优方式\"></a> 调优方式</h3>\n<p>按照官方文档说明上的介绍，当前 gitlab 能承载的能力最起码也得有一两千人的规模，事实是一百多人的规模就出现 gitlab 各种卡顿的问题。因此我们对 gitlab 的配置参数进行优化。<br />\n<img src=\"/media/posts/media/gitlab.png\" alt=\"\" /></p>\n<p>1.增加进程数和超时时间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 超时时间默认值60s</span></span><br><span class=\"line\">unicorn[<span class=\"string\">&#x27;worker_timeout&#x27;</span>] = 60</span><br><span class=\"line\"><span class=\"comment\"># 不能低于2，否则卡死，官方推荐 worker=CPU核数+1，CPU是4C。</span></span><br><span class=\"line\">unicorn[<span class=\"string\">&#x27;worker_processes&#x27;</span>] = 5</span><br></pre></td></tr></table></figure>\n<p>2.GitLab 默认使用了 PostgreSQL，优化 PostgreSQL</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 减少数据库缓存大小 默认256，可适当改小</span></span><br><span class=\"line\">postgresql[<span class=\"string\">&#x27;shared_buffers&#x27;</span>] = <span class=\"string\">&quot;256MB&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 减少数据库并发数</span></span><br><span class=\"line\">postgresql[<span class=\"string\">&#x27;max_worker_processes&#x27;</span>] = 8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 减少sidekiq并发数</span></span><br><span class=\"line\">sidekiq[<span class=\"string\">&#x27;concurrency&#x27;</span>] = 10</span><br></pre></td></tr></table></figure>\n<p>3.减少 unicorn 内存使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 减少内存</span></span><br><span class=\"line\">unicorn[<span class=\"string\">&#x27;worker_memory_limit_min&#x27;</span>] = <span class=\"string\">&quot;200 * 1 &lt;&lt; 20&quot;</span></span><br><span class=\"line\">unicorn[<span class=\"string\">&#x27;worker_memory_limit_max&#x27;</span>] = <span class=\"string\">&quot;300 * 1 &lt;&lt; 20&quot;</span></span><br></pre></td></tr></table></figure>\n<p>4.重新加载配置以及重启服务生效配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新加载配置</span></span><br><span class=\"line\">gitlab-ctl reconfigure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启所有组件生效配置</span></span><br><span class=\"line\">gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n<p>总结： 经过以上的参数配置的调优以及重启生效后，的确解决了生产环境以及 gitlab 的各种问题。</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>很多企业在生产实践中采用 spring cloud 框架做开发以及 k8s 做部署的方案，但是在实践中也遇到测试环境容器的私有 IP 无法被调用本地应用调用的问题。</p>","more":"<h3 id=\"问题背景\"><a class=\"markdownIt-Anchor\" href=\"#问题背景\"></a> 问题背景</h3>\n<p>我们公司的研发分为天津和北京两个开发团队共同开发一个整体应用，负责不同功能组件的开发。同时开发环境也是部署在 k8s 上的，所以服务暴露给开发调用的方式并不是很多。比如： 采用 loadbalancer，ingress 等方案，但是这种不够灵活，同时也无法解决服务注册和发现的问题。</p>\n<h3 id=\"出现问题\"><a class=\"markdownIt-Anchor\" href=\"#出现问题\"></a> 出现问题</h3>\n<ol>\n<li>生产环境某个应用系统部分服务组件容器出现的不断重启现象。</li>\n<li>gitlab web 服务正常，但是 git shell 推送时常卡慢甚至无法推送代码。</li>\n<li>jenkins 测试环境也是大面积的构建任务失败。</li>\n<li>gitlab 容器内存占用居高不下。</li>\n</ol>\n<h3 id=\"故障原因\"><a class=\"markdownIt-Anchor\" href=\"#故障原因\"></a> 故障原因</h3>\n<ol>\n<li>\n<p>生产环境出问题的应用系统进过排查后，得出的原因在于应用采用的是 spring cloud 框架，而应用的配置下发拉取采用的是 spring cloud 框架的 config server 组件。应用最终的配置文件是存储在 gitlab 中。由于应用在配置的时候没有关闭应用运行后继续拉取配置的选项。应用定期会自动从 config server 拉取配置，但是 config server 从 gitlab 的 repo 同步配置的时候失败了，运行的应用也就无法拉取到相应的配置，最终导致应用无法正常启动应用且 pod 不断重启的原因。<br />\n题外话： 用 gitlab 做 config server 配置文件的管理的管理在社区还是饱受争议的。另外我们也在调研通过 k8s configmap 作为配置文件管理的方案。</p>\n</li>\n<li>\n<p>我们的日常测试环境的构建频率相当频发，所以拉取代码也会很频繁，但是构建任务大规模失败的原因在于，每次发布新版本的时候，我们会通过 helm 进行版本管理，charts 的变更会被推送到 gitlab 中。基本上是推送 charts 变更的时候出的问题。</p>\n</li>\n<li>\n<p>代码无法推送等以上各种现象其实本质上都是 gitlab 出了问题。同时我们也发现 gitlab 容器消耗内存也是特别的高。</p>\n</li>\n</ol>\n<h3 id=\"调优方式\"><a class=\"markdownIt-Anchor\" href=\"#调优方式\"></a> 调优方式</h3>\n<p>按照官方文档说明上的介绍，当前 gitlab 能承载的能力最起码也得有一两千人的规模，事实是一百多人的规模就出现 gitlab 各种卡顿的问题。因此我们对 gitlab 的配置参数进行优化。<br />\n<img src=\"/media/posts/media/gitlab.png\" alt=\"\" /></p>\n<p>1.增加进程数和超时时间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 超时时间默认值60s</span></span><br><span class=\"line\">unicorn[<span class=\"string\">&#x27;worker_timeout&#x27;</span>] = 60</span><br><span class=\"line\"><span class=\"comment\"># 不能低于2，否则卡死，官方推荐 worker=CPU核数+1，CPU是4C。</span></span><br><span class=\"line\">unicorn[<span class=\"string\">&#x27;worker_processes&#x27;</span>] = 5</span><br></pre></td></tr></table></figure>\n<p>2.GitLab 默认使用了 PostgreSQL，优化 PostgreSQL</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 减少数据库缓存大小 默认256，可适当改小</span></span><br><span class=\"line\">postgresql[<span class=\"string\">&#x27;shared_buffers&#x27;</span>] = <span class=\"string\">&quot;256MB&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 减少数据库并发数</span></span><br><span class=\"line\">postgresql[<span class=\"string\">&#x27;max_worker_processes&#x27;</span>] = 8</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 减少sidekiq并发数</span></span><br><span class=\"line\">sidekiq[<span class=\"string\">&#x27;concurrency&#x27;</span>] = 10</span><br></pre></td></tr></table></figure>\n<p>3.减少 unicorn 内存使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 减少内存</span></span><br><span class=\"line\">unicorn[<span class=\"string\">&#x27;worker_memory_limit_min&#x27;</span>] = <span class=\"string\">&quot;200 * 1 &lt;&lt; 20&quot;</span></span><br><span class=\"line\">unicorn[<span class=\"string\">&#x27;worker_memory_limit_max&#x27;</span>] = <span class=\"string\">&quot;300 * 1 &lt;&lt; 20&quot;</span></span><br></pre></td></tr></table></figure>\n<p>4.重新加载配置以及重启服务生效配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新加载配置</span></span><br><span class=\"line\">gitlab-ctl reconfigure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启所有组件生效配置</span></span><br><span class=\"line\">gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n<p>总结： 经过以上的参数配置的调优以及重启生效后，的确解决了生产环境以及 gitlab 的各种问题。</p>"},{"title":"GitOps 云原生持续交付方式","date":"2019-12-24T10:35:58.000Z","author":"Mayer Shi","_content":"\n大家比较熟知DevOps、AiOps概念，也听说过GitOps。但是GitOps究竟是个什么东西，可能不是太了解。所以本篇文章主要介绍GitOps的一些基础知识以及核心思想。\n\n<!--more-->\n\n## 什么是GitOps ？\n\nGitOps是一种进行Kubernetes集群管理和应用交付的方式。它通过将Git用作声明性基础结构和应用程序的单一事实来源来工作。将Git作为交付流水线的核心，每个开发人员都可以提交拉取请求（Pull Request）并使用Gi​​t来加速和简化Kubernetes的应用程序部署和运维任务。通过使用像Git这样的简单工具，开发人员可以更高效地将注意力集中在业务开发而不是运维相关任务上。\n\n\n## GitOps的主要优势\n当使用Git提交基础架构代码更改时，自动化的交付流水线会将这些更改应用到应用程序的实际基础架构上。但是GitOps的想法远不止于此——它还会使用工具将整个应用程序的实际生产状态与基础架构源代码进行比较，然后它会告诉集群哪些基础架构源代码与实际环境不匹配。\n\n通过应用GitOps最佳实践，应用系统的基础架构和应用程序代码都有“真实来源”——其实是将基础架构和应用程序代码都存放在gitlab、或者github等版本控制系统上。这使开发团队可以提高开发和部署速度并提高应用系统可靠性。\n\n将GitOps理论方法应用在持续交付流水线上，有诸多优势和特点：\n\n- 安全的云原生CI/CD pipeline 模型\n- 更快的平均部署时间和平均恢复时间\n- 稳定且可重现的回滚（例如，根据Git恢复/回滚/ fork）\n- 与监控和可视化工具相结合，对已经部署的应用进行全方位的监控\n\n## 运用GitOps的基本前提\n\n没有单一工具可以完成流水线中所需的所有工作，因此可以为流水线的不同部分选择最佳工具。但是多工具部件组合使用，使得所有部件粘合在一起变成了创建流水线最难的一部分。不管如何选择构造自己的交付流水线，将基于Git（或者其他版本控制工具）的GitOps最佳实践应用在交付流水线中都是一个不二选择，这将使构建持续交付流水线，以及后续的推广变得更加容易，这不仅从技术角度而且从文化角度来看都是如此。同时gitOps也不是银弹，发挥它的最大作用需要一些基本前提。\n\n### 不可变基础设施\n\n在容器尚未普及的时代，很多公司运维采用各种自动化框架做自己的运维平台来使得相同应用能在测试生产等环境安全稳定运行，但是长期运行后依旧会出现同一集群中的机器的环境不一致的问题，进而引发各种故障和问题的发生。容器技术通过将应用环境与应用打包成镜像使其变成一种不可变单元，进而实现了不可变基础设施。如何高效的使用不可变基础设施资源呢，这时候k8s的诞生解决了该问题。\n\n### 声明性容器编排\n\nKubermetes作为一个云原生的工具，可以把它的“声明性”看作是“代码”，声明意味着配置由一组事实而不是一组指令组成，例如，“有十个redis服务器”，而不是“启动十个redis服务器，告诉我它是否有效”。借助Kubermetes的声明性特点，应用系统的整个配置文件集可以在Git库中进行版本控制。通过使用Git库，应用程序更容易部署到Kubernetes中，以及进行版本回滚。更重要的是，当灾难发生时，群集的基础架构可以从Git库中可靠且快速地恢复。\n\n## GitOps的基本原则\n\n以下是在云原生环境中GitOps的原则：\n>- 任何能够被描述的内容都必须存储在Git库中\n\n通过使用Git作为存储声明性基础架构和应用程序代码的存储仓库，可以方便地监控集群，以及检查比较实际环境的状态与代码库上的状态是否一致。所以，我们的目标是描述系统相关的所有内容：策略，代码，配置，甚至监控事件和版本控制等，并且将这些内容全部存储在版本库中，在通过版本库中的内容构建系统的基础架构或者应用程序的时候，如果没有成功，则可以迅速的回滚，并且重新来过。\n\n>- 不应直接使用Kubectl\n\n作为一般规则，不提倡在命令行中直接使用kubectl命令操作执行部署基础架构或应用程序到集群中。还有一些开发者使用CI工具驱动应用程序的部署，但如果这样做，可能会给生产环境带来潜在不可预测的风险。 \n\n>- 调用Kubernetes 的API的接口或者控制器应该遵循 Operator 模式\n\n调用Kubernetes 的API的接口或者控制器应该遵循 Operator 模式（什么是Operator 模式？），集群的状态和Git库中的配置文件等要保持一致，并且查看分析它们之间的状态差异。\n\n","source":"_posts/gitops-basic-concept.md","raw":"---\ntitle: GitOps 云原生持续交付方式 \ndate: 2019-12-24 18:35:58\nauthor: \"Mayer Shi\"\ntags: [\"gitops\"]\ncategories: [\"GitOps\"]\n---\n\n大家比较熟知DevOps、AiOps概念，也听说过GitOps。但是GitOps究竟是个什么东西，可能不是太了解。所以本篇文章主要介绍GitOps的一些基础知识以及核心思想。\n\n<!--more-->\n\n## 什么是GitOps ？\n\nGitOps是一种进行Kubernetes集群管理和应用交付的方式。它通过将Git用作声明性基础结构和应用程序的单一事实来源来工作。将Git作为交付流水线的核心，每个开发人员都可以提交拉取请求（Pull Request）并使用Gi​​t来加速和简化Kubernetes的应用程序部署和运维任务。通过使用像Git这样的简单工具，开发人员可以更高效地将注意力集中在业务开发而不是运维相关任务上。\n\n\n## GitOps的主要优势\n当使用Git提交基础架构代码更改时，自动化的交付流水线会将这些更改应用到应用程序的实际基础架构上。但是GitOps的想法远不止于此——它还会使用工具将整个应用程序的实际生产状态与基础架构源代码进行比较，然后它会告诉集群哪些基础架构源代码与实际环境不匹配。\n\n通过应用GitOps最佳实践，应用系统的基础架构和应用程序代码都有“真实来源”——其实是将基础架构和应用程序代码都存放在gitlab、或者github等版本控制系统上。这使开发团队可以提高开发和部署速度并提高应用系统可靠性。\n\n将GitOps理论方法应用在持续交付流水线上，有诸多优势和特点：\n\n- 安全的云原生CI/CD pipeline 模型\n- 更快的平均部署时间和平均恢复时间\n- 稳定且可重现的回滚（例如，根据Git恢复/回滚/ fork）\n- 与监控和可视化工具相结合，对已经部署的应用进行全方位的监控\n\n## 运用GitOps的基本前提\n\n没有单一工具可以完成流水线中所需的所有工作，因此可以为流水线的不同部分选择最佳工具。但是多工具部件组合使用，使得所有部件粘合在一起变成了创建流水线最难的一部分。不管如何选择构造自己的交付流水线，将基于Git（或者其他版本控制工具）的GitOps最佳实践应用在交付流水线中都是一个不二选择，这将使构建持续交付流水线，以及后续的推广变得更加容易，这不仅从技术角度而且从文化角度来看都是如此。同时gitOps也不是银弹，发挥它的最大作用需要一些基本前提。\n\n### 不可变基础设施\n\n在容器尚未普及的时代，很多公司运维采用各种自动化框架做自己的运维平台来使得相同应用能在测试生产等环境安全稳定运行，但是长期运行后依旧会出现同一集群中的机器的环境不一致的问题，进而引发各种故障和问题的发生。容器技术通过将应用环境与应用打包成镜像使其变成一种不可变单元，进而实现了不可变基础设施。如何高效的使用不可变基础设施资源呢，这时候k8s的诞生解决了该问题。\n\n### 声明性容器编排\n\nKubermetes作为一个云原生的工具，可以把它的“声明性”看作是“代码”，声明意味着配置由一组事实而不是一组指令组成，例如，“有十个redis服务器”，而不是“启动十个redis服务器，告诉我它是否有效”。借助Kubermetes的声明性特点，应用系统的整个配置文件集可以在Git库中进行版本控制。通过使用Git库，应用程序更容易部署到Kubernetes中，以及进行版本回滚。更重要的是，当灾难发生时，群集的基础架构可以从Git库中可靠且快速地恢复。\n\n## GitOps的基本原则\n\n以下是在云原生环境中GitOps的原则：\n>- 任何能够被描述的内容都必须存储在Git库中\n\n通过使用Git作为存储声明性基础架构和应用程序代码的存储仓库，可以方便地监控集群，以及检查比较实际环境的状态与代码库上的状态是否一致。所以，我们的目标是描述系统相关的所有内容：策略，代码，配置，甚至监控事件和版本控制等，并且将这些内容全部存储在版本库中，在通过版本库中的内容构建系统的基础架构或者应用程序的时候，如果没有成功，则可以迅速的回滚，并且重新来过。\n\n>- 不应直接使用Kubectl\n\n作为一般规则，不提倡在命令行中直接使用kubectl命令操作执行部署基础架构或应用程序到集群中。还有一些开发者使用CI工具驱动应用程序的部署，但如果这样做，可能会给生产环境带来潜在不可预测的风险。 \n\n>- 调用Kubernetes 的API的接口或者控制器应该遵循 Operator 模式\n\n调用Kubernetes 的API的接口或者控制器应该遵循 Operator 模式（什么是Operator 模式？），集群的状态和Git库中的配置文件等要保持一致，并且查看分析它们之间的状态差异。\n\n","slug":"gitops-basic-concept","published":1,"updated":"2019-12-24T10:35:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoem000l24lvc23lf93h","content":"<p>大家比较熟知DevOps、AiOps概念，也听说过GitOps。但是GitOps究竟是个什么东西，可能不是太了解。所以本篇文章主要介绍GitOps的一些基础知识以及核心思想。</p>\n<a id=\"more\"></a>\n<h2 id=\"什么是gitops\"><a class=\"markdownIt-Anchor\" href=\"#什么是gitops\"></a> 什么是GitOps ？</h2>\n<p>GitOps是一种进行Kubernetes集群管理和应用交付的方式。它通过将Git用作声明性基础结构和应用程序的单一事实来源来工作。将Git作为交付流水线的核心，每个开发人员都可以提交拉取请求（Pull Request）并使用Gi​​t来加速和简化Kubernetes的应用程序部署和运维任务。通过使用像Git这样的简单工具，开发人员可以更高效地将注意力集中在业务开发而不是运维相关任务上。</p>\n<h2 id=\"gitops的主要优势\"><a class=\"markdownIt-Anchor\" href=\"#gitops的主要优势\"></a> GitOps的主要优势</h2>\n<p>当使用Git提交基础架构代码更改时，自动化的交付流水线会将这些更改应用到应用程序的实际基础架构上。但是GitOps的想法远不止于此——它还会使用工具将整个应用程序的实际生产状态与基础架构源代码进行比较，然后它会告诉集群哪些基础架构源代码与实际环境不匹配。</p>\n<p>通过应用GitOps最佳实践，应用系统的基础架构和应用程序代码都有“真实来源”——其实是将基础架构和应用程序代码都存放在gitlab、或者github等版本控制系统上。这使开发团队可以提高开发和部署速度并提高应用系统可靠性。</p>\n<p>将GitOps理论方法应用在持续交付流水线上，有诸多优势和特点：</p>\n<ul>\n<li>安全的云原生CI/CD pipeline 模型</li>\n<li>更快的平均部署时间和平均恢复时间</li>\n<li>稳定且可重现的回滚（例如，根据Git恢复/回滚/ fork）</li>\n<li>与监控和可视化工具相结合，对已经部署的应用进行全方位的监控</li>\n</ul>\n<h2 id=\"运用gitops的基本前提\"><a class=\"markdownIt-Anchor\" href=\"#运用gitops的基本前提\"></a> 运用GitOps的基本前提</h2>\n<p>没有单一工具可以完成流水线中所需的所有工作，因此可以为流水线的不同部分选择最佳工具。但是多工具部件组合使用，使得所有部件粘合在一起变成了创建流水线最难的一部分。不管如何选择构造自己的交付流水线，将基于Git（或者其他版本控制工具）的GitOps最佳实践应用在交付流水线中都是一个不二选择，这将使构建持续交付流水线，以及后续的推广变得更加容易，这不仅从技术角度而且从文化角度来看都是如此。同时gitOps也不是银弹，发挥它的最大作用需要一些基本前提。</p>\n<h3 id=\"不可变基础设施\"><a class=\"markdownIt-Anchor\" href=\"#不可变基础设施\"></a> 不可变基础设施</h3>\n<p>在容器尚未普及的时代，很多公司运维采用各种自动化框架做自己的运维平台来使得相同应用能在测试生产等环境安全稳定运行，但是长期运行后依旧会出现同一集群中的机器的环境不一致的问题，进而引发各种故障和问题的发生。容器技术通过将应用环境与应用打包成镜像使其变成一种不可变单元，进而实现了不可变基础设施。如何高效的使用不可变基础设施资源呢，这时候k8s的诞生解决了该问题。</p>\n<h3 id=\"声明性容器编排\"><a class=\"markdownIt-Anchor\" href=\"#声明性容器编排\"></a> 声明性容器编排</h3>\n<p>Kubermetes作为一个云原生的工具，可以把它的“声明性”看作是“代码”，声明意味着配置由一组事实而不是一组指令组成，例如，“有十个redis服务器”，而不是“启动十个redis服务器，告诉我它是否有效”。借助Kubermetes的声明性特点，应用系统的整个配置文件集可以在Git库中进行版本控制。通过使用Git库，应用程序更容易部署到Kubernetes中，以及进行版本回滚。更重要的是，当灾难发生时，群集的基础架构可以从Git库中可靠且快速地恢复。</p>\n<h2 id=\"gitops的基本原则\"><a class=\"markdownIt-Anchor\" href=\"#gitops的基本原则\"></a> GitOps的基本原则</h2>\n<p>以下是在云原生环境中GitOps的原则：</p>\n<blockquote>\n<ul>\n<li>任何能够被描述的内容都必须存储在Git库中</li>\n</ul>\n</blockquote>\n<p>通过使用Git作为存储声明性基础架构和应用程序代码的存储仓库，可以方便地监控集群，以及检查比较实际环境的状态与代码库上的状态是否一致。所以，我们的目标是描述系统相关的所有内容：策略，代码，配置，甚至监控事件和版本控制等，并且将这些内容全部存储在版本库中，在通过版本库中的内容构建系统的基础架构或者应用程序的时候，如果没有成功，则可以迅速的回滚，并且重新来过。</p>\n<blockquote>\n<ul>\n<li>不应直接使用Kubectl</li>\n</ul>\n</blockquote>\n<p>作为一般规则，不提倡在命令行中直接使用kubectl命令操作执行部署基础架构或应用程序到集群中。还有一些开发者使用CI工具驱动应用程序的部署，但如果这样做，可能会给生产环境带来潜在不可预测的风险。</p>\n<blockquote>\n<ul>\n<li>调用Kubernetes 的API的接口或者控制器应该遵循 Operator 模式</li>\n</ul>\n</blockquote>\n<p>调用Kubernetes 的API的接口或者控制器应该遵循 Operator 模式（什么是Operator 模式？），集群的状态和Git库中的配置文件等要保持一致，并且查看分析它们之间的状态差异。</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>大家比较熟知DevOps、AiOps概念，也听说过GitOps。但是GitOps究竟是个什么东西，可能不是太了解。所以本篇文章主要介绍GitOps的一些基础知识以及核心思想。</p>","more":"<h2 id=\"什么是gitops\"><a class=\"markdownIt-Anchor\" href=\"#什么是gitops\"></a> 什么是GitOps ？</h2>\n<p>GitOps是一种进行Kubernetes集群管理和应用交付的方式。它通过将Git用作声明性基础结构和应用程序的单一事实来源来工作。将Git作为交付流水线的核心，每个开发人员都可以提交拉取请求（Pull Request）并使用Gi​​t来加速和简化Kubernetes的应用程序部署和运维任务。通过使用像Git这样的简单工具，开发人员可以更高效地将注意力集中在业务开发而不是运维相关任务上。</p>\n<h2 id=\"gitops的主要优势\"><a class=\"markdownIt-Anchor\" href=\"#gitops的主要优势\"></a> GitOps的主要优势</h2>\n<p>当使用Git提交基础架构代码更改时，自动化的交付流水线会将这些更改应用到应用程序的实际基础架构上。但是GitOps的想法远不止于此——它还会使用工具将整个应用程序的实际生产状态与基础架构源代码进行比较，然后它会告诉集群哪些基础架构源代码与实际环境不匹配。</p>\n<p>通过应用GitOps最佳实践，应用系统的基础架构和应用程序代码都有“真实来源”——其实是将基础架构和应用程序代码都存放在gitlab、或者github等版本控制系统上。这使开发团队可以提高开发和部署速度并提高应用系统可靠性。</p>\n<p>将GitOps理论方法应用在持续交付流水线上，有诸多优势和特点：</p>\n<ul>\n<li>安全的云原生CI/CD pipeline 模型</li>\n<li>更快的平均部署时间和平均恢复时间</li>\n<li>稳定且可重现的回滚（例如，根据Git恢复/回滚/ fork）</li>\n<li>与监控和可视化工具相结合，对已经部署的应用进行全方位的监控</li>\n</ul>\n<h2 id=\"运用gitops的基本前提\"><a class=\"markdownIt-Anchor\" href=\"#运用gitops的基本前提\"></a> 运用GitOps的基本前提</h2>\n<p>没有单一工具可以完成流水线中所需的所有工作，因此可以为流水线的不同部分选择最佳工具。但是多工具部件组合使用，使得所有部件粘合在一起变成了创建流水线最难的一部分。不管如何选择构造自己的交付流水线，将基于Git（或者其他版本控制工具）的GitOps最佳实践应用在交付流水线中都是一个不二选择，这将使构建持续交付流水线，以及后续的推广变得更加容易，这不仅从技术角度而且从文化角度来看都是如此。同时gitOps也不是银弹，发挥它的最大作用需要一些基本前提。</p>\n<h3 id=\"不可变基础设施\"><a class=\"markdownIt-Anchor\" href=\"#不可变基础设施\"></a> 不可变基础设施</h3>\n<p>在容器尚未普及的时代，很多公司运维采用各种自动化框架做自己的运维平台来使得相同应用能在测试生产等环境安全稳定运行，但是长期运行后依旧会出现同一集群中的机器的环境不一致的问题，进而引发各种故障和问题的发生。容器技术通过将应用环境与应用打包成镜像使其变成一种不可变单元，进而实现了不可变基础设施。如何高效的使用不可变基础设施资源呢，这时候k8s的诞生解决了该问题。</p>\n<h3 id=\"声明性容器编排\"><a class=\"markdownIt-Anchor\" href=\"#声明性容器编排\"></a> 声明性容器编排</h3>\n<p>Kubermetes作为一个云原生的工具，可以把它的“声明性”看作是“代码”，声明意味着配置由一组事实而不是一组指令组成，例如，“有十个redis服务器”，而不是“启动十个redis服务器，告诉我它是否有效”。借助Kubermetes的声明性特点，应用系统的整个配置文件集可以在Git库中进行版本控制。通过使用Git库，应用程序更容易部署到Kubernetes中，以及进行版本回滚。更重要的是，当灾难发生时，群集的基础架构可以从Git库中可靠且快速地恢复。</p>\n<h2 id=\"gitops的基本原则\"><a class=\"markdownIt-Anchor\" href=\"#gitops的基本原则\"></a> GitOps的基本原则</h2>\n<p>以下是在云原生环境中GitOps的原则：</p>\n<blockquote>\n<ul>\n<li>任何能够被描述的内容都必须存储在Git库中</li>\n</ul>\n</blockquote>\n<p>通过使用Git作为存储声明性基础架构和应用程序代码的存储仓库，可以方便地监控集群，以及检查比较实际环境的状态与代码库上的状态是否一致。所以，我们的目标是描述系统相关的所有内容：策略，代码，配置，甚至监控事件和版本控制等，并且将这些内容全部存储在版本库中，在通过版本库中的内容构建系统的基础架构或者应用程序的时候，如果没有成功，则可以迅速的回滚，并且重新来过。</p>\n<blockquote>\n<ul>\n<li>不应直接使用Kubectl</li>\n</ul>\n</blockquote>\n<p>作为一般规则，不提倡在命令行中直接使用kubectl命令操作执行部署基础架构或应用程序到集群中。还有一些开发者使用CI工具驱动应用程序的部署，但如果这样做，可能会给生产环境带来潜在不可预测的风险。</p>\n<blockquote>\n<ul>\n<li>调用Kubernetes 的API的接口或者控制器应该遵循 Operator 模式</li>\n</ul>\n</blockquote>\n<p>调用Kubernetes 的API的接口或者控制器应该遵循 Operator 模式（什么是Operator 模式？），集群的状态和Git库中的配置文件等要保持一致，并且查看分析它们之间的状态差异。</p>"},{"title":"helm基础概念","author":"Mayer Shi","date":"2018-12-10T18:28:13.000Z","draft":false,"_content":"Kubernetes的巨大成功创造了一个工具生态系统，可以简化应用程序开发和部署的复杂性。而该系列文章主要分享helm在噼里啪技术团队的生产实践经验总结。\n<!--more-->\n**针对helm篇的实践落地方案分为如下几个部分：**\n\n> * helm 基础理论篇\n> * helm 使用技巧篇\n> * 基础中间件服务运维篇\n> * 微服务应用版本管理篇\n> * 基于jenkins + helm的CICD方案\n> * Helm 实践趟坑篇\n> * 基于Helm Istio Jenkins灰度发布实践方案\n\n\n### helm 是什么\n**[helm](https://github.com/helm/helm.git)** 是一款可以帮你在k8s上很好运维管理复杂的应用包管理工具。如果把k8s比作CentOS操作系统的话，那么helm类似CentOS系统中的yum工具。\n\n*这两个工具从某种程度来说的确很相似，yum可以解决rpm之间的依赖问题，而helm也可以解决应用与基础服务依赖关系。比如：WordPress应用启动之前需要启动MySQL，那就可以在WordPress的charts里定义需要依赖MySQL的charts。那么在部署WordPress的charts时，helm也会拉取并部署MySQL的Charts。*\n\n### helm 名称概念\n\n**Charts:** yum安装的rpm包则对应helm的charts。charts包含了整套复杂应用组件的k8s资源（Deployment、Service、Ingress、ConfigMap、Secret等）模板yaml文件以及模板对应value文件。Chart的目录结构如下：\n\n```bash\nmychart\n├── Chart.yaml\n├── charts\n├── templates\n│   ├── NOTES.txt\n│   ├── _helpers.tpl\n│   ├── deployment.yaml\n│   ├── ingress.yaml\n│   └── service.yaml\n└── values.yaml\n```\n\n* charts 目录存放依赖的 chart\n* Chart.yaml 包含 Chart 的基本信息，包括 chart 版本，名称等\n* templates 目录下存放应用一系列 k8s 资源的 yaml 模板\n* _helpers.tpl 此文件中定义一些可重用的模板片断，此文件中的定义在任何资源定义模板中可用\n* NOTES.txt 介绍 chart 部署后的帮助信息，如何使用 chart 等\n* values.yaml 包含了必要的值定义（默认值）, 用于存储 templates 目录中模板文件中用到变量的值\n\n\n\n**Release:** 扩展上述类比，要在基于CentOS的系统上安装NGNIX，您将运行yum install nginx。同样，要将NGINX安装到Kubernetes集群，您只需运行helm install nginx即可。每次向群集安装Charts都称为release。但是，与传统的操作系统软件包管理器不同，使用Helm可以轻松地将一个charts多次安装到单个集群中，每个release都有自己的特定配置。所以简单的来说一个release就是一个charts的实例化。\n\n\n```bash\nhelm ls \nistio                             \t1       \tThu Dec 13 11:50:08 2018\tDEPLOYED\tack-istio-1.0.4             \t1.0.4        \tistio-system\n```\n\n**Repositories:** Helm Charts 还可以发布到存储库。这些charts可以发布到私有仓库，也可以是公共托管。像yum和apt一样，可以搜索它们以发现可用的charts。\n\n```bash\nhelm search nginx\nNAME                       \tCHART VERSION\tAPP VERSION\tDESCRIPTION\nstable/nginx-ingress       \t1.0.0        \t0.21.0     \tAn nginx Ingress controller that uses ConfigMap to store ...\nstable/nginx-ldapauth-proxy\t0.1.2        \t1.13.5     \tnginx proxy with ldapauth\nstable/nginx-lego          \t0.3.1        \t           \tChart for nginx-ingress-controller and kube-lego\nstable/gcloud-endpoints    \t0.1.2        \t1          \tDEPRECATED Develop, deploy, protect and monitor your APIs...\n```\n\n### HELM 核心组件\n\n**helm** 是个客户端工具，它主要的作用如下：\n\n* 本地chart开发\n* 管理repositories\n* 与tiller 服务端进行交互\n   * 发送要安装的charts\n   * 获取相关release的信息\n   * 请求更新或者删除已存在的release\n   \n**tiller** 是一个部署在k8s集群内部的一个与helm客户端进行交互同时也与k8s api连接的服务。主要负责如下功能：\n\n* 监听来自helm客户端传入的请求\n* 将charts和配置组合渲染来构建一个release\n* 将charts部署到k8s集群中并跟踪后续版本\n* 通过与k8s进行交互来更新以及删除集群中存在的release。\n\n<center>![](/media/posts/media/jh.png)</center>\n简而言之，helm 客户端负责管理charts, tiller 服务端负责管理release生命周期。\n\n### helm 内部实现\n1. Helm客户端使用Go编程语言编写，并使用gRPC协议与Tiller服务器进行交互。\n2. Tiller服务端也是用Go编写的。它提供了一个与客户端连接的gRPC服务器，它使用Kubernetes客户端库与Kubernetes进行通信。目前，该库使用REST + JSON。\n3. Tiller服务器将信息存储在位于Kubernetes内的ConfigMaps中。它不需要自己的数据库。\n\n### release 管理机制\n\n![](/media/posts/media/release.png)\n\n#### 创建 release\n\n* helm 客户端从指定的目录或本地 tar 文件或远程 repo 仓库解析出 chart 的结构信息\n* helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller\n* Tiller 服务端根据 chart 和 values 生成一个 release\n* Tiller 将 install release 请求直接传递给 kube-apiserver\n\n#### 更新 release\n\n* helm 客户端将需要更新的 chart 的 release 名称 chart 结构和 value 信息传给 Tiller\n* Tiller 将收到的信息生成新的 release，并同时更新这个 release 的 history\n* Tiller 将新的 release 传递给 kube-apiserver 进行更新\n\n#### 删除 release\n\n* helm 客户端从指定的目录或本地 tar 文件或远程 repo 仓库解析出 chart 的结构信息\n* helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller\n* Tiller 服务端根据 chart 和 values 生成一个 release\n* Tiller 将 delete release 请求直接传递给 kube-apiserver","source":"_posts/helm-basic.md","raw":"---\ntitle: \"helm基础概念\"\nauthor: \"Mayer Shi\"\ntags: [\"helm\"]\ncategories: [\"Container Cloud\"]\ndate: 2018-12-11T10:28:13+08:00\ndraft: false\n---\nKubernetes的巨大成功创造了一个工具生态系统，可以简化应用程序开发和部署的复杂性。而该系列文章主要分享helm在噼里啪技术团队的生产实践经验总结。\n<!--more-->\n**针对helm篇的实践落地方案分为如下几个部分：**\n\n> * helm 基础理论篇\n> * helm 使用技巧篇\n> * 基础中间件服务运维篇\n> * 微服务应用版本管理篇\n> * 基于jenkins + helm的CICD方案\n> * Helm 实践趟坑篇\n> * 基于Helm Istio Jenkins灰度发布实践方案\n\n\n### helm 是什么\n**[helm](https://github.com/helm/helm.git)** 是一款可以帮你在k8s上很好运维管理复杂的应用包管理工具。如果把k8s比作CentOS操作系统的话，那么helm类似CentOS系统中的yum工具。\n\n*这两个工具从某种程度来说的确很相似，yum可以解决rpm之间的依赖问题，而helm也可以解决应用与基础服务依赖关系。比如：WordPress应用启动之前需要启动MySQL，那就可以在WordPress的charts里定义需要依赖MySQL的charts。那么在部署WordPress的charts时，helm也会拉取并部署MySQL的Charts。*\n\n### helm 名称概念\n\n**Charts:** yum安装的rpm包则对应helm的charts。charts包含了整套复杂应用组件的k8s资源（Deployment、Service、Ingress、ConfigMap、Secret等）模板yaml文件以及模板对应value文件。Chart的目录结构如下：\n\n```bash\nmychart\n├── Chart.yaml\n├── charts\n├── templates\n│   ├── NOTES.txt\n│   ├── _helpers.tpl\n│   ├── deployment.yaml\n│   ├── ingress.yaml\n│   └── service.yaml\n└── values.yaml\n```\n\n* charts 目录存放依赖的 chart\n* Chart.yaml 包含 Chart 的基本信息，包括 chart 版本，名称等\n* templates 目录下存放应用一系列 k8s 资源的 yaml 模板\n* _helpers.tpl 此文件中定义一些可重用的模板片断，此文件中的定义在任何资源定义模板中可用\n* NOTES.txt 介绍 chart 部署后的帮助信息，如何使用 chart 等\n* values.yaml 包含了必要的值定义（默认值）, 用于存储 templates 目录中模板文件中用到变量的值\n\n\n\n**Release:** 扩展上述类比，要在基于CentOS的系统上安装NGNIX，您将运行yum install nginx。同样，要将NGINX安装到Kubernetes集群，您只需运行helm install nginx即可。每次向群集安装Charts都称为release。但是，与传统的操作系统软件包管理器不同，使用Helm可以轻松地将一个charts多次安装到单个集群中，每个release都有自己的特定配置。所以简单的来说一个release就是一个charts的实例化。\n\n\n```bash\nhelm ls \nistio                             \t1       \tThu Dec 13 11:50:08 2018\tDEPLOYED\tack-istio-1.0.4             \t1.0.4        \tistio-system\n```\n\n**Repositories:** Helm Charts 还可以发布到存储库。这些charts可以发布到私有仓库，也可以是公共托管。像yum和apt一样，可以搜索它们以发现可用的charts。\n\n```bash\nhelm search nginx\nNAME                       \tCHART VERSION\tAPP VERSION\tDESCRIPTION\nstable/nginx-ingress       \t1.0.0        \t0.21.0     \tAn nginx Ingress controller that uses ConfigMap to store ...\nstable/nginx-ldapauth-proxy\t0.1.2        \t1.13.5     \tnginx proxy with ldapauth\nstable/nginx-lego          \t0.3.1        \t           \tChart for nginx-ingress-controller and kube-lego\nstable/gcloud-endpoints    \t0.1.2        \t1          \tDEPRECATED Develop, deploy, protect and monitor your APIs...\n```\n\n### HELM 核心组件\n\n**helm** 是个客户端工具，它主要的作用如下：\n\n* 本地chart开发\n* 管理repositories\n* 与tiller 服务端进行交互\n   * 发送要安装的charts\n   * 获取相关release的信息\n   * 请求更新或者删除已存在的release\n   \n**tiller** 是一个部署在k8s集群内部的一个与helm客户端进行交互同时也与k8s api连接的服务。主要负责如下功能：\n\n* 监听来自helm客户端传入的请求\n* 将charts和配置组合渲染来构建一个release\n* 将charts部署到k8s集群中并跟踪后续版本\n* 通过与k8s进行交互来更新以及删除集群中存在的release。\n\n<center>![](/media/posts/media/jh.png)</center>\n简而言之，helm 客户端负责管理charts, tiller 服务端负责管理release生命周期。\n\n### helm 内部实现\n1. Helm客户端使用Go编程语言编写，并使用gRPC协议与Tiller服务器进行交互。\n2. Tiller服务端也是用Go编写的。它提供了一个与客户端连接的gRPC服务器，它使用Kubernetes客户端库与Kubernetes进行通信。目前，该库使用REST + JSON。\n3. Tiller服务器将信息存储在位于Kubernetes内的ConfigMaps中。它不需要自己的数据库。\n\n### release 管理机制\n\n![](/media/posts/media/release.png)\n\n#### 创建 release\n\n* helm 客户端从指定的目录或本地 tar 文件或远程 repo 仓库解析出 chart 的结构信息\n* helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller\n* Tiller 服务端根据 chart 和 values 生成一个 release\n* Tiller 将 install release 请求直接传递给 kube-apiserver\n\n#### 更新 release\n\n* helm 客户端将需要更新的 chart 的 release 名称 chart 结构和 value 信息传给 Tiller\n* Tiller 将收到的信息生成新的 release，并同时更新这个 release 的 history\n* Tiller 将新的 release 传递给 kube-apiserver 进行更新\n\n#### 删除 release\n\n* helm 客户端从指定的目录或本地 tar 文件或远程 repo 仓库解析出 chart 的结构信息\n* helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller\n* Tiller 服务端根据 chart 和 values 生成一个 release\n* Tiller 将 delete release 请求直接传递给 kube-apiserver","slug":"helm-basic","published":1,"updated":"2018-12-10T18:28:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoen000n24lvhbrdhlp8","content":"<p>Kubernetes的巨大成功创造了一个工具生态系统，可以简化应用程序开发和部署的复杂性。而该系列文章主要分享helm在噼里啪技术团队的生产实践经验总结。</p>\n<a id=\"more\"></a>\n<p><strong>针对helm篇的实践落地方案分为如下几个部分：</strong></p>\n<blockquote>\n<ul>\n<li>helm 基础理论篇</li>\n<li>helm 使用技巧篇</li>\n<li>基础中间件服务运维篇</li>\n<li>微服务应用版本管理篇</li>\n<li>基于jenkins + helm的CICD方案</li>\n<li>Helm 实践趟坑篇</li>\n<li>基于Helm Istio Jenkins灰度发布实践方案</li>\n</ul>\n</blockquote>\n<h3 id=\"helm-是什么\"><a class=\"markdownIt-Anchor\" href=\"#helm-是什么\"></a> helm 是什么</h3>\n<p><strong><a href=\"https://github.com/helm/helm.git\">helm</a></strong> 是一款可以帮你在k8s上很好运维管理复杂的应用包管理工具。如果把k8s比作CentOS操作系统的话，那么helm类似CentOS系统中的yum工具。</p>\n<p><em>这两个工具从某种程度来说的确很相似，yum可以解决rpm之间的依赖问题，而helm也可以解决应用与基础服务依赖关系。比如：WordPress应用启动之前需要启动MySQL，那就可以在WordPress的charts里定义需要依赖MySQL的charts。那么在部署WordPress的charts时，helm也会拉取并部署MySQL的Charts。</em></p>\n<h3 id=\"helm-名称概念\"><a class=\"markdownIt-Anchor\" href=\"#helm-名称概念\"></a> helm 名称概念</h3>\n<p><strong>Charts:</strong> yum安装的rpm包则对应helm的charts。charts包含了整套复杂应用组件的k8s资源（Deployment、Service、Ingress、ConfigMap、Secret等）模板yaml文件以及模板对应value文件。Chart的目录结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mychart</span><br><span class=\"line\">├── Chart.yaml</span><br><span class=\"line\">├── charts</span><br><span class=\"line\">├── templates</span><br><span class=\"line\">│   ├── NOTES.txt</span><br><span class=\"line\">│   ├── _helpers.tpl</span><br><span class=\"line\">│   ├── deployment.yaml</span><br><span class=\"line\">│   ├── ingress.yaml</span><br><span class=\"line\">│   └── service.yaml</span><br><span class=\"line\">└── values.yaml</span><br></pre></td></tr></table></figure>\n<ul>\n<li>charts 目录存放依赖的 chart</li>\n<li>Chart.yaml 包含 Chart 的基本信息，包括 chart 版本，名称等</li>\n<li>templates 目录下存放应用一系列 k8s 资源的 yaml 模板</li>\n<li>_helpers.tpl 此文件中定义一些可重用的模板片断，此文件中的定义在任何资源定义模板中可用</li>\n<li>NOTES.txt 介绍 chart 部署后的帮助信息，如何使用 chart 等</li>\n<li>values.yaml 包含了必要的值定义（默认值）, 用于存储 templates 目录中模板文件中用到变量的值</li>\n</ul>\n<p><strong>Release:</strong> 扩展上述类比，要在基于CentOS的系统上安装NGNIX，您将运行yum install nginx。同样，要将NGINX安装到Kubernetes集群，您只需运行helm install nginx即可。每次向群集安装Charts都称为release。但是，与传统的操作系统软件包管理器不同，使用Helm可以轻松地将一个charts多次安装到单个集群中，每个release都有自己的特定配置。所以简单的来说一个release就是一个charts的实例化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm ls </span><br><span class=\"line\">istio                             \t1       \tThu Dec 13 11:50:08 2018\tDEPLOYED\tack-istio-1.0.4             \t1.0.4        \tistio-system</span><br></pre></td></tr></table></figure>\n<p><strong>Repositories:</strong> Helm Charts 还可以发布到存储库。这些charts可以发布到私有仓库，也可以是公共托管。像yum和apt一样，可以搜索它们以发现可用的charts。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm search nginx</span><br><span class=\"line\">NAME                       \tCHART VERSION\tAPP VERSION\tDESCRIPTION</span><br><span class=\"line\">stable/nginx-ingress       \t1.0.0        \t0.21.0     \tAn nginx Ingress controller that uses ConfigMap to store ...</span><br><span class=\"line\">stable/nginx-ldapauth-proxy\t0.1.2        \t1.13.5     \tnginx proxy with ldapauth</span><br><span class=\"line\">stable/nginx-lego          \t0.3.1        \t           \tChart <span class=\"keyword\">for</span> nginx-ingress-controller and kube-lego</span><br><span class=\"line\">stable/gcloud-endpoints    \t0.1.2        \t1          \tDEPRECATED Develop, deploy, protect and monitor your APIs...</span><br></pre></td></tr></table></figure>\n<h3 id=\"helm-核心组件\"><a class=\"markdownIt-Anchor\" href=\"#helm-核心组件\"></a> HELM 核心组件</h3>\n<p><strong>helm</strong> 是个客户端工具，它主要的作用如下：</p>\n<ul>\n<li>本地chart开发</li>\n<li>管理repositories</li>\n<li>与tiller 服务端进行交互\n<ul>\n<li>发送要安装的charts</li>\n<li>获取相关release的信息</li>\n<li>请求更新或者删除已存在的release</li>\n</ul>\n</li>\n</ul>\n<p><strong>tiller</strong> 是一个部署在k8s集群内部的一个与helm客户端进行交互同时也与k8s api连接的服务。主要负责如下功能：</p>\n<ul>\n<li>监听来自helm客户端传入的请求</li>\n<li>将charts和配置组合渲染来构建一个release</li>\n<li>将charts部署到k8s集群中并跟踪后续版本</li>\n<li>通过与k8s进行交互来更新以及删除集群中存在的release。</li>\n</ul>\n<center>![](/media/posts/media/jh.png)</center>\n简而言之，helm 客户端负责管理charts, tiller 服务端负责管理release生命周期。\n<h3 id=\"helm-内部实现\"><a class=\"markdownIt-Anchor\" href=\"#helm-内部实现\"></a> helm 内部实现</h3>\n<ol>\n<li>Helm客户端使用Go编程语言编写，并使用gRPC协议与Tiller服务器进行交互。</li>\n<li>Tiller服务端也是用Go编写的。它提供了一个与客户端连接的gRPC服务器，它使用Kubernetes客户端库与Kubernetes进行通信。目前，该库使用REST + JSON。</li>\n<li>Tiller服务器将信息存储在位于Kubernetes内的ConfigMaps中。它不需要自己的数据库。</li>\n</ol>\n<h3 id=\"release-管理机制\"><a class=\"markdownIt-Anchor\" href=\"#release-管理机制\"></a> release 管理机制</h3>\n<p><img src=\"/media/posts/media/release.png\" alt=\"\" /></p>\n<h4 id=\"创建-release\"><a class=\"markdownIt-Anchor\" href=\"#创建-release\"></a> 创建 release</h4>\n<ul>\n<li>helm 客户端从指定的目录或本地 tar 文件或远程 repo 仓库解析出 chart 的结构信息</li>\n<li>helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller</li>\n<li>Tiller 服务端根据 chart 和 values 生成一个 release</li>\n<li>Tiller 将 install release 请求直接传递给 kube-apiserver</li>\n</ul>\n<h4 id=\"更新-release\"><a class=\"markdownIt-Anchor\" href=\"#更新-release\"></a> 更新 release</h4>\n<ul>\n<li>helm 客户端将需要更新的 chart 的 release 名称 chart 结构和 value 信息传给 Tiller</li>\n<li>Tiller 将收到的信息生成新的 release，并同时更新这个 release 的 history</li>\n<li>Tiller 将新的 release 传递给 kube-apiserver 进行更新</li>\n</ul>\n<h4 id=\"删除-release\"><a class=\"markdownIt-Anchor\" href=\"#删除-release\"></a> 删除 release</h4>\n<ul>\n<li>helm 客户端从指定的目录或本地 tar 文件或远程 repo 仓库解析出 chart 的结构信息</li>\n<li>helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller</li>\n<li>Tiller 服务端根据 chart 和 values 生成一个 release</li>\n<li>Tiller 将 delete release 请求直接传递给 kube-apiserver</li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>Kubernetes的巨大成功创造了一个工具生态系统，可以简化应用程序开发和部署的复杂性。而该系列文章主要分享helm在噼里啪技术团队的生产实践经验总结。</p>","more":"<p><strong>针对helm篇的实践落地方案分为如下几个部分：</strong></p>\n<blockquote>\n<ul>\n<li>helm 基础理论篇</li>\n<li>helm 使用技巧篇</li>\n<li>基础中间件服务运维篇</li>\n<li>微服务应用版本管理篇</li>\n<li>基于jenkins + helm的CICD方案</li>\n<li>Helm 实践趟坑篇</li>\n<li>基于Helm Istio Jenkins灰度发布实践方案</li>\n</ul>\n</blockquote>\n<h3 id=\"helm-是什么\"><a class=\"markdownIt-Anchor\" href=\"#helm-是什么\"></a> helm 是什么</h3>\n<p><strong><a href=\"https://github.com/helm/helm.git\">helm</a></strong> 是一款可以帮你在k8s上很好运维管理复杂的应用包管理工具。如果把k8s比作CentOS操作系统的话，那么helm类似CentOS系统中的yum工具。</p>\n<p><em>这两个工具从某种程度来说的确很相似，yum可以解决rpm之间的依赖问题，而helm也可以解决应用与基础服务依赖关系。比如：WordPress应用启动之前需要启动MySQL，那就可以在WordPress的charts里定义需要依赖MySQL的charts。那么在部署WordPress的charts时，helm也会拉取并部署MySQL的Charts。</em></p>\n<h3 id=\"helm-名称概念\"><a class=\"markdownIt-Anchor\" href=\"#helm-名称概念\"></a> helm 名称概念</h3>\n<p><strong>Charts:</strong> yum安装的rpm包则对应helm的charts。charts包含了整套复杂应用组件的k8s资源（Deployment、Service、Ingress、ConfigMap、Secret等）模板yaml文件以及模板对应value文件。Chart的目录结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mychart</span><br><span class=\"line\">├── Chart.yaml</span><br><span class=\"line\">├── charts</span><br><span class=\"line\">├── templates</span><br><span class=\"line\">│   ├── NOTES.txt</span><br><span class=\"line\">│   ├── _helpers.tpl</span><br><span class=\"line\">│   ├── deployment.yaml</span><br><span class=\"line\">│   ├── ingress.yaml</span><br><span class=\"line\">│   └── service.yaml</span><br><span class=\"line\">└── values.yaml</span><br></pre></td></tr></table></figure>\n<ul>\n<li>charts 目录存放依赖的 chart</li>\n<li>Chart.yaml 包含 Chart 的基本信息，包括 chart 版本，名称等</li>\n<li>templates 目录下存放应用一系列 k8s 资源的 yaml 模板</li>\n<li>_helpers.tpl 此文件中定义一些可重用的模板片断，此文件中的定义在任何资源定义模板中可用</li>\n<li>NOTES.txt 介绍 chart 部署后的帮助信息，如何使用 chart 等</li>\n<li>values.yaml 包含了必要的值定义（默认值）, 用于存储 templates 目录中模板文件中用到变量的值</li>\n</ul>\n<p><strong>Release:</strong> 扩展上述类比，要在基于CentOS的系统上安装NGNIX，您将运行yum install nginx。同样，要将NGINX安装到Kubernetes集群，您只需运行helm install nginx即可。每次向群集安装Charts都称为release。但是，与传统的操作系统软件包管理器不同，使用Helm可以轻松地将一个charts多次安装到单个集群中，每个release都有自己的特定配置。所以简单的来说一个release就是一个charts的实例化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm ls </span><br><span class=\"line\">istio                             \t1       \tThu Dec 13 11:50:08 2018\tDEPLOYED\tack-istio-1.0.4             \t1.0.4        \tistio-system</span><br></pre></td></tr></table></figure>\n<p><strong>Repositories:</strong> Helm Charts 还可以发布到存储库。这些charts可以发布到私有仓库，也可以是公共托管。像yum和apt一样，可以搜索它们以发现可用的charts。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm search nginx</span><br><span class=\"line\">NAME                       \tCHART VERSION\tAPP VERSION\tDESCRIPTION</span><br><span class=\"line\">stable/nginx-ingress       \t1.0.0        \t0.21.0     \tAn nginx Ingress controller that uses ConfigMap to store ...</span><br><span class=\"line\">stable/nginx-ldapauth-proxy\t0.1.2        \t1.13.5     \tnginx proxy with ldapauth</span><br><span class=\"line\">stable/nginx-lego          \t0.3.1        \t           \tChart <span class=\"keyword\">for</span> nginx-ingress-controller and kube-lego</span><br><span class=\"line\">stable/gcloud-endpoints    \t0.1.2        \t1          \tDEPRECATED Develop, deploy, protect and monitor your APIs...</span><br></pre></td></tr></table></figure>\n<h3 id=\"helm-核心组件\"><a class=\"markdownIt-Anchor\" href=\"#helm-核心组件\"></a> HELM 核心组件</h3>\n<p><strong>helm</strong> 是个客户端工具，它主要的作用如下：</p>\n<ul>\n<li>本地chart开发</li>\n<li>管理repositories</li>\n<li>与tiller 服务端进行交互\n<ul>\n<li>发送要安装的charts</li>\n<li>获取相关release的信息</li>\n<li>请求更新或者删除已存在的release</li>\n</ul>\n</li>\n</ul>\n<p><strong>tiller</strong> 是一个部署在k8s集群内部的一个与helm客户端进行交互同时也与k8s api连接的服务。主要负责如下功能：</p>\n<ul>\n<li>监听来自helm客户端传入的请求</li>\n<li>将charts和配置组合渲染来构建一个release</li>\n<li>将charts部署到k8s集群中并跟踪后续版本</li>\n<li>通过与k8s进行交互来更新以及删除集群中存在的release。</li>\n</ul>\n<center>![](/media/posts/media/jh.png)</center>\n简而言之，helm 客户端负责管理charts, tiller 服务端负责管理release生命周期。\n<h3 id=\"helm-内部实现\"><a class=\"markdownIt-Anchor\" href=\"#helm-内部实现\"></a> helm 内部实现</h3>\n<ol>\n<li>Helm客户端使用Go编程语言编写，并使用gRPC协议与Tiller服务器进行交互。</li>\n<li>Tiller服务端也是用Go编写的。它提供了一个与客户端连接的gRPC服务器，它使用Kubernetes客户端库与Kubernetes进行通信。目前，该库使用REST + JSON。</li>\n<li>Tiller服务器将信息存储在位于Kubernetes内的ConfigMaps中。它不需要自己的数据库。</li>\n</ol>\n<h3 id=\"release-管理机制\"><a class=\"markdownIt-Anchor\" href=\"#release-管理机制\"></a> release 管理机制</h3>\n<p><img src=\"/media/posts/media/release.png\" alt=\"\" /></p>\n<h4 id=\"创建-release\"><a class=\"markdownIt-Anchor\" href=\"#创建-release\"></a> 创建 release</h4>\n<ul>\n<li>helm 客户端从指定的目录或本地 tar 文件或远程 repo 仓库解析出 chart 的结构信息</li>\n<li>helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller</li>\n<li>Tiller 服务端根据 chart 和 values 生成一个 release</li>\n<li>Tiller 将 install release 请求直接传递给 kube-apiserver</li>\n</ul>\n<h4 id=\"更新-release\"><a class=\"markdownIt-Anchor\" href=\"#更新-release\"></a> 更新 release</h4>\n<ul>\n<li>helm 客户端将需要更新的 chart 的 release 名称 chart 结构和 value 信息传给 Tiller</li>\n<li>Tiller 将收到的信息生成新的 release，并同时更新这个 release 的 history</li>\n<li>Tiller 将新的 release 传递给 kube-apiserver 进行更新</li>\n</ul>\n<h4 id=\"删除-release\"><a class=\"markdownIt-Anchor\" href=\"#删除-release\"></a> 删除 release</h4>\n<ul>\n<li>helm 客户端从指定的目录或本地 tar 文件或远程 repo 仓库解析出 chart 的结构信息</li>\n<li>helm 客户端指定的 chart 结构和 values 信息通过 gRPC 传递给 Tiller</li>\n<li>Tiller 服务端根据 chart 和 values 生成一个 release</li>\n<li>Tiller 将 delete release 请求直接传递给 kube-apiserver</li>\n</ul>"},{"title":"基于Ubuntu安装ROS 系统（melodic版本）","author":"Mayer Shi","date":"2020-06-04T02:25:23.000Z","draft":false,"_content":"ROS (Robot Operating System, 机器人操作系统) 提供一系列程序库和工具以帮助软件开发者创建机器人应用软件。它提供了硬件抽象、设备驱动、函数库、可视化工具、消息传递和软件包管理等诸多功能。\n<!--more-->\n\n\n## 安装版本要求：\n> * Ubuntu系统版本18.04 版本\n> * ROS 版本为Melodic版本\n\n## 安装步骤\n1. 配置Ubuntu的repository源,编辑/etc/apt/sources.list文件。\n\n```bash\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\n\n# 预发布软件源，不建议启用\n# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\n```\n更新源以及更新系统\n\n```bash\nsudo apt-get update -y\nsudo apt-get upgrade -y \n```\n\n2. 配置ROS的Ubuntu源,\n```bash\nROS 镜像使用帮助\n新建 /etc/apt/sources.list.d/ros-latest.list，内容为：\n\n你的Debian/Ubuntu版本: \nUbuntu 18.04 LTS\ndeb https://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ bionic main\n然后再输入如下命令，信任ROS的GPG Key，并更新索引：\n\nsudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654\nsudo apt update\n```\n\n3. 开始安装ROS系统\n```bash\nsudo apt install ros-melodic-desktop-full -y\n```\n\n4. ROS环境变量设置\n```bash\necho \"source /opt/ros/melodic/setup.bash\" >>  ~/.bashrc\nsource ~/.bashrc\n```\n\n5. 安装构建包依赖\n```bash\nsudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential\n```\n\n6. 初始化rosdep工具，在使用许多ROS工具之前，您需要初始化rosdep。rosdep使您能够轻松地为要编译的源安装系统依赖性，并且是运行ROS中某些核心组件所必需的。\n```bash\nsudo apt install python-rosdep\nsudo rosdep init\nrosdep update\n```\n\n7. 验证当前安装环境是否正确。\n```bash\n# 开启一个终端执行如下命令\nros@ubuntu:~$ roscore\n... logging to /home/mayershi/.ros/log/51594486-a3d7-11ea-a495-001c425709d4/roslaunch-ubuntu-14528.log\nChecking log directory for disk usage. This may take a while.\nPress Ctrl-C to interrupt\nDone checking log file disk usage. Usage is <1GB.\n\nstarted roslaunch server http://ubuntu:41953/\nros_comm version 1.14.5\n\n\nSUMMARY\n========\n\nPARAMETERS\n * /rosdistro: melodic\n * /rosversion: 1.14.5\n\nNODES\n\nauto-starting new master\nprocess[master]: started with pid [14541]\nROS_MASTER_URI=http://ubuntu:11311/\n\nsetting /run_id to 51594486-a3d7-11ea-a495-001c425709d4\nprocess[rosout-1]: started with pid [14552]\nstarted core service [/rosout]\n\n# 新开一个终端执行命令\nros@ubuntu:~$ rosrun turtlesim turtlesim_node\n# 会生产成一个小乌龟节点\n\n# 新开另外一个终端执行命令\nros@ubuntu:~$ rosrun turtlesim turtle_teleop_key\n# 在此终端上通过方向键来操控小乌龟移动。\n```\n\n效果如图：\n![twT9mj.png](https://s1.ax1x.com/2020/06/04/twT9mj.png)\n","source":"_posts/install-ros-melodic-ubuntu-18-04.md","raw":"---\ntitle: \"基于Ubuntu安装ROS 系统（melodic版本）\"\nauthor: \"Mayer Shi\"\ntags: [\"机器人\"]\ncategories: [\"ROS\"]\ndate: 2020-06-04 10:25:23\ndraft: false\n---\nROS (Robot Operating System, 机器人操作系统) 提供一系列程序库和工具以帮助软件开发者创建机器人应用软件。它提供了硬件抽象、设备驱动、函数库、可视化工具、消息传递和软件包管理等诸多功能。\n<!--more-->\n\n\n## 安装版本要求：\n> * Ubuntu系统版本18.04 版本\n> * ROS 版本为Melodic版本\n\n## 安装步骤\n1. 配置Ubuntu的repository源,编辑/etc/apt/sources.list文件。\n\n```bash\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\n\n# 预发布软件源，不建议启用\n# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\n```\n更新源以及更新系统\n\n```bash\nsudo apt-get update -y\nsudo apt-get upgrade -y \n```\n\n2. 配置ROS的Ubuntu源,\n```bash\nROS 镜像使用帮助\n新建 /etc/apt/sources.list.d/ros-latest.list，内容为：\n\n你的Debian/Ubuntu版本: \nUbuntu 18.04 LTS\ndeb https://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ bionic main\n然后再输入如下命令，信任ROS的GPG Key，并更新索引：\n\nsudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654\nsudo apt update\n```\n\n3. 开始安装ROS系统\n```bash\nsudo apt install ros-melodic-desktop-full -y\n```\n\n4. ROS环境变量设置\n```bash\necho \"source /opt/ros/melodic/setup.bash\" >>  ~/.bashrc\nsource ~/.bashrc\n```\n\n5. 安装构建包依赖\n```bash\nsudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential\n```\n\n6. 初始化rosdep工具，在使用许多ROS工具之前，您需要初始化rosdep。rosdep使您能够轻松地为要编译的源安装系统依赖性，并且是运行ROS中某些核心组件所必需的。\n```bash\nsudo apt install python-rosdep\nsudo rosdep init\nrosdep update\n```\n\n7. 验证当前安装环境是否正确。\n```bash\n# 开启一个终端执行如下命令\nros@ubuntu:~$ roscore\n... logging to /home/mayershi/.ros/log/51594486-a3d7-11ea-a495-001c425709d4/roslaunch-ubuntu-14528.log\nChecking log directory for disk usage. This may take a while.\nPress Ctrl-C to interrupt\nDone checking log file disk usage. Usage is <1GB.\n\nstarted roslaunch server http://ubuntu:41953/\nros_comm version 1.14.5\n\n\nSUMMARY\n========\n\nPARAMETERS\n * /rosdistro: melodic\n * /rosversion: 1.14.5\n\nNODES\n\nauto-starting new master\nprocess[master]: started with pid [14541]\nROS_MASTER_URI=http://ubuntu:11311/\n\nsetting /run_id to 51594486-a3d7-11ea-a495-001c425709d4\nprocess[rosout-1]: started with pid [14552]\nstarted core service [/rosout]\n\n# 新开一个终端执行命令\nros@ubuntu:~$ rosrun turtlesim turtlesim_node\n# 会生产成一个小乌龟节点\n\n# 新开另外一个终端执行命令\nros@ubuntu:~$ rosrun turtlesim turtle_teleop_key\n# 在此终端上通过方向键来操控小乌龟移动。\n```\n\n效果如图：\n![twT9mj.png](https://s1.ax1x.com/2020/06/04/twT9mj.png)\n","slug":"install-ros-melodic-ubuntu-18-04","published":1,"updated":"2020-06-04T02:25:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoeq000s24lv9tca81ib","content":"<p>ROS (Robot Operating System, 机器人操作系统) 提供一系列程序库和工具以帮助软件开发者创建机器人应用软件。它提供了硬件抽象、设备驱动、函数库、可视化工具、消息传递和软件包管理等诸多功能。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装版本要求\"><a class=\"markdownIt-Anchor\" href=\"#安装版本要求\"></a> 安装版本要求：</h2>\n<blockquote>\n<ul>\n<li>Ubuntu系统版本18.04 版本</li>\n<li>ROS 版本为Melodic版本</li>\n</ul>\n</blockquote>\n<h2 id=\"安装步骤\"><a class=\"markdownIt-Anchor\" href=\"#安装步骤\"></a> 安装步骤</h2>\n<ol>\n<li>配置Ubuntu的repository源,编辑/etc/apt/sources.list文件。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 预发布软件源，不建议启用</span></span><br><span class=\"line\"><span class=\"comment\"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span></span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>\n<p>更新源以及更新系统</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update -y</span><br><span class=\"line\">sudo apt-get upgrade -y </span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置ROS的Ubuntu源,</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROS 镜像使用帮助</span><br><span class=\"line\">新建 /etc/apt/sources.list.d/ros-latest.list，内容为：</span><br><span class=\"line\"></span><br><span class=\"line\">你的Debian/Ubuntu版本: </span><br><span class=\"line\">Ubuntu 18.04 LTS</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ bionic main</span><br><span class=\"line\">然后再输入如下命令，信任ROS的GPG Key，并更新索引：</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-key adv --keyserver <span class=\"string\">&#x27;hkp://keyserver.ubuntu.com:80&#x27;</span> --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>开始安装ROS系统</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install ros-melodic-desktop-full -y</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>ROS环境变量设置</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;source /opt/ros/melodic/setup.bash&quot;</span> &gt;&gt;  ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>安装构建包依赖</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>初始化rosdep工具，在使用许多ROS工具之前，您需要初始化rosdep。rosdep使您能够轻松地为要编译的源安装系统依赖性，并且是运行ROS中某些核心组件所必需的。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-rosdep</span><br><span class=\"line\">sudo rosdep init</span><br><span class=\"line\">rosdep update</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>验证当前安装环境是否正确。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启一个终端执行如下命令</span></span><br><span class=\"line\">ros@ubuntu:~$ roscore</span><br><span class=\"line\">... logging to /home/mayershi/.ros/<span class=\"built_in\">log</span>/51594486-a3d7-11ea-a495-001c425709d4/roslaunch-ubuntu-14528.log</span><br><span class=\"line\">Checking <span class=\"built_in\">log</span> directory <span class=\"keyword\">for</span> disk usage. This may take a <span class=\"keyword\">while</span>.</span><br><span class=\"line\">Press Ctrl-C to interrupt</span><br><span class=\"line\">Done checking <span class=\"built_in\">log</span> file disk usage. Usage is &lt;1GB.</span><br><span class=\"line\"></span><br><span class=\"line\">started roslaunch server http://ubuntu:41953/</span><br><span class=\"line\">ros_comm version 1.14.5</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SUMMARY</span><br><span class=\"line\">========</span><br><span class=\"line\"></span><br><span class=\"line\">PARAMETERS</span><br><span class=\"line\"> * /rosdistro: melodic</span><br><span class=\"line\"> * /rosversion: 1.14.5</span><br><span class=\"line\"></span><br><span class=\"line\">NODES</span><br><span class=\"line\"></span><br><span class=\"line\">auto-starting new master</span><br><span class=\"line\">process[master]: started with pid [14541]</span><br><span class=\"line\">ROS_MASTER_URI=http://ubuntu:11311/</span><br><span class=\"line\"></span><br><span class=\"line\">setting /run_id to 51594486-a3d7-11ea-a495-001c425709d4</span><br><span class=\"line\">process[rosout-1]: started with pid [14552]</span><br><span class=\"line\">started core service [/rosout]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新开一个终端执行命令</span></span><br><span class=\"line\">ros@ubuntu:~$ rosrun turtlesim turtlesim_node</span><br><span class=\"line\"><span class=\"comment\"># 会生产成一个小乌龟节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新开另外一个终端执行命令</span></span><br><span class=\"line\">ros@ubuntu:~$ rosrun turtlesim turtle_teleop_key</span><br><span class=\"line\"><span class=\"comment\"># 在此终端上通过方向键来操控小乌龟移动。</span></span><br></pre></td></tr></table></figure>\n<p>效果如图：<br />\n<img src=\"https://s1.ax1x.com/2020/06/04/twT9mj.png\" alt=\"twT9mj.png\" /></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>ROS (Robot Operating System, 机器人操作系统) 提供一系列程序库和工具以帮助软件开发者创建机器人应用软件。它提供了硬件抽象、设备驱动、函数库、可视化工具、消息传递和软件包管理等诸多功能。</p>","more":"<h2 id=\"安装版本要求\"><a class=\"markdownIt-Anchor\" href=\"#安装版本要求\"></a> 安装版本要求：</h2>\n<blockquote>\n<ul>\n<li>Ubuntu系统版本18.04 版本</li>\n<li>ROS 版本为Melodic版本</li>\n</ul>\n</blockquote>\n<h2 id=\"安装步骤\"><a class=\"markdownIt-Anchor\" href=\"#安装步骤\"></a> 安装步骤</h2>\n<ol>\n<li>配置Ubuntu的repository源,编辑/etc/apt/sources.list文件。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 预发布软件源，不建议启用</span></span><br><span class=\"line\"><span class=\"comment\"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span></span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>\n<p>更新源以及更新系统</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update -y</span><br><span class=\"line\">sudo apt-get upgrade -y </span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置ROS的Ubuntu源,</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROS 镜像使用帮助</span><br><span class=\"line\">新建 /etc/apt/sources.list.d/ros-latest.list，内容为：</span><br><span class=\"line\"></span><br><span class=\"line\">你的Debian/Ubuntu版本: </span><br><span class=\"line\">Ubuntu 18.04 LTS</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ bionic main</span><br><span class=\"line\">然后再输入如下命令，信任ROS的GPG Key，并更新索引：</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-key adv --keyserver <span class=\"string\">&#x27;hkp://keyserver.ubuntu.com:80&#x27;</span> --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>开始安装ROS系统</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install ros-melodic-desktop-full -y</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>ROS环境变量设置</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;source /opt/ros/melodic/setup.bash&quot;</span> &gt;&gt;  ~/.bashrc</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>安装构建包依赖</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>初始化rosdep工具，在使用许多ROS工具之前，您需要初始化rosdep。rosdep使您能够轻松地为要编译的源安装系统依赖性，并且是运行ROS中某些核心组件所必需的。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-rosdep</span><br><span class=\"line\">sudo rosdep init</span><br><span class=\"line\">rosdep update</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>验证当前安装环境是否正确。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启一个终端执行如下命令</span></span><br><span class=\"line\">ros@ubuntu:~$ roscore</span><br><span class=\"line\">... logging to /home/mayershi/.ros/<span class=\"built_in\">log</span>/51594486-a3d7-11ea-a495-001c425709d4/roslaunch-ubuntu-14528.log</span><br><span class=\"line\">Checking <span class=\"built_in\">log</span> directory <span class=\"keyword\">for</span> disk usage. This may take a <span class=\"keyword\">while</span>.</span><br><span class=\"line\">Press Ctrl-C to interrupt</span><br><span class=\"line\">Done checking <span class=\"built_in\">log</span> file disk usage. Usage is &lt;1GB.</span><br><span class=\"line\"></span><br><span class=\"line\">started roslaunch server http://ubuntu:41953/</span><br><span class=\"line\">ros_comm version 1.14.5</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">SUMMARY</span><br><span class=\"line\">========</span><br><span class=\"line\"></span><br><span class=\"line\">PARAMETERS</span><br><span class=\"line\"> * /rosdistro: melodic</span><br><span class=\"line\"> * /rosversion: 1.14.5</span><br><span class=\"line\"></span><br><span class=\"line\">NODES</span><br><span class=\"line\"></span><br><span class=\"line\">auto-starting new master</span><br><span class=\"line\">process[master]: started with pid [14541]</span><br><span class=\"line\">ROS_MASTER_URI=http://ubuntu:11311/</span><br><span class=\"line\"></span><br><span class=\"line\">setting /run_id to 51594486-a3d7-11ea-a495-001c425709d4</span><br><span class=\"line\">process[rosout-1]: started with pid [14552]</span><br><span class=\"line\">started core service [/rosout]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新开一个终端执行命令</span></span><br><span class=\"line\">ros@ubuntu:~$ rosrun turtlesim turtlesim_node</span><br><span class=\"line\"><span class=\"comment\"># 会生产成一个小乌龟节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新开另外一个终端执行命令</span></span><br><span class=\"line\">ros@ubuntu:~$ rosrun turtlesim turtle_teleop_key</span><br><span class=\"line\"><span class=\"comment\"># 在此终端上通过方向键来操控小乌龟移动。</span></span><br></pre></td></tr></table></figure>\n<p>效果如图：<br />\n<img src=\"https://s1.ax1x.com/2020/06/04/twT9mj.png\" alt=\"twT9mj.png\" /></p>"},{"title":"下一代数据中心云操作系统 kubernetes","date":"2019-12-01T03:06:42.000Z","author":"Mayer Shi","_content":"\n云时代中的佼佼者k8s的系列高质量干货文章，其中包含基础概念、组件原理、基本使用、生态工具、以及生产中的最佳实践。\n\n<!--more-->\n\n### 本篇前言\n在开源领域长期霸持数据中心核心地位非Linux莫属，但是随着云计算的崛起以及开源世界大公司不断加入诞生了新一代数据中心云操作系统k8s，可以毫不夸张的说k8s是开源世界一款伟大产品。\n\n#### kubernetes 是什么？\n\nKubernetes是一个可移植，可扩展的开源平台，用于管理容器化工作负载和服务，有助于声明性配置和自动化。它拥有庞大，快速发展的生态系统。Kubernetes服务，支持和工具广泛可用。\n\nKubernetes这个名字源于希腊语，意思是舵手或飞行员。谷歌在2014年开放了Kubernetes项目.Kubernetes建立在谷歌拥有大量运行生产工作量的十五年经验的基础上，结合了社区中的最佳创意和实践。\n\n**IT应用运维变迁**\n\n透过IT应用运维的变迁，让我们来看看为什么Kubernetes如此有用和伟大。\n\n下一代数据中心云操作系统 kubernetes「容器云连载」\n\n**物理机部署时代**： 早期，在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源浪费问题。例如，如果在物理服务器上运行多个应用程序，则可能存在一个应用程序占用大部分资源的情况，因此其他应用程序会受到影响。解决方案是在不同的物理服务器上运行不同应用程序。但是由于资源未得到充分利用，并且扩展性很差，企业维护许多物理服务器的成本很高。\n\n**虚拟化部署时代**：为了解决资源利用率的问题，引入了虚拟化。它允许您在单个物理服务器的CPU上运行多个虚拟机（VM）。虚拟化允许应用程序在VM之间隔离，并提供一定程度的安全性，因为另一个应用程序无法随便访问另外一VM上运行应用程序的信息。\n\n虚拟化可以更好地利用物理服务器中的资源，也可以实现更好的可扩展性，快速添加或更新应用程序，降低硬件成本等等优点。\n\n每个VM都是在虚拟化硬件之上运行包含所有组件（包括其自己的操作系统）的完整操作系统。\n\n**容器部署时代**：容器类似于VM，但它们属于轻量级虚拟化，隔离性相对宽松。多个应用程序容器之间共享宿主操作系统（OS）。与VM类似，容器具有自己的文件系统，CPU，内存，进程空间等。当它们与底层基础架构分离时，它们可以跨云和OS分发进行移植。\n\n**容器的优势**\n\n- 敏捷应用程序创建和部署：与VM映像使用相比，增加了容器镜像创建的简便性和效率。\n- 持续开发，集成和部署：通过快速简便的回滚（由于镜像不变性）提供可靠且频繁的容器镜像构建和部署。\n- Dev和Ops关注点分离：在构建/发布时而不是部署时创建应用程序容器镜像，从而将应用程序与基础架构分离。\n- 开发，测试和生产的环境一致性：在笔记本电脑上运行与在云中运行相同。\n- 云和操作系统分发可移植性：在Ubuntu，RHEL，CoreOS，本地，阿里云，腾讯云和其他任何地方都可以运行。\n- 以应用程序为中心的管理：提高在虚拟硬件上运行OS的抽象级别，以及使用逻辑资源在OS上运行应用程序。\n- 资源隔离与利用：可预测的应用程序性能，高效率和高密度。\n\n### 为什么需要kubernetes 以及用它能做什么？\n在生产环境中，您需要管理运行应用程序的容器并确保没有停机时间。例如，如果容器发生故障，则需要启动另一个容器，添加负载均衡等一系列动作。如果这些直接交给一个系统去处理，会不会更高效和便捷？\n\nkubernetes 就是很好解决了包含以上所说各种问题的系统 ！Kubernetes为您提供了一个弹性运行分布式系统的框架。它可以管理应用的扩展，故障转移，负载均衡等。例如，Kubernetes可以轻松管理应用系统的canary发布。k8s 提供如下有用特性：\n\n- **服务发现和负载平衡**\n\nKubernetes可以使用内部DNS名称或使用自己的IP地址提供服务入口。如果容器的流量很高，Kubernetes能够负载均衡并分配网络流量，确保应用可以稳定提供服务。\n\n- **存储编排**\n\nKubernetes允许您自动安装您选择的存储系统，例如本地存储，公共云提供商等。\n\n- **自动部署和回滚**\n\n您可以使用Kubernetes描述已部署容器的所需状态，并且可以控制速率将实际状态更改为所需状态。例如，您可以控制Kubernetes为您的deploy自动创建新容器，删除现有容器并将所有资源用于新容器。\n\n- **自我修复与高可用**\n\nKubernetes重新启动失败的容器，替换容器，杀死不响应用户定义的运行状况检查的容器，并且服务没有真正运行就绪前不会提前暴露给调用客户端。\n\n- **密钥和配置管理**\n\nKubernetes允许您存储和管理敏感信息，例如密码，OAuth令牌和ssh密钥。您可以部署和更新秘钥和应用程序配置，而无需重建容器镜像，也不会在应用程序中暴露秘钥。\n\n","source":"_posts/k8s-cloud-001.md","raw":"---\ntitle: 下一代数据中心云操作系统 kubernetes\ndate: 2019-12-01 11:06:42\nauthor: \"Mayer Shi\"\ntags: [\"kubernetes\"]\ncategories: [\"Container Cloud\"]\n---\n\n云时代中的佼佼者k8s的系列高质量干货文章，其中包含基础概念、组件原理、基本使用、生态工具、以及生产中的最佳实践。\n\n<!--more-->\n\n### 本篇前言\n在开源领域长期霸持数据中心核心地位非Linux莫属，但是随着云计算的崛起以及开源世界大公司不断加入诞生了新一代数据中心云操作系统k8s，可以毫不夸张的说k8s是开源世界一款伟大产品。\n\n#### kubernetes 是什么？\n\nKubernetes是一个可移植，可扩展的开源平台，用于管理容器化工作负载和服务，有助于声明性配置和自动化。它拥有庞大，快速发展的生态系统。Kubernetes服务，支持和工具广泛可用。\n\nKubernetes这个名字源于希腊语，意思是舵手或飞行员。谷歌在2014年开放了Kubernetes项目.Kubernetes建立在谷歌拥有大量运行生产工作量的十五年经验的基础上，结合了社区中的最佳创意和实践。\n\n**IT应用运维变迁**\n\n透过IT应用运维的变迁，让我们来看看为什么Kubernetes如此有用和伟大。\n\n下一代数据中心云操作系统 kubernetes「容器云连载」\n\n**物理机部署时代**： 早期，在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源浪费问题。例如，如果在物理服务器上运行多个应用程序，则可能存在一个应用程序占用大部分资源的情况，因此其他应用程序会受到影响。解决方案是在不同的物理服务器上运行不同应用程序。但是由于资源未得到充分利用，并且扩展性很差，企业维护许多物理服务器的成本很高。\n\n**虚拟化部署时代**：为了解决资源利用率的问题，引入了虚拟化。它允许您在单个物理服务器的CPU上运行多个虚拟机（VM）。虚拟化允许应用程序在VM之间隔离，并提供一定程度的安全性，因为另一个应用程序无法随便访问另外一VM上运行应用程序的信息。\n\n虚拟化可以更好地利用物理服务器中的资源，也可以实现更好的可扩展性，快速添加或更新应用程序，降低硬件成本等等优点。\n\n每个VM都是在虚拟化硬件之上运行包含所有组件（包括其自己的操作系统）的完整操作系统。\n\n**容器部署时代**：容器类似于VM，但它们属于轻量级虚拟化，隔离性相对宽松。多个应用程序容器之间共享宿主操作系统（OS）。与VM类似，容器具有自己的文件系统，CPU，内存，进程空间等。当它们与底层基础架构分离时，它们可以跨云和OS分发进行移植。\n\n**容器的优势**\n\n- 敏捷应用程序创建和部署：与VM映像使用相比，增加了容器镜像创建的简便性和效率。\n- 持续开发，集成和部署：通过快速简便的回滚（由于镜像不变性）提供可靠且频繁的容器镜像构建和部署。\n- Dev和Ops关注点分离：在构建/发布时而不是部署时创建应用程序容器镜像，从而将应用程序与基础架构分离。\n- 开发，测试和生产的环境一致性：在笔记本电脑上运行与在云中运行相同。\n- 云和操作系统分发可移植性：在Ubuntu，RHEL，CoreOS，本地，阿里云，腾讯云和其他任何地方都可以运行。\n- 以应用程序为中心的管理：提高在虚拟硬件上运行OS的抽象级别，以及使用逻辑资源在OS上运行应用程序。\n- 资源隔离与利用：可预测的应用程序性能，高效率和高密度。\n\n### 为什么需要kubernetes 以及用它能做什么？\n在生产环境中，您需要管理运行应用程序的容器并确保没有停机时间。例如，如果容器发生故障，则需要启动另一个容器，添加负载均衡等一系列动作。如果这些直接交给一个系统去处理，会不会更高效和便捷？\n\nkubernetes 就是很好解决了包含以上所说各种问题的系统 ！Kubernetes为您提供了一个弹性运行分布式系统的框架。它可以管理应用的扩展，故障转移，负载均衡等。例如，Kubernetes可以轻松管理应用系统的canary发布。k8s 提供如下有用特性：\n\n- **服务发现和负载平衡**\n\nKubernetes可以使用内部DNS名称或使用自己的IP地址提供服务入口。如果容器的流量很高，Kubernetes能够负载均衡并分配网络流量，确保应用可以稳定提供服务。\n\n- **存储编排**\n\nKubernetes允许您自动安装您选择的存储系统，例如本地存储，公共云提供商等。\n\n- **自动部署和回滚**\n\n您可以使用Kubernetes描述已部署容器的所需状态，并且可以控制速率将实际状态更改为所需状态。例如，您可以控制Kubernetes为您的deploy自动创建新容器，删除现有容器并将所有资源用于新容器。\n\n- **自我修复与高可用**\n\nKubernetes重新启动失败的容器，替换容器，杀死不响应用户定义的运行状况检查的容器，并且服务没有真正运行就绪前不会提前暴露给调用客户端。\n\n- **密钥和配置管理**\n\nKubernetes允许您存储和管理敏感信息，例如密码，OAuth令牌和ssh密钥。您可以部署和更新秘钥和应用程序配置，而无需重建容器镜像，也不会在应用程序中暴露秘钥。\n\n","slug":"k8s-cloud-001","published":1,"updated":"2019-12-01T03:06:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoer000u24lv6xpodnte","content":"<p>云时代中的佼佼者k8s的系列高质量干货文章，其中包含基础概念、组件原理、基本使用、生态工具、以及生产中的最佳实践。</p>\n<a id=\"more\"></a>\n<h3 id=\"本篇前言\"><a class=\"markdownIt-Anchor\" href=\"#本篇前言\"></a> 本篇前言</h3>\n<p>在开源领域长期霸持数据中心核心地位非Linux莫属，但是随着云计算的崛起以及开源世界大公司不断加入诞生了新一代数据中心云操作系统k8s，可以毫不夸张的说k8s是开源世界一款伟大产品。</p>\n<h4 id=\"kubernetes-是什么\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-是什么\"></a> kubernetes 是什么？</h4>\n<p>Kubernetes是一个可移植，可扩展的开源平台，用于管理容器化工作负载和服务，有助于声明性配置和自动化。它拥有庞大，快速发展的生态系统。Kubernetes服务，支持和工具广泛可用。</p>\n<p>Kubernetes这个名字源于希腊语，意思是舵手或飞行员。谷歌在2014年开放了Kubernetes项目.Kubernetes建立在谷歌拥有大量运行生产工作量的十五年经验的基础上，结合了社区中的最佳创意和实践。</p>\n<p><strong>IT应用运维变迁</strong></p>\n<p>透过IT应用运维的变迁，让我们来看看为什么Kubernetes如此有用和伟大。</p>\n<p>下一代数据中心云操作系统 kubernetes「容器云连载」</p>\n<p><strong>物理机部署时代</strong>： 早期，在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源浪费问题。例如，如果在物理服务器上运行多个应用程序，则可能存在一个应用程序占用大部分资源的情况，因此其他应用程序会受到影响。解决方案是在不同的物理服务器上运行不同应用程序。但是由于资源未得到充分利用，并且扩展性很差，企业维护许多物理服务器的成本很高。</p>\n<p><strong>虚拟化部署时代</strong>：为了解决资源利用率的问题，引入了虚拟化。它允许您在单个物理服务器的CPU上运行多个虚拟机（VM）。虚拟化允许应用程序在VM之间隔离，并提供一定程度的安全性，因为另一个应用程序无法随便访问另外一VM上运行应用程序的信息。</p>\n<p>虚拟化可以更好地利用物理服务器中的资源，也可以实现更好的可扩展性，快速添加或更新应用程序，降低硬件成本等等优点。</p>\n<p>每个VM都是在虚拟化硬件之上运行包含所有组件（包括其自己的操作系统）的完整操作系统。</p>\n<p><strong>容器部署时代</strong>：容器类似于VM，但它们属于轻量级虚拟化，隔离性相对宽松。多个应用程序容器之间共享宿主操作系统（OS）。与VM类似，容器具有自己的文件系统，CPU，内存，进程空间等。当它们与底层基础架构分离时，它们可以跨云和OS分发进行移植。</p>\n<p><strong>容器的优势</strong></p>\n<ul>\n<li>敏捷应用程序创建和部署：与VM映像使用相比，增加了容器镜像创建的简便性和效率。</li>\n<li>持续开发，集成和部署：通过快速简便的回滚（由于镜像不变性）提供可靠且频繁的容器镜像构建和部署。</li>\n<li>Dev和Ops关注点分离：在构建/发布时而不是部署时创建应用程序容器镜像，从而将应用程序与基础架构分离。</li>\n<li>开发，测试和生产的环境一致性：在笔记本电脑上运行与在云中运行相同。</li>\n<li>云和操作系统分发可移植性：在Ubuntu，RHEL，CoreOS，本地，阿里云，腾讯云和其他任何地方都可以运行。</li>\n<li>以应用程序为中心的管理：提高在虚拟硬件上运行OS的抽象级别，以及使用逻辑资源在OS上运行应用程序。</li>\n<li>资源隔离与利用：可预测的应用程序性能，高效率和高密度。</li>\n</ul>\n<h3 id=\"为什么需要kubernetes-以及用它能做什么\"><a class=\"markdownIt-Anchor\" href=\"#为什么需要kubernetes-以及用它能做什么\"></a> 为什么需要kubernetes 以及用它能做什么？</h3>\n<p>在生产环境中，您需要管理运行应用程序的容器并确保没有停机时间。例如，如果容器发生故障，则需要启动另一个容器，添加负载均衡等一系列动作。如果这些直接交给一个系统去处理，会不会更高效和便捷？</p>\n<p>kubernetes 就是很好解决了包含以上所说各种问题的系统 ！Kubernetes为您提供了一个弹性运行分布式系统的框架。它可以管理应用的扩展，故障转移，负载均衡等。例如，Kubernetes可以轻松管理应用系统的canary发布。k8s 提供如下有用特性：</p>\n<ul>\n<li><strong>服务发现和负载平衡</strong></li>\n</ul>\n<p>Kubernetes可以使用内部DNS名称或使用自己的IP地址提供服务入口。如果容器的流量很高，Kubernetes能够负载均衡并分配网络流量，确保应用可以稳定提供服务。</p>\n<ul>\n<li><strong>存储编排</strong></li>\n</ul>\n<p>Kubernetes允许您自动安装您选择的存储系统，例如本地存储，公共云提供商等。</p>\n<ul>\n<li><strong>自动部署和回滚</strong></li>\n</ul>\n<p>您可以使用Kubernetes描述已部署容器的所需状态，并且可以控制速率将实际状态更改为所需状态。例如，您可以控制Kubernetes为您的deploy自动创建新容器，删除现有容器并将所有资源用于新容器。</p>\n<ul>\n<li><strong>自我修复与高可用</strong></li>\n</ul>\n<p>Kubernetes重新启动失败的容器，替换容器，杀死不响应用户定义的运行状况检查的容器，并且服务没有真正运行就绪前不会提前暴露给调用客户端。</p>\n<ul>\n<li><strong>密钥和配置管理</strong></li>\n</ul>\n<p>Kubernetes允许您存储和管理敏感信息，例如密码，OAuth令牌和ssh密钥。您可以部署和更新秘钥和应用程序配置，而无需重建容器镜像，也不会在应用程序中暴露秘钥。</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>云时代中的佼佼者k8s的系列高质量干货文章，其中包含基础概念、组件原理、基本使用、生态工具、以及生产中的最佳实践。</p>","more":"<h3 id=\"本篇前言\"><a class=\"markdownIt-Anchor\" href=\"#本篇前言\"></a> 本篇前言</h3>\n<p>在开源领域长期霸持数据中心核心地位非Linux莫属，但是随着云计算的崛起以及开源世界大公司不断加入诞生了新一代数据中心云操作系统k8s，可以毫不夸张的说k8s是开源世界一款伟大产品。</p>\n<h4 id=\"kubernetes-是什么\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes-是什么\"></a> kubernetes 是什么？</h4>\n<p>Kubernetes是一个可移植，可扩展的开源平台，用于管理容器化工作负载和服务，有助于声明性配置和自动化。它拥有庞大，快速发展的生态系统。Kubernetes服务，支持和工具广泛可用。</p>\n<p>Kubernetes这个名字源于希腊语，意思是舵手或飞行员。谷歌在2014年开放了Kubernetes项目.Kubernetes建立在谷歌拥有大量运行生产工作量的十五年经验的基础上，结合了社区中的最佳创意和实践。</p>\n<p><strong>IT应用运维变迁</strong></p>\n<p>透过IT应用运维的变迁，让我们来看看为什么Kubernetes如此有用和伟大。</p>\n<p>下一代数据中心云操作系统 kubernetes「容器云连载」</p>\n<p><strong>物理机部署时代</strong>： 早期，在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源浪费问题。例如，如果在物理服务器上运行多个应用程序，则可能存在一个应用程序占用大部分资源的情况，因此其他应用程序会受到影响。解决方案是在不同的物理服务器上运行不同应用程序。但是由于资源未得到充分利用，并且扩展性很差，企业维护许多物理服务器的成本很高。</p>\n<p><strong>虚拟化部署时代</strong>：为了解决资源利用率的问题，引入了虚拟化。它允许您在单个物理服务器的CPU上运行多个虚拟机（VM）。虚拟化允许应用程序在VM之间隔离，并提供一定程度的安全性，因为另一个应用程序无法随便访问另外一VM上运行应用程序的信息。</p>\n<p>虚拟化可以更好地利用物理服务器中的资源，也可以实现更好的可扩展性，快速添加或更新应用程序，降低硬件成本等等优点。</p>\n<p>每个VM都是在虚拟化硬件之上运行包含所有组件（包括其自己的操作系统）的完整操作系统。</p>\n<p><strong>容器部署时代</strong>：容器类似于VM，但它们属于轻量级虚拟化，隔离性相对宽松。多个应用程序容器之间共享宿主操作系统（OS）。与VM类似，容器具有自己的文件系统，CPU，内存，进程空间等。当它们与底层基础架构分离时，它们可以跨云和OS分发进行移植。</p>\n<p><strong>容器的优势</strong></p>\n<ul>\n<li>敏捷应用程序创建和部署：与VM映像使用相比，增加了容器镜像创建的简便性和效率。</li>\n<li>持续开发，集成和部署：通过快速简便的回滚（由于镜像不变性）提供可靠且频繁的容器镜像构建和部署。</li>\n<li>Dev和Ops关注点分离：在构建/发布时而不是部署时创建应用程序容器镜像，从而将应用程序与基础架构分离。</li>\n<li>开发，测试和生产的环境一致性：在笔记本电脑上运行与在云中运行相同。</li>\n<li>云和操作系统分发可移植性：在Ubuntu，RHEL，CoreOS，本地，阿里云，腾讯云和其他任何地方都可以运行。</li>\n<li>以应用程序为中心的管理：提高在虚拟硬件上运行OS的抽象级别，以及使用逻辑资源在OS上运行应用程序。</li>\n<li>资源隔离与利用：可预测的应用程序性能，高效率和高密度。</li>\n</ul>\n<h3 id=\"为什么需要kubernetes-以及用它能做什么\"><a class=\"markdownIt-Anchor\" href=\"#为什么需要kubernetes-以及用它能做什么\"></a> 为什么需要kubernetes 以及用它能做什么？</h3>\n<p>在生产环境中，您需要管理运行应用程序的容器并确保没有停机时间。例如，如果容器发生故障，则需要启动另一个容器，添加负载均衡等一系列动作。如果这些直接交给一个系统去处理，会不会更高效和便捷？</p>\n<p>kubernetes 就是很好解决了包含以上所说各种问题的系统 ！Kubernetes为您提供了一个弹性运行分布式系统的框架。它可以管理应用的扩展，故障转移，负载均衡等。例如，Kubernetes可以轻松管理应用系统的canary发布。k8s 提供如下有用特性：</p>\n<ul>\n<li><strong>服务发现和负载平衡</strong></li>\n</ul>\n<p>Kubernetes可以使用内部DNS名称或使用自己的IP地址提供服务入口。如果容器的流量很高，Kubernetes能够负载均衡并分配网络流量，确保应用可以稳定提供服务。</p>\n<ul>\n<li><strong>存储编排</strong></li>\n</ul>\n<p>Kubernetes允许您自动安装您选择的存储系统，例如本地存储，公共云提供商等。</p>\n<ul>\n<li><strong>自动部署和回滚</strong></li>\n</ul>\n<p>您可以使用Kubernetes描述已部署容器的所需状态，并且可以控制速率将实际状态更改为所需状态。例如，您可以控制Kubernetes为您的deploy自动创建新容器，删除现有容器并将所有资源用于新容器。</p>\n<ul>\n<li><strong>自我修复与高可用</strong></li>\n</ul>\n<p>Kubernetes重新启动失败的容器，替换容器，杀死不响应用户定义的运行状况检查的容器，并且服务没有真正运行就绪前不会提前暴露给调用客户端。</p>\n<ul>\n<li><strong>密钥和配置管理</strong></li>\n</ul>\n<p>Kubernetes允许您存储和管理敏感信息，例如密码，OAuth令牌和ssh密钥。您可以部署和更新秘钥和应用程序配置，而无需重建容器镜像，也不会在应用程序中暴露秘钥。</p>"},{"title":"jenkins 初始化无法拉取插件的解决办法","date":"2019-11-21T02:58:10.000Z","author":"Mayer Shi","_content":"\njenkins被很多互联网用于devops工具，同时jenkins拥有庞大的插件生态使其拥有强大的功能，但是拉取插件的时候遇到了下载不了的问题，通过配置国内插件镜像中心来解决。\n<!--more-->\n\n环境描述: 生产环境的jenkins 出现故障，删除jenkins应用的pod，使其重建，但是拉取的插件中心是updates.jenkins.io站点，这个站点突然无法访问。我们jenkins始终无法启动。jenkins的deploy会启动一个initcontainer来初始化配置以及拉取插件hpi文件。但是始终无法拉取成功。\n\n看到github中个解决方案，在jenkins的init容器中加了一个环境变量就可以从jenkins的镜像节点拉取完毕。\n\n环境变量是：\n\n```bash\nJENKINS_UC_DOWNLOAD: https://mirrors.tuna.tsinghua.edu.cn/jenkins/\n```\n同时改下配置文件：\n\njenkins/hudson.model.UpdateCenter.xml\n\n```bash\n<?xml version='1.1' encoding='UTF-8'?>\n<sites>\n  <site>\n    <id>default</id>\n    <url>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/current/update-center.json</url>\n  </site>\n</sites>\n```","source":"_posts/k8s-jenkins-ops.md","raw":"---\ntitle: jenkins 初始化无法拉取插件的解决办法\ndate: 2019-11-21 10:58:10\nauthor: \"Mayer Shi\"\ntags: [\"tools\"]\ncategories: [\"DevOps\"]\n---\n\njenkins被很多互联网用于devops工具，同时jenkins拥有庞大的插件生态使其拥有强大的功能，但是拉取插件的时候遇到了下载不了的问题，通过配置国内插件镜像中心来解决。\n<!--more-->\n\n环境描述: 生产环境的jenkins 出现故障，删除jenkins应用的pod，使其重建，但是拉取的插件中心是updates.jenkins.io站点，这个站点突然无法访问。我们jenkins始终无法启动。jenkins的deploy会启动一个initcontainer来初始化配置以及拉取插件hpi文件。但是始终无法拉取成功。\n\n看到github中个解决方案，在jenkins的init容器中加了一个环境变量就可以从jenkins的镜像节点拉取完毕。\n\n环境变量是：\n\n```bash\nJENKINS_UC_DOWNLOAD: https://mirrors.tuna.tsinghua.edu.cn/jenkins/\n```\n同时改下配置文件：\n\njenkins/hudson.model.UpdateCenter.xml\n\n```bash\n<?xml version='1.1' encoding='UTF-8'?>\n<sites>\n  <site>\n    <id>default</id>\n    <url>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/current/update-center.json</url>\n  </site>\n</sites>\n```","slug":"k8s-jenkins-ops","published":1,"updated":"2019-11-21T02:58:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoes000y24lvhce14bzl","content":"<p>jenkins被很多互联网用于devops工具，同时jenkins拥有庞大的插件生态使其拥有强大的功能，但是拉取插件的时候遇到了下载不了的问题，通过配置国内插件镜像中心来解决。</p>\n<a id=\"more\"></a>\n<p>环境描述: 生产环境的jenkins 出现故障，删除jenkins应用的pod，使其重建，但是拉取的插件中心是updates.jenkins.io站点，这个站点突然无法访问。我们jenkins始终无法启动。jenkins的deploy会启动一个initcontainer来初始化配置以及拉取插件hpi文件。但是始终无法拉取成功。</p>\n<p>看到github中个解决方案，在jenkins的init容器中加了一个环境变量就可以从jenkins的镜像节点拉取完毕。</p>\n<p>环境变量是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JENKINS_UC_DOWNLOAD: https://mirrors.tuna.tsinghua.edu.cn/jenkins/</span><br></pre></td></tr></table></figure>\n<p>同时改下配置文件：</p>\n<p>jenkins/hudson.model.UpdateCenter.xml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&#x27;1.1&#x27;</span> encoding=<span class=\"string\">&#x27;UTF-8&#x27;</span>?&gt;</span><br><span class=\"line\">&lt;sites&gt;</span><br><span class=\"line\">  &lt;site&gt;</span><br><span class=\"line\">    &lt;id&gt;default&lt;/id&gt;</span><br><span class=\"line\">    &lt;url&gt;https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/current/update-center.json&lt;/url&gt;</span><br><span class=\"line\">  &lt;/site&gt;</span><br><span class=\"line\">&lt;/sites&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>jenkins被很多互联网用于devops工具，同时jenkins拥有庞大的插件生态使其拥有强大的功能，但是拉取插件的时候遇到了下载不了的问题，通过配置国内插件镜像中心来解决。</p>","more":"<p>环境描述: 生产环境的jenkins 出现故障，删除jenkins应用的pod，使其重建，但是拉取的插件中心是updates.jenkins.io站点，这个站点突然无法访问。我们jenkins始终无法启动。jenkins的deploy会启动一个initcontainer来初始化配置以及拉取插件hpi文件。但是始终无法拉取成功。</p>\n<p>看到github中个解决方案，在jenkins的init容器中加了一个环境变量就可以从jenkins的镜像节点拉取完毕。</p>\n<p>环境变量是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JENKINS_UC_DOWNLOAD: https://mirrors.tuna.tsinghua.edu.cn/jenkins/</span><br></pre></td></tr></table></figure>\n<p>同时改下配置文件：</p>\n<p>jenkins/hudson.model.UpdateCenter.xml</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&#x27;1.1&#x27;</span> encoding=<span class=\"string\">&#x27;UTF-8&#x27;</span>?&gt;</span><br><span class=\"line\">&lt;sites&gt;</span><br><span class=\"line\">  &lt;site&gt;</span><br><span class=\"line\">    &lt;id&gt;default&lt;/id&gt;</span><br><span class=\"line\">    &lt;url&gt;https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/current/update-center.json&lt;/url&gt;</span><br><span class=\"line\">  &lt;/site&gt;</span><br><span class=\"line\">&lt;/sites&gt;</span><br></pre></td></tr></table></figure>"},{"title":"本地搭建kubernetes环境","date":"2019-12-20T03:27:45.000Z","author":"Mayer Shi","_content":"\n此篇文章主要是介绍如何通过minikube快速部署一个k8s环境用作学习和实验。我演示的机器是macOS，k8s版本是1.15.x 最新版本。无需翻墙哦。\n\n<!--more-->\n\n**条件准备**\n- 安装虚拟化软件virtualbox驱动\n```bash\nbrew cask install virtualbox \n```\n\n- 安装kubectl 客户端\n\n```bash\nbrew install kubernetes-cli\n```\n\n- 下载阿里云minikube\n```bash\ncurl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v1.2.0/minikube-darwin-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/\n```\n\n**开始搭建**\n\n- 启动minikube安装k8s 1.15.0 版本\n\n```bash\nminikube start --registry-mirror=https://registry.docker-cn.com --kubernetes-version v1.15.0\n```\n\n- 成果验证\n\n```bash\n# 查看节点\n$ kubectl get node\nNAME STATUS ROLES AGE VERSION\nminikube Ready master 10m v1.15.0\n\n# 查看kube-system ns 下的pod状态\n$ kubectl get pod -n kube-system\nNAME READY STATUS RESTARTS AGE\ncoredns-6967fb4995-9bplg 1/1 Running 0 10m\ncoredns-6967fb4995-9xn9t 1/1 Running 0 10m\netcd-minikube 1/1 Running 0 9m25s\nkube-addon-manager-minikube 1/1 Running 0 9m8s\nkube-apiserver-minikube 1/1 Running 0 9m24s\nkube-controller-manager-minikube 1/1 Running 0 9m21s\nkube-proxy-2gw65 1/1 Running 0 10m\nkube-scheduler-minikube 1/1 Running 0 9m39s\nstorage-provisioner 1/1 Running 0 10m\n\n```\n\n- 开启dashboard\n```bash\n$ minikube addons enable dashboard\n✅ dashboard was successfully enabled\n\n$ minikube dashboard\n```","source":"_posts/k8s-local-install.md","raw":"---\ntitle: 本地搭建kubernetes环境\ndate: 2019-12-20 11:27:45\nauthor: \"Mayer Shi\"\ntags: [\"kubernetes\"]\ncategories: [\"Container Cloud\"]\n---\n\n此篇文章主要是介绍如何通过minikube快速部署一个k8s环境用作学习和实验。我演示的机器是macOS，k8s版本是1.15.x 最新版本。无需翻墙哦。\n\n<!--more-->\n\n**条件准备**\n- 安装虚拟化软件virtualbox驱动\n```bash\nbrew cask install virtualbox \n```\n\n- 安装kubectl 客户端\n\n```bash\nbrew install kubernetes-cli\n```\n\n- 下载阿里云minikube\n```bash\ncurl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v1.2.0/minikube-darwin-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/\n```\n\n**开始搭建**\n\n- 启动minikube安装k8s 1.15.0 版本\n\n```bash\nminikube start --registry-mirror=https://registry.docker-cn.com --kubernetes-version v1.15.0\n```\n\n- 成果验证\n\n```bash\n# 查看节点\n$ kubectl get node\nNAME STATUS ROLES AGE VERSION\nminikube Ready master 10m v1.15.0\n\n# 查看kube-system ns 下的pod状态\n$ kubectl get pod -n kube-system\nNAME READY STATUS RESTARTS AGE\ncoredns-6967fb4995-9bplg 1/1 Running 0 10m\ncoredns-6967fb4995-9xn9t 1/1 Running 0 10m\netcd-minikube 1/1 Running 0 9m25s\nkube-addon-manager-minikube 1/1 Running 0 9m8s\nkube-apiserver-minikube 1/1 Running 0 9m24s\nkube-controller-manager-minikube 1/1 Running 0 9m21s\nkube-proxy-2gw65 1/1 Running 0 10m\nkube-scheduler-minikube 1/1 Running 0 9m39s\nstorage-provisioner 1/1 Running 0 10m\n\n```\n\n- 开启dashboard\n```bash\n$ minikube addons enable dashboard\n✅ dashboard was successfully enabled\n\n$ minikube dashboard\n```","slug":"k8s-local-install","published":1,"updated":"2019-12-20T03:27:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoet001024lvhn5fh90y","content":"<p>此篇文章主要是介绍如何通过minikube快速部署一个k8s环境用作学习和实验。我演示的机器是macOS，k8s版本是1.15.x 最新版本。无需翻墙哦。</p>\n<a id=\"more\"></a>\n<p><strong>条件准备</strong></p>\n<ul>\n<li>安装虚拟化软件virtualbox驱动</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install virtualbox </span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装kubectl 客户端</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install kubernetes-cli</span><br></pre></td></tr></table></figure>\n<ul>\n<li>下载阿里云minikube</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v1.2.0/minikube-darwin-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/<span class=\"built_in\">local</span>/bin/</span><br></pre></td></tr></table></figure>\n<p><strong>开始搭建</strong></p>\n<ul>\n<li>启动minikube安装k8s 1.15.0 版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minikube start --registry-mirror=https://registry.docker-cn.com --kubernetes-version v1.15.0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>成果验证</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看节点</span></span><br><span class=\"line\">$ kubectl get node</span><br><span class=\"line\">NAME STATUS ROLES AGE VERSION</span><br><span class=\"line\">minikube Ready master 10m v1.15.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看kube-system ns 下的pod状态</span></span><br><span class=\"line\">$ kubectl get pod -n kube-system</span><br><span class=\"line\">NAME READY STATUS RESTARTS AGE</span><br><span class=\"line\">coredns-6967fb4995-9bplg 1/1 Running 0 10m</span><br><span class=\"line\">coredns-6967fb4995-9xn9t 1/1 Running 0 10m</span><br><span class=\"line\">etcd-minikube 1/1 Running 0 9m25s</span><br><span class=\"line\">kube-addon-manager-minikube 1/1 Running 0 9m8s</span><br><span class=\"line\">kube-apiserver-minikube 1/1 Running 0 9m24s</span><br><span class=\"line\">kube-controller-manager-minikube 1/1 Running 0 9m21s</span><br><span class=\"line\">kube-proxy-2gw65 1/1 Running 0 10m</span><br><span class=\"line\">kube-scheduler-minikube 1/1 Running 0 9m39s</span><br><span class=\"line\">storage-provisioner 1/1 Running 0 10m</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>开启dashboard</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ minikube addons <span class=\"built_in\">enable</span> dashboard</span><br><span class=\"line\">✅ dashboard was successfully enabled</span><br><span class=\"line\"></span><br><span class=\"line\">$ minikube dashboard</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>此篇文章主要是介绍如何通过minikube快速部署一个k8s环境用作学习和实验。我演示的机器是macOS，k8s版本是1.15.x 最新版本。无需翻墙哦。</p>","more":"<p><strong>条件准备</strong></p>\n<ul>\n<li>安装虚拟化软件virtualbox驱动</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install virtualbox </span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装kubectl 客户端</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install kubernetes-cli</span><br></pre></td></tr></table></figure>\n<ul>\n<li>下载阿里云minikube</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v1.2.0/minikube-darwin-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/<span class=\"built_in\">local</span>/bin/</span><br></pre></td></tr></table></figure>\n<p><strong>开始搭建</strong></p>\n<ul>\n<li>启动minikube安装k8s 1.15.0 版本</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minikube start --registry-mirror=https://registry.docker-cn.com --kubernetes-version v1.15.0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>成果验证</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看节点</span></span><br><span class=\"line\">$ kubectl get node</span><br><span class=\"line\">NAME STATUS ROLES AGE VERSION</span><br><span class=\"line\">minikube Ready master 10m v1.15.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看kube-system ns 下的pod状态</span></span><br><span class=\"line\">$ kubectl get pod -n kube-system</span><br><span class=\"line\">NAME READY STATUS RESTARTS AGE</span><br><span class=\"line\">coredns-6967fb4995-9bplg 1/1 Running 0 10m</span><br><span class=\"line\">coredns-6967fb4995-9xn9t 1/1 Running 0 10m</span><br><span class=\"line\">etcd-minikube 1/1 Running 0 9m25s</span><br><span class=\"line\">kube-addon-manager-minikube 1/1 Running 0 9m8s</span><br><span class=\"line\">kube-apiserver-minikube 1/1 Running 0 9m24s</span><br><span class=\"line\">kube-controller-manager-minikube 1/1 Running 0 9m21s</span><br><span class=\"line\">kube-proxy-2gw65 1/1 Running 0 10m</span><br><span class=\"line\">kube-scheduler-minikube 1/1 Running 0 9m39s</span><br><span class=\"line\">storage-provisioner 1/1 Running 0 10m</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>开启dashboard</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ minikube addons <span class=\"built_in\">enable</span> dashboard</span><br><span class=\"line\">✅ dashboard was successfully enabled</span><br><span class=\"line\"></span><br><span class=\"line\">$ minikube dashboard</span><br></pre></td></tr></table></figure>"},{"title":"如何快速初始化 MacOS 开发环境","author":"Mayer Shi","date":"2020-09-20T12:25:23.000Z","draft":false,"_content":"\n很多开发者比较喜欢用MacBook作为生产力工具，对于新电脑可以快速配置下开发环境。\n\n<!--more-->\n\n# MacOS 开发者初始化工具\n\n**打开以及关闭隐藏目录**\n```bash\nshift + command + .\n```\n**安装开发工具**\n```bash\nxcode-select --install\n```\n**brew 工具使用**\n1. 安装brew工具\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" \n```\n2. brew 基本命令\n```bash\nbrew -h #查找命令\nbrew search #搜索软件\nbrew install #安装软件\nbrew uninstall #卸载软件\nbrew update #更新所有软件\nbrew upgrade #更新具体软件\nbrew list #显示安装软件\nbrew info / home# 查看软件信息：（home是打开软件的官网）\nbrew outdated #查看哪些软件需要更新\n```\n**oh my zsh 安装以及配置插件**\n1. 安装oh my zsh\n```bash\n$ sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n2. 安装autojump插件\n```bash\nbrew install autojump\n```\n3. 安装zsh-autosuggestion插件\n```bash\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions \n```\n4. 安装zsh-syntax-highlighting插件\n```bash\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n```\n5. 配置以及激活插件\n```bash\nvim ~/.zshrc # 添加选项\nplugins=(git autojump zsh-autosuggestions zsh-syntax-highlighting)  # 重启控制台\n```\n**oh my zsh 配置 powerlevel10k 主题**\n1. 安装 powerlevel10k\n```bash\ngit clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k\n\n# 配置方式 Set ZSH_THEME=\"powerlevel10k/powerlevel10k\" in ~/.zshrc.\n```\n2. 配置powerlevel10k\n```bash\np10k configure # 通过交互配置主题\n```\n\n**MacOS Hight Sierra清除DNS缓存**\n```bash\nsudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder;\n```\n\n**安装常用软件**\n```bash\nbrew cask install v2rayu\nbrew cask install shadowsocksx-ng\nbrew install redis\nbrew install helm\nbrew install kubernetes-cli\nbrew install mysql\nbrew cask install visual-studio-code\nbrew cask install typora\nbrew cask install iterm2\n```","source":"_posts/macos-init-env.md","raw":"---\ntitle: \"如何快速初始化 MacOS 开发环境\"\nauthor: \"Mayer Shi\"\ntags: [\"tools\"]\ncategories: [\"Tools\"]\ndate: 2020-09-20 20:25:23\ndraft: false\n---\n\n很多开发者比较喜欢用MacBook作为生产力工具，对于新电脑可以快速配置下开发环境。\n\n<!--more-->\n\n# MacOS 开发者初始化工具\n\n**打开以及关闭隐藏目录**\n```bash\nshift + command + .\n```\n**安装开发工具**\n```bash\nxcode-select --install\n```\n**brew 工具使用**\n1. 安装brew工具\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" \n```\n2. brew 基本命令\n```bash\nbrew -h #查找命令\nbrew search #搜索软件\nbrew install #安装软件\nbrew uninstall #卸载软件\nbrew update #更新所有软件\nbrew upgrade #更新具体软件\nbrew list #显示安装软件\nbrew info / home# 查看软件信息：（home是打开软件的官网）\nbrew outdated #查看哪些软件需要更新\n```\n**oh my zsh 安装以及配置插件**\n1. 安装oh my zsh\n```bash\n$ sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n2. 安装autojump插件\n```bash\nbrew install autojump\n```\n3. 安装zsh-autosuggestion插件\n```bash\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions \n```\n4. 安装zsh-syntax-highlighting插件\n```bash\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n```\n5. 配置以及激活插件\n```bash\nvim ~/.zshrc # 添加选项\nplugins=(git autojump zsh-autosuggestions zsh-syntax-highlighting)  # 重启控制台\n```\n**oh my zsh 配置 powerlevel10k 主题**\n1. 安装 powerlevel10k\n```bash\ngit clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k\n\n# 配置方式 Set ZSH_THEME=\"powerlevel10k/powerlevel10k\" in ~/.zshrc.\n```\n2. 配置powerlevel10k\n```bash\np10k configure # 通过交互配置主题\n```\n\n**MacOS Hight Sierra清除DNS缓存**\n```bash\nsudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder;\n```\n\n**安装常用软件**\n```bash\nbrew cask install v2rayu\nbrew cask install shadowsocksx-ng\nbrew install redis\nbrew install helm\nbrew install kubernetes-cli\nbrew install mysql\nbrew cask install visual-studio-code\nbrew cask install typora\nbrew cask install iterm2\n```","slug":"macos-init-env","published":1,"updated":"2020-09-20T12:25:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoev001524lvasp35w1o","content":"<p>很多开发者比较喜欢用MacBook作为生产力工具，对于新电脑可以快速配置下开发环境。</p>\n<a id=\"more\"></a>\n<h1 id=\"macos-开发者初始化工具\"><a class=\"markdownIt-Anchor\" href=\"#macos-开发者初始化工具\"></a> MacOS 开发者初始化工具</h1>\n<p><strong>打开以及关闭隐藏目录</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">shift</span> + <span class=\"built_in\">command</span> + .</span><br></pre></td></tr></table></figure>\n<p><strong>安装开发工具</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n<p><strong>brew 工具使用</strong></p>\n<ol>\n<li>安装brew工具</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span> </span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>brew 基本命令</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew -h <span class=\"comment\">#查找命令</span></span><br><span class=\"line\">brew search <span class=\"comment\">#搜索软件</span></span><br><span class=\"line\">brew install <span class=\"comment\">#安装软件</span></span><br><span class=\"line\">brew uninstall <span class=\"comment\">#卸载软件</span></span><br><span class=\"line\">brew update <span class=\"comment\">#更新所有软件</span></span><br><span class=\"line\">brew upgrade <span class=\"comment\">#更新具体软件</span></span><br><span class=\"line\">brew list <span class=\"comment\">#显示安装软件</span></span><br><span class=\"line\">brew info / home<span class=\"comment\"># 查看软件信息：（home是打开软件的官网）</span></span><br><span class=\"line\">brew outdated <span class=\"comment\">#查看哪些软件需要更新</span></span><br></pre></td></tr></table></figure>\n<p><strong>oh my zsh 安装以及配置插件</strong></p>\n<ol>\n<li>安装oh my zsh</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装autojump插件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install autojump</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>安装zsh-autosuggestion插件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class=\"variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions </span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>安装zsh-syntax-highlighting插件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>配置以及激活插件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.zshrc <span class=\"comment\"># 添加选项</span></span><br><span class=\"line\">plugins=(git autojump zsh-autosuggestions zsh-syntax-highlighting)  <span class=\"comment\"># 重启控制台</span></span><br></pre></td></tr></table></figure>\n<p><strong>oh my zsh 配置 powerlevel10k 主题</strong></p>\n<ol>\n<li>安装 powerlevel10k</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class=\"variable\">$&#123;ZSH_CUSTOM:-<span class=\"variable\">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置方式 Set ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot; in ~/.zshrc.</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置powerlevel10k</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p10k configure <span class=\"comment\"># 通过交互配置主题</span></span><br></pre></td></tr></table></figure>\n<p><strong>MacOS Hight Sierra清除DNS缓存</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder;</span><br></pre></td></tr></table></figure>\n<p><strong>安装常用软件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install v2rayu</span><br><span class=\"line\">brew cask install shadowsocksx-ng</span><br><span class=\"line\">brew install redis</span><br><span class=\"line\">brew install helm</span><br><span class=\"line\">brew install kubernetes-cli</span><br><span class=\"line\">brew install mysql</span><br><span class=\"line\">brew cask install visual-studio-code</span><br><span class=\"line\">brew cask install typora</span><br><span class=\"line\">brew cask install iterm2</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>很多开发者比较喜欢用MacBook作为生产力工具，对于新电脑可以快速配置下开发环境。</p>","more":"<h1 id=\"macos-开发者初始化工具\"><a class=\"markdownIt-Anchor\" href=\"#macos-开发者初始化工具\"></a> MacOS 开发者初始化工具</h1>\n<p><strong>打开以及关闭隐藏目录</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">shift</span> + <span class=\"built_in\">command</span> + .</span><br></pre></td></tr></table></figure>\n<p><strong>安装开发工具</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n<p><strong>brew 工具使用</strong></p>\n<ol>\n<li>安装brew工具</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span> </span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>brew 基本命令</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew -h <span class=\"comment\">#查找命令</span></span><br><span class=\"line\">brew search <span class=\"comment\">#搜索软件</span></span><br><span class=\"line\">brew install <span class=\"comment\">#安装软件</span></span><br><span class=\"line\">brew uninstall <span class=\"comment\">#卸载软件</span></span><br><span class=\"line\">brew update <span class=\"comment\">#更新所有软件</span></span><br><span class=\"line\">brew upgrade <span class=\"comment\">#更新具体软件</span></span><br><span class=\"line\">brew list <span class=\"comment\">#显示安装软件</span></span><br><span class=\"line\">brew info / home<span class=\"comment\"># 查看软件信息：（home是打开软件的官网）</span></span><br><span class=\"line\">brew outdated <span class=\"comment\">#查看哪些软件需要更新</span></span><br></pre></td></tr></table></figure>\n<p><strong>oh my zsh 安装以及配置插件</strong></p>\n<ol>\n<li>安装oh my zsh</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装autojump插件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install autojump</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>安装zsh-autosuggestion插件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class=\"variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions </span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>安装zsh-syntax-highlighting插件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>配置以及激活插件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.zshrc <span class=\"comment\"># 添加选项</span></span><br><span class=\"line\">plugins=(git autojump zsh-autosuggestions zsh-syntax-highlighting)  <span class=\"comment\"># 重启控制台</span></span><br></pre></td></tr></table></figure>\n<p><strong>oh my zsh 配置 powerlevel10k 主题</strong></p>\n<ol>\n<li>安装 powerlevel10k</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class=\"variable\">$&#123;ZSH_CUSTOM:-<span class=\"variable\">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置方式 Set ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot; in ~/.zshrc.</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置powerlevel10k</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p10k configure <span class=\"comment\"># 通过交互配置主题</span></span><br></pre></td></tr></table></figure>\n<p><strong>MacOS Hight Sierra清除DNS缓存</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder;</span><br></pre></td></tr></table></figure>\n<p><strong>安装常用软件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew cask install v2rayu</span><br><span class=\"line\">brew cask install shadowsocksx-ng</span><br><span class=\"line\">brew install redis</span><br><span class=\"line\">brew install helm</span><br><span class=\"line\">brew install kubernetes-cli</span><br><span class=\"line\">brew install mysql</span><br><span class=\"line\">brew cask install visual-studio-code</span><br><span class=\"line\">brew cask install typora</span><br><span class=\"line\">brew cask install iterm2</span><br></pre></td></tr></table></figure>"},{"title":"helm使用技巧篇","author":"Mayer Shi","date":"2019-01-03T04:23:50.000Z","draft":false,"_content":"\nhelm 的核心优点在于 charts 一次编写到处运行以及其版本跟踪的能力。本篇博文主要讲述 helm 在本地开发 charts 时的一些技巧，通过这些技巧可以大大增加 charts 的易用性以及扩展性。\n\n<!--more-->\n\n**针对 helm 篇的实践落地方案分为如下几个部分：**\n\n> - helm 基础理论篇\n> - helm 使用技巧篇\n> - 基础中间件服务运维篇\n> - 微服务应用版本管理篇\n> - 基于 jenkins + helm 的 CICD 方案\n> - Helm 实践趟坑篇\n> - 基于 Helm Istio Jenkins 灰度发布实践方案\n\n本篇博文是该系列博客中的第二篇文章**《helm 的使用技巧》**。社区以及官方文档大多提供的是针对单个服务的 charts 编写指导。对于有依赖关系的多个服务时也是通过子 charts 的方式来实现多服务组件部署，但是本质上还是一个 charts 一个服务。这对于动辄十来个组件的微服务架构应用来说，显然是不可取的方案。针对微服务应用场景，我们总结一些 helm 撰写 charts 的最佳实践。\n\n### debug 调试妙用\n\n**使用场景：**\n\n**helm** 应用发布工具一般很少单独使用，在企业中的应用一般都是作为 DevOps 工具链中的一环。我们在做基础服务运维的时候一般都应该遵循一个基本原则“**infra as code**”。这样可以确保基础服务的可控和可追溯性。为了避免 charts 在实际运行中出错，我们可以在本地写 charts 的时候通过 debug 的功能，在不生成具体 release 的情况下检查 charts 是否存在语法错误和内容错误。\n\n**实践总结：**\n\n使用 Debug 功能的前提需要一个 k8s 集群且本地 helm 能够连接上该集群。最佳实践是尽可能确保本地 k8s 环境能与测试以及生产环境保持一致，这样才能确保 charts 的兼容性。笔者就遇到过这样的问题，charts 中包含了阿里云的日志服务 yaml 模板，在本地 minikube 集群上使用 helm 工具 debug 的时候总是报错的情况。最后将本地的 helm 工具直接连接阿里云上的 k8s 集群上，才顺利 debug。\n\n```bash\nhelm install --dry-run --debug --name test tomcat\n[debug] Created tunnel using local port: '51358'\n\n[debug] SERVER: \"127.0.0.1:51358\"\n\n[debug] Original chart version: \"\"\n[debug] CHART PATH: /Users/mayershi/akd/charts/stable/tomcat\n\nNAME:   test\nREVISION: 1\nRELEASED: Sat Mar 16 12:49:23 2019\nCHART: tomcat-0.2.0\nUSER-SUPPLIED VALUES:\n{}\n\nCOMPUTED VALUES:\naffinity: {}\ndeploy:\n  directory: /usr/local/tomcat/webapps\nimage:\n  pullPolicy: IfNotPresent\n  pullSecrets: []\n  tomcat:\n    repository: tomcat\n    tag: \"7.0\"\n  webarchive:\n    repository: ananwaresystems/webarchive\n    tag: \"1.0\"\ningress:\n  annotations: {}\n  enabled: false\n  hosts:\n  - chart-example.local\n  path: /\n  tls: []\nlivenessProbe:\n  initialDelaySeconds: 60\n  path: /sample\n  periodSeconds: 30\nnodeSelector: {}\nreadinessProbe:\n  failureThreshold: 6\n  initialDelaySeconds: 60\n  path: /sample\n  periodSeconds: 30\nreplicaCount: 1\nresources: {}\nservice:\n  externalPort: 80\n  internalPort: 8080\n  name: http\n  type: LoadBalancer\ntolerations: []\n\nHOOKS:\nMANIFEST:\n\n---\n# Source: tomcat/templates/appsrv-svc.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: test-tomcat\n  labels:\n    app: tomcat\n    chart: tomcat-0.2.0\n    release: test\n    heritage: Tiller\nspec:\n  type: LoadBalancer\n  ports:\n    - port: 80\n      targetPort: 8080\n      protocol: TCP\n      name: http\n  selector:\n    app: tomcat\n    release: test\n---\n# Source: tomcat/templates/appsrv.yaml\napiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n  name: test-tomcat\n  labels:\n    app: tomcat\n    chart: tomcat-0.2.0\n    release: test\n    heritage: Tiller\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: tomcat\n      release: test\n  template:\n    metadata:\n      labels:\n        app: tomcat\n        release: test\n    spec:\n      volumes:\n        - name: app-volume\n          emptyDir: {}\n      initContainers:\n        - name: war\n          image: ananwaresystems/webarchive:1.0\n          imagePullPolicy: IfNotPresent\n          command:\n            - \"sh\"\n            - \"-c\"\n            - \"cp /*.war /app\"\n          volumeMounts:\n            - name: app-volume\n              mountPath: /app\n      containers:\n        - name: tomcat\n          image: tomcat:7.0\n          imagePullPolicy: IfNotPresent\n          volumeMounts:\n            - name: app-volume\n              mountPath: /usr/local/tomcat/webapps\n          ports:\n            - containerPort: 8080\n              hostPort: 8009\n          livenessProbe:\n            httpGet:\n              path: /sample\n              port: 8080\n            initialDelaySeconds: 60\n            periodSeconds: 30\n          readinessProbe:\n            httpGet:\n              path: /sample\n              port: 8080\n            initialDelaySeconds: 60\n            periodSeconds: 30\n            failureThreshold: 6\n          resources:\n            {}\n```\n\n### 多组件利器数组\n\n在社区以及一些其他同行的博客教程中一般都是单个服务单个 charts 的方式，但是这种对于采用了微服务架构的应用是有问题的。有很多的缺陷，比如： 不能对应用进行统一的版本管理；需要编写大量的 charts 效率不高。那么解决这个问就需要引入 helm 的控制结构。\n\n**helm 循环控制结构：**\n\nvalues.yaml 值文件部分示例内容。\n\n```yaml\ncontainers:\n  - name: app1\n    replicaCount: 2\n    image:\n      name: app1:1\n      repository: dockerhub.com\n      pullPolicy: Always\n\n    service:\n      type: ClusterIP\n      externalPort: 8080\n      internalPort: 8080\n      healthUrl: /token\n      managementPort: 8080\n\n    container:\n      spring: false\n      limitmemory: 256Mi\n      env: {}\n  - name: app2\n    replicaCount: 2\n    image:\n      name: app2:1\n      repository: dockerhub.com\n      pullPolicy: Always\n\n    service:\n      type: ClusterIP\n      externalPort: 12180\n      internalPort: 12180\n      healthUrl: \"/manage/status\"\n      managementPort: 12181\n\n    container:\n      memory: 2048Mi\n      limitmemory: 2048Mi\n      spring: true\n      hpa:\n        type: memory\n        value: 80\n      env:\n        - name: ALI_LOGSTORE\n          value: app2\n```\n\ndeploy 和 service 模板文件内容：\n\n```yaml\n{{- range $index, $container := .Values.containers }} // 由于helm是golang开发的所以，对于控制结构来说，他的循环控制结构和golang保持一致。通过这个循环控制结构可以将value值文件中的containers值下面的数组给遍历出来生成相应的deploy 和 service 的k8s的资源。\n---\napiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n  name: {{ $fullname }}-{{ $container.name }}\n  labels:\n    app: {{ $fullname }}-{{ $container.name }}\n    chart: {{ $chartname }}\n    release: {{ $root.Release.Name }}\n    heritage: {{ $root.Release.Service }}\nspec:\n  replicas: {{ $container.replicaCount }}\n  selector:\n    matchLabels:\n      app:  \"{{ $fullname }}-{{ $container.name }}\"\n      release: \"{{ $root.Release.Name }}\"\n  template:\n    metadata:\n      labels:\n        app: \"{{ $fullname }}-{{ $container.name }}\"\n        release: \"{{ $root.Release.Name }}\"\n    spec:\n      imagePullSecrets:\n        - name: aliyun-registry-secret\n      containers:\n      - name:  {{ $fullname }}-{{ $container.name }}\n        image: {{ $container.image.repository }}/{{ $container.image.name }}\n        imagePullPolicy: {{ $container.image.pullPolicy }}\n        ports:\n        - containerPort: {{ $container.service.internalPort }}\n        {{ if $container.service.healthUrl }}\n        livenessProbe:\n          httpGet:\n            path: {{ $container.service.healthUrl }}\n            port: {{ $container.service.managementPort }}\n          initialDelaySeconds: 60\n          timeoutSeconds: 10\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 5\n        readinessProbe:\n          httpGet:\n            path: {{ $container.service.healthUrl }}\n            port: {{ $container.service.managementPort }}\n          initialDelaySeconds: 60\n          timeoutSeconds: 10\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 5\n        {{ end }}\n        env:\n          - name: aliyun_logs_image_tags\n            value: docker-image={{ $container.image.repository }}/{{ $container.image.name }}\n          {{ if $container.container.spring }}\n          - name: JAVA_OPTIONS\n            value: >-\n              -XX:+UseG1GC\n              -XX:+HeapDumpOnOutOfMemoryError\n              -Duser.timezone=Asia/Hong_Kong\n              -Dspring.profiles.active={{ $root.Values.container.spring.profile }}\n          {{ end }}\n{{ if $container.container.env }}\n{{ toYaml $container.container.env | indent 10 }}\n{{ end }}\n        resources:\n        {{ if or $container.container.cpu $container.container.memory }}\n          requests:\n          {{ if $container.container.cpu }}\n            cpu: \"{{ $container.container.cpu }}\"\n          {{ end }}\n          {{ if $container.container.memory }}\n            memory: \"{{ $container.container.memory }}\"\n          {{ end }}\n        {{ end }}\n        {{ if or $container.container.limitcpu $container.container.limitmemory }}\n          limits:\n          {{ if $container.container.limitcpu }}\n            cpu: \"{{ $container.container.limitcpu }}\"\n          {{ end }}\n          {{ if $container.container.limitmemory }}\n            memory: \"{{ $container.container.limitmemory }}\"\n          {{ end }}\n        {{ end }}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: {{ $serviceprefix }}-{{ $container.name }}\n  labels:\n    app: {{ $name }}\n    chart: {{ $chartname }}\n    release: {{ $root.Release.Name }}\n    heritage: {{ $root.Release.Service }}\nspec:\n  type: {{ $container.service.type }}\n  ports:\n    - port: {{ $container.service.externalPort }}\n      targetPort: {{ $container.service.internalPort }}\n      protocol: TCP\n      name: {{ $fullname }}-{{ $container.name }}-http\n  selector:\n    app: {{ $fullname }}-{{ $container.name }}\n    release: {{ $root.Release.Name }}\n{{- end }}\n```\n\n将 values.yaml 值文件 和 deploy-server.yaml 模板文件通过 helm 渲染得出真正的 deploy 的 yaml 以及 service 的 yaml 文件。然后 k8s 接受到后，会生成相应的资源。\n\n### 组件个性化开关\n\n每个应用的配置以及运行状态是不一样的,比如: java 启动的参数，node 应用的启动环境变量等等，所以就涉及到应用个性化参数开关的问题，那么解决这个的方案就是 helm 的条件控制结构。\n**helm 条件控制结构**\n上面的实例文件中 containers 的数组的每个想内部存的是单个 deploy + service 的 value 值。从文件中可以看出差异部分。\n第一个服务组件的值文件 spring 的值是 false。\n\n```yaml\n```\n\n第二个服务组件的值文件 spring 的值是 true。\n\n```yaml\ncontainer:\n  memory: 2048Mi\n  limitmemory: 2048Mi\n  spring: true\n  hpa:\n    type: memory\n    value: 80\n  env:\n    - name: ALI_LOGSTORE\n      value: app2\n```\n\ndeploy-service.yaml 文件中关于这块的文件描述是这样的。\n\n```yaml\nenv:\n  - name: aliyun_logs_image_tags\n    value: docker-image={{ $container.image.repository }}/{{ $container.image.name }}\n  {{ if $container.container.spring }}\n  - name: JAVA_OPTIONS\n    value: >-\n      -XX:+UseG1GC\n      -XX:+HeapDumpOnOutOfMemoryError\n      -Duser.timezone=Asia/Hong_Kong\n      -Dspring.profiles.active={{ $root.Values.container.spring.profile }}\n  {{ end }}\n```\n\n运行结果就是当 spring 值是 true 的时候。env 的内容就会添加 Java 启动的环境变量参数。spring 值为 false 的时候就不会添加该环境变量。\n","source":"_posts/magic-of-helm.md","raw":"---\ntitle: \"helm使用技巧篇\"\nauthor: \"Mayer Shi\"\ntags: [\"helm\"]\ncategories: [\"Container Cloud\"]\ndate: 2019-01-03T20:23:50+08:00\ndraft: false\n---\n\nhelm 的核心优点在于 charts 一次编写到处运行以及其版本跟踪的能力。本篇博文主要讲述 helm 在本地开发 charts 时的一些技巧，通过这些技巧可以大大增加 charts 的易用性以及扩展性。\n\n<!--more-->\n\n**针对 helm 篇的实践落地方案分为如下几个部分：**\n\n> - helm 基础理论篇\n> - helm 使用技巧篇\n> - 基础中间件服务运维篇\n> - 微服务应用版本管理篇\n> - 基于 jenkins + helm 的 CICD 方案\n> - Helm 实践趟坑篇\n> - 基于 Helm Istio Jenkins 灰度发布实践方案\n\n本篇博文是该系列博客中的第二篇文章**《helm 的使用技巧》**。社区以及官方文档大多提供的是针对单个服务的 charts 编写指导。对于有依赖关系的多个服务时也是通过子 charts 的方式来实现多服务组件部署，但是本质上还是一个 charts 一个服务。这对于动辄十来个组件的微服务架构应用来说，显然是不可取的方案。针对微服务应用场景，我们总结一些 helm 撰写 charts 的最佳实践。\n\n### debug 调试妙用\n\n**使用场景：**\n\n**helm** 应用发布工具一般很少单独使用，在企业中的应用一般都是作为 DevOps 工具链中的一环。我们在做基础服务运维的时候一般都应该遵循一个基本原则“**infra as code**”。这样可以确保基础服务的可控和可追溯性。为了避免 charts 在实际运行中出错，我们可以在本地写 charts 的时候通过 debug 的功能，在不生成具体 release 的情况下检查 charts 是否存在语法错误和内容错误。\n\n**实践总结：**\n\n使用 Debug 功能的前提需要一个 k8s 集群且本地 helm 能够连接上该集群。最佳实践是尽可能确保本地 k8s 环境能与测试以及生产环境保持一致，这样才能确保 charts 的兼容性。笔者就遇到过这样的问题，charts 中包含了阿里云的日志服务 yaml 模板，在本地 minikube 集群上使用 helm 工具 debug 的时候总是报错的情况。最后将本地的 helm 工具直接连接阿里云上的 k8s 集群上，才顺利 debug。\n\n```bash\nhelm install --dry-run --debug --name test tomcat\n[debug] Created tunnel using local port: '51358'\n\n[debug] SERVER: \"127.0.0.1:51358\"\n\n[debug] Original chart version: \"\"\n[debug] CHART PATH: /Users/mayershi/akd/charts/stable/tomcat\n\nNAME:   test\nREVISION: 1\nRELEASED: Sat Mar 16 12:49:23 2019\nCHART: tomcat-0.2.0\nUSER-SUPPLIED VALUES:\n{}\n\nCOMPUTED VALUES:\naffinity: {}\ndeploy:\n  directory: /usr/local/tomcat/webapps\nimage:\n  pullPolicy: IfNotPresent\n  pullSecrets: []\n  tomcat:\n    repository: tomcat\n    tag: \"7.0\"\n  webarchive:\n    repository: ananwaresystems/webarchive\n    tag: \"1.0\"\ningress:\n  annotations: {}\n  enabled: false\n  hosts:\n  - chart-example.local\n  path: /\n  tls: []\nlivenessProbe:\n  initialDelaySeconds: 60\n  path: /sample\n  periodSeconds: 30\nnodeSelector: {}\nreadinessProbe:\n  failureThreshold: 6\n  initialDelaySeconds: 60\n  path: /sample\n  periodSeconds: 30\nreplicaCount: 1\nresources: {}\nservice:\n  externalPort: 80\n  internalPort: 8080\n  name: http\n  type: LoadBalancer\ntolerations: []\n\nHOOKS:\nMANIFEST:\n\n---\n# Source: tomcat/templates/appsrv-svc.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: test-tomcat\n  labels:\n    app: tomcat\n    chart: tomcat-0.2.0\n    release: test\n    heritage: Tiller\nspec:\n  type: LoadBalancer\n  ports:\n    - port: 80\n      targetPort: 8080\n      protocol: TCP\n      name: http\n  selector:\n    app: tomcat\n    release: test\n---\n# Source: tomcat/templates/appsrv.yaml\napiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n  name: test-tomcat\n  labels:\n    app: tomcat\n    chart: tomcat-0.2.0\n    release: test\n    heritage: Tiller\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: tomcat\n      release: test\n  template:\n    metadata:\n      labels:\n        app: tomcat\n        release: test\n    spec:\n      volumes:\n        - name: app-volume\n          emptyDir: {}\n      initContainers:\n        - name: war\n          image: ananwaresystems/webarchive:1.0\n          imagePullPolicy: IfNotPresent\n          command:\n            - \"sh\"\n            - \"-c\"\n            - \"cp /*.war /app\"\n          volumeMounts:\n            - name: app-volume\n              mountPath: /app\n      containers:\n        - name: tomcat\n          image: tomcat:7.0\n          imagePullPolicy: IfNotPresent\n          volumeMounts:\n            - name: app-volume\n              mountPath: /usr/local/tomcat/webapps\n          ports:\n            - containerPort: 8080\n              hostPort: 8009\n          livenessProbe:\n            httpGet:\n              path: /sample\n              port: 8080\n            initialDelaySeconds: 60\n            periodSeconds: 30\n          readinessProbe:\n            httpGet:\n              path: /sample\n              port: 8080\n            initialDelaySeconds: 60\n            periodSeconds: 30\n            failureThreshold: 6\n          resources:\n            {}\n```\n\n### 多组件利器数组\n\n在社区以及一些其他同行的博客教程中一般都是单个服务单个 charts 的方式，但是这种对于采用了微服务架构的应用是有问题的。有很多的缺陷，比如： 不能对应用进行统一的版本管理；需要编写大量的 charts 效率不高。那么解决这个问就需要引入 helm 的控制结构。\n\n**helm 循环控制结构：**\n\nvalues.yaml 值文件部分示例内容。\n\n```yaml\ncontainers:\n  - name: app1\n    replicaCount: 2\n    image:\n      name: app1:1\n      repository: dockerhub.com\n      pullPolicy: Always\n\n    service:\n      type: ClusterIP\n      externalPort: 8080\n      internalPort: 8080\n      healthUrl: /token\n      managementPort: 8080\n\n    container:\n      spring: false\n      limitmemory: 256Mi\n      env: {}\n  - name: app2\n    replicaCount: 2\n    image:\n      name: app2:1\n      repository: dockerhub.com\n      pullPolicy: Always\n\n    service:\n      type: ClusterIP\n      externalPort: 12180\n      internalPort: 12180\n      healthUrl: \"/manage/status\"\n      managementPort: 12181\n\n    container:\n      memory: 2048Mi\n      limitmemory: 2048Mi\n      spring: true\n      hpa:\n        type: memory\n        value: 80\n      env:\n        - name: ALI_LOGSTORE\n          value: app2\n```\n\ndeploy 和 service 模板文件内容：\n\n```yaml\n{{- range $index, $container := .Values.containers }} // 由于helm是golang开发的所以，对于控制结构来说，他的循环控制结构和golang保持一致。通过这个循环控制结构可以将value值文件中的containers值下面的数组给遍历出来生成相应的deploy 和 service 的k8s的资源。\n---\napiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n  name: {{ $fullname }}-{{ $container.name }}\n  labels:\n    app: {{ $fullname }}-{{ $container.name }}\n    chart: {{ $chartname }}\n    release: {{ $root.Release.Name }}\n    heritage: {{ $root.Release.Service }}\nspec:\n  replicas: {{ $container.replicaCount }}\n  selector:\n    matchLabels:\n      app:  \"{{ $fullname }}-{{ $container.name }}\"\n      release: \"{{ $root.Release.Name }}\"\n  template:\n    metadata:\n      labels:\n        app: \"{{ $fullname }}-{{ $container.name }}\"\n        release: \"{{ $root.Release.Name }}\"\n    spec:\n      imagePullSecrets:\n        - name: aliyun-registry-secret\n      containers:\n      - name:  {{ $fullname }}-{{ $container.name }}\n        image: {{ $container.image.repository }}/{{ $container.image.name }}\n        imagePullPolicy: {{ $container.image.pullPolicy }}\n        ports:\n        - containerPort: {{ $container.service.internalPort }}\n        {{ if $container.service.healthUrl }}\n        livenessProbe:\n          httpGet:\n            path: {{ $container.service.healthUrl }}\n            port: {{ $container.service.managementPort }}\n          initialDelaySeconds: 60\n          timeoutSeconds: 10\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 5\n        readinessProbe:\n          httpGet:\n            path: {{ $container.service.healthUrl }}\n            port: {{ $container.service.managementPort }}\n          initialDelaySeconds: 60\n          timeoutSeconds: 10\n          periodSeconds: 30\n          successThreshold: 1\n          failureThreshold: 5\n        {{ end }}\n        env:\n          - name: aliyun_logs_image_tags\n            value: docker-image={{ $container.image.repository }}/{{ $container.image.name }}\n          {{ if $container.container.spring }}\n          - name: JAVA_OPTIONS\n            value: >-\n              -XX:+UseG1GC\n              -XX:+HeapDumpOnOutOfMemoryError\n              -Duser.timezone=Asia/Hong_Kong\n              -Dspring.profiles.active={{ $root.Values.container.spring.profile }}\n          {{ end }}\n{{ if $container.container.env }}\n{{ toYaml $container.container.env | indent 10 }}\n{{ end }}\n        resources:\n        {{ if or $container.container.cpu $container.container.memory }}\n          requests:\n          {{ if $container.container.cpu }}\n            cpu: \"{{ $container.container.cpu }}\"\n          {{ end }}\n          {{ if $container.container.memory }}\n            memory: \"{{ $container.container.memory }}\"\n          {{ end }}\n        {{ end }}\n        {{ if or $container.container.limitcpu $container.container.limitmemory }}\n          limits:\n          {{ if $container.container.limitcpu }}\n            cpu: \"{{ $container.container.limitcpu }}\"\n          {{ end }}\n          {{ if $container.container.limitmemory }}\n            memory: \"{{ $container.container.limitmemory }}\"\n          {{ end }}\n        {{ end }}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: {{ $serviceprefix }}-{{ $container.name }}\n  labels:\n    app: {{ $name }}\n    chart: {{ $chartname }}\n    release: {{ $root.Release.Name }}\n    heritage: {{ $root.Release.Service }}\nspec:\n  type: {{ $container.service.type }}\n  ports:\n    - port: {{ $container.service.externalPort }}\n      targetPort: {{ $container.service.internalPort }}\n      protocol: TCP\n      name: {{ $fullname }}-{{ $container.name }}-http\n  selector:\n    app: {{ $fullname }}-{{ $container.name }}\n    release: {{ $root.Release.Name }}\n{{- end }}\n```\n\n将 values.yaml 值文件 和 deploy-server.yaml 模板文件通过 helm 渲染得出真正的 deploy 的 yaml 以及 service 的 yaml 文件。然后 k8s 接受到后，会生成相应的资源。\n\n### 组件个性化开关\n\n每个应用的配置以及运行状态是不一样的,比如: java 启动的参数，node 应用的启动环境变量等等，所以就涉及到应用个性化参数开关的问题，那么解决这个的方案就是 helm 的条件控制结构。\n**helm 条件控制结构**\n上面的实例文件中 containers 的数组的每个想内部存的是单个 deploy + service 的 value 值。从文件中可以看出差异部分。\n第一个服务组件的值文件 spring 的值是 false。\n\n```yaml\n```\n\n第二个服务组件的值文件 spring 的值是 true。\n\n```yaml\ncontainer:\n  memory: 2048Mi\n  limitmemory: 2048Mi\n  spring: true\n  hpa:\n    type: memory\n    value: 80\n  env:\n    - name: ALI_LOGSTORE\n      value: app2\n```\n\ndeploy-service.yaml 文件中关于这块的文件描述是这样的。\n\n```yaml\nenv:\n  - name: aliyun_logs_image_tags\n    value: docker-image={{ $container.image.repository }}/{{ $container.image.name }}\n  {{ if $container.container.spring }}\n  - name: JAVA_OPTIONS\n    value: >-\n      -XX:+UseG1GC\n      -XX:+HeapDumpOnOutOfMemoryError\n      -Duser.timezone=Asia/Hong_Kong\n      -Dspring.profiles.active={{ $root.Values.container.spring.profile }}\n  {{ end }}\n```\n\n运行结果就是当 spring 值是 true 的时候。env 的内容就会添加 Java 启动的环境变量参数。spring 值为 false 的时候就不会添加该环境变量。\n","slug":"magic-of-helm","published":1,"updated":"2019-01-03T04:23:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoev001724lva84vdgs6","content":"<p>helm 的核心优点在于 charts 一次编写到处运行以及其版本跟踪的能力。本篇博文主要讲述 helm 在本地开发 charts 时的一些技巧，通过这些技巧可以大大增加 charts 的易用性以及扩展性。</p>\n<a id=\"more\"></a>\n<p><strong>针对 helm 篇的实践落地方案分为如下几个部分：</strong></p>\n<blockquote>\n<ul>\n<li>helm 基础理论篇</li>\n<li>helm 使用技巧篇</li>\n<li>基础中间件服务运维篇</li>\n<li>微服务应用版本管理篇</li>\n<li>基于 jenkins + helm 的 CICD 方案</li>\n<li>Helm 实践趟坑篇</li>\n<li>基于 Helm Istio Jenkins 灰度发布实践方案</li>\n</ul>\n</blockquote>\n<p>本篇博文是该系列博客中的第二篇文章**《helm 的使用技巧》**。社区以及官方文档大多提供的是针对单个服务的 charts 编写指导。对于有依赖关系的多个服务时也是通过子 charts 的方式来实现多服务组件部署，但是本质上还是一个 charts 一个服务。这对于动辄十来个组件的微服务架构应用来说，显然是不可取的方案。针对微服务应用场景，我们总结一些 helm 撰写 charts 的最佳实践。</p>\n<h3 id=\"debug-调试妙用\"><a class=\"markdownIt-Anchor\" href=\"#debug-调试妙用\"></a> debug 调试妙用</h3>\n<p><strong>使用场景：</strong></p>\n<p><strong>helm</strong> 应用发布工具一般很少单独使用，在企业中的应用一般都是作为 DevOps 工具链中的一环。我们在做基础服务运维的时候一般都应该遵循一个基本原则“<strong>infra as code</strong>”。这样可以确保基础服务的可控和可追溯性。为了避免 charts 在实际运行中出错，我们可以在本地写 charts 的时候通过 debug 的功能，在不生成具体 release 的情况下检查 charts 是否存在语法错误和内容错误。</p>\n<p><strong>实践总结：</strong></p>\n<p>使用 Debug 功能的前提需要一个 k8s 集群且本地 helm 能够连接上该集群。最佳实践是尽可能确保本地 k8s 环境能与测试以及生产环境保持一致，这样才能确保 charts 的兼容性。笔者就遇到过这样的问题，charts 中包含了阿里云的日志服务 yaml 模板，在本地 minikube 集群上使用 helm 工具 debug 的时候总是报错的情况。最后将本地的 helm 工具直接连接阿里云上的 k8s 集群上，才顺利 debug。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm install --dry-run --debug --name <span class=\"built_in\">test</span> tomcat</span><br><span class=\"line\">[debug] Created tunnel using <span class=\"built_in\">local</span> port: <span class=\"string\">&#x27;51358&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[debug] SERVER: <span class=\"string\">&quot;127.0.0.1:51358&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[debug] Original chart version: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">[debug] CHART PATH: /Users/mayershi/akd/charts/stable/tomcat</span><br><span class=\"line\"></span><br><span class=\"line\">NAME:   <span class=\"built_in\">test</span></span><br><span class=\"line\">REVISION: 1</span><br><span class=\"line\">RELEASED: Sat Mar 16 12:49:23 2019</span><br><span class=\"line\">CHART: tomcat-0.2.0</span><br><span class=\"line\">USER-SUPPLIED VALUES:</span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">COMPUTED VALUES:</span><br><span class=\"line\">affinity: &#123;&#125;</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  directory: /usr/<span class=\"built_in\">local</span>/tomcat/webapps</span><br><span class=\"line\">image:</span><br><span class=\"line\">  pullPolicy: IfNotPresent</span><br><span class=\"line\">  pullSecrets: []</span><br><span class=\"line\">  tomcat:</span><br><span class=\"line\">    repository: tomcat</span><br><span class=\"line\">    tag: <span class=\"string\">&quot;7.0&quot;</span></span><br><span class=\"line\">  webarchive:</span><br><span class=\"line\">    repository: ananwaresystems/webarchive</span><br><span class=\"line\">    tag: <span class=\"string\">&quot;1.0&quot;</span></span><br><span class=\"line\">ingress:</span><br><span class=\"line\">  annotations: &#123;&#125;</span><br><span class=\"line\">  enabled: <span class=\"literal\">false</span></span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - chart-example.local</span><br><span class=\"line\">  path: /</span><br><span class=\"line\">  tls: []</span><br><span class=\"line\">livenessProbe:</span><br><span class=\"line\">  initialDelaySeconds: 60</span><br><span class=\"line\">  path: /sample</span><br><span class=\"line\">  periodSeconds: 30</span><br><span class=\"line\">nodeSelector: &#123;&#125;</span><br><span class=\"line\">readinessProbe:</span><br><span class=\"line\">  failureThreshold: 6</span><br><span class=\"line\">  initialDelaySeconds: 60</span><br><span class=\"line\">  path: /sample</span><br><span class=\"line\">  periodSeconds: 30</span><br><span class=\"line\">replicaCount: 1</span><br><span class=\"line\">resources: &#123;&#125;</span><br><span class=\"line\">service:</span><br><span class=\"line\">  externalPort: 80</span><br><span class=\"line\">  internalPort: 8080</span><br><span class=\"line\">  name: http</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: LoadBalancer</span><br><span class=\"line\">tolerations: []</span><br><span class=\"line\"></span><br><span class=\"line\">HOOKS:</span><br><span class=\"line\">MANIFEST:</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"comment\"># Source: tomcat/templates/appsrv-svc.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: <span class=\"built_in\">test</span>-tomcat</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: tomcat</span><br><span class=\"line\">    chart: tomcat-0.2.0</span><br><span class=\"line\">    release: <span class=\"built_in\">test</span></span><br><span class=\"line\">    heritage: Tiller</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: LoadBalancer</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: 80</span><br><span class=\"line\">      targetPort: 8080</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">      name: http</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: tomcat</span><br><span class=\"line\">    release: <span class=\"built_in\">test</span></span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"comment\"># Source: tomcat/templates/appsrv.yaml</span></span><br><span class=\"line\">apiVersion: apps/v1beta2</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: <span class=\"built_in\">test</span>-tomcat</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: tomcat</span><br><span class=\"line\">    chart: tomcat-0.2.0</span><br><span class=\"line\">    release: <span class=\"built_in\">test</span></span><br><span class=\"line\">    heritage: Tiller</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: tomcat</span><br><span class=\"line\">      release: <span class=\"built_in\">test</span></span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: tomcat</span><br><span class=\"line\">        release: <span class=\"built_in\">test</span></span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - name: app-volume</span><br><span class=\"line\">          emptyDir: &#123;&#125;</span><br><span class=\"line\">      initContainers:</span><br><span class=\"line\">        - name: war</span><br><span class=\"line\">          image: ananwaresystems/webarchive:1.0</span><br><span class=\"line\">          imagePullPolicy: IfNotPresent</span><br><span class=\"line\">          <span class=\"built_in\">command</span>:</span><br><span class=\"line\">            - <span class=\"string\">&quot;sh&quot;</span></span><br><span class=\"line\">            - <span class=\"string\">&quot;-c&quot;</span></span><br><span class=\"line\">            - <span class=\"string\">&quot;cp /*.war /app&quot;</span></span><br><span class=\"line\">          volumeMounts:</span><br><span class=\"line\">            - name: app-volume</span><br><span class=\"line\">              mountPath: /app</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">        - name: tomcat</span><br><span class=\"line\">          image: tomcat:7.0</span><br><span class=\"line\">          imagePullPolicy: IfNotPresent</span><br><span class=\"line\">          volumeMounts:</span><br><span class=\"line\">            - name: app-volume</span><br><span class=\"line\">              mountPath: /usr/<span class=\"built_in\">local</span>/tomcat/webapps</span><br><span class=\"line\">          ports:</span><br><span class=\"line\">            - containerPort: 8080</span><br><span class=\"line\">              hostPort: 8009</span><br><span class=\"line\">          livenessProbe:</span><br><span class=\"line\">            httpGet:</span><br><span class=\"line\">              path: /sample</span><br><span class=\"line\">              port: 8080</span><br><span class=\"line\">            initialDelaySeconds: 60</span><br><span class=\"line\">            periodSeconds: 30</span><br><span class=\"line\">          readinessProbe:</span><br><span class=\"line\">            httpGet:</span><br><span class=\"line\">              path: /sample</span><br><span class=\"line\">              port: 8080</span><br><span class=\"line\">            initialDelaySeconds: 60</span><br><span class=\"line\">            periodSeconds: 30</span><br><span class=\"line\">            failureThreshold: 6</span><br><span class=\"line\">          resources:</span><br><span class=\"line\">            &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多组件利器数组\"><a class=\"markdownIt-Anchor\" href=\"#多组件利器数组\"></a> 多组件利器数组</h3>\n<p>在社区以及一些其他同行的博客教程中一般都是单个服务单个 charts 的方式，但是这种对于采用了微服务架构的应用是有问题的。有很多的缺陷，比如： 不能对应用进行统一的版本管理；需要编写大量的 charts 效率不高。那么解决这个问就需要引入 helm 的控制结构。</p>\n<p><strong>helm 循环控制结构：</strong></p>\n<p>values.yaml 值文件部分示例内容。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">app1</span></span><br><span class=\"line\">    <span class=\"attr\">replicaCount:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">app1:1</span></span><br><span class=\"line\">      <span class=\"attr\">repository:</span> <span class=\"string\">dockerhub.com</span></span><br><span class=\"line\">      <span class=\"attr\">pullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">service:</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">      <span class=\"attr\">externalPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">internalPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">healthUrl:</span> <span class=\"string\">/token</span></span><br><span class=\"line\">      <span class=\"attr\">managementPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">container:</span></span><br><span class=\"line\">      <span class=\"attr\">spring:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">limitmemory:</span> <span class=\"string\">256Mi</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">app2</span></span><br><span class=\"line\">    <span class=\"attr\">replicaCount:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">app2:1</span></span><br><span class=\"line\">      <span class=\"attr\">repository:</span> <span class=\"string\">dockerhub.com</span></span><br><span class=\"line\">      <span class=\"attr\">pullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">service:</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">      <span class=\"attr\">externalPort:</span> <span class=\"number\">12180</span></span><br><span class=\"line\">      <span class=\"attr\">internalPort:</span> <span class=\"number\">12180</span></span><br><span class=\"line\">      <span class=\"attr\">healthUrl:</span> <span class=\"string\">&quot;/manage/status&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">managementPort:</span> <span class=\"number\">12181</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">container:</span></span><br><span class=\"line\">      <span class=\"attr\">memory:</span> <span class=\"string\">2048Mi</span></span><br><span class=\"line\">      <span class=\"attr\">limitmemory:</span> <span class=\"string\">2048Mi</span></span><br><span class=\"line\">      <span class=\"attr\">spring:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">hpa:</span></span><br><span class=\"line\">        <span class=\"attr\">type:</span> <span class=\"string\">memory</span></span><br><span class=\"line\">        <span class=\"attr\">value:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ALI_LOGSTORE</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">app2</span></span><br></pre></td></tr></table></figure>\n<p>deploy 和 service 模板文件内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">range</span> <span class=\"string\">$index</span>, <span class=\"string\">$container</span> <span class=\"string\">:=</span> <span class=\"string\">.Values.containers</span> &#125;&#125; <span class=\"string\">//</span> <span class=\"string\">由于helm是golang开发的所以，对于控制结构来说，他的循环控制结构和golang保持一致。通过这个循环控制结构可以将value值文件中的containers值下面的数组给遍历出来生成相应的deploy</span> <span class=\"string\">和</span> <span class=\"string\">service</span> <span class=\"string\">的k8s的资源。</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1beta2</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> &#123;&#123; <span class=\"string\">$fullname</span> &#125;&#125;<span class=\"string\">-&#123;&#123;</span> <span class=\"string\">$container.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> &#123;&#123; <span class=\"string\">$fullname</span> &#125;&#125;<span class=\"string\">-&#123;&#123;</span> <span class=\"string\">$container.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">chart:</span> &#123;&#123; <span class=\"string\">$chartname</span> &#125;&#125;</span><br><span class=\"line\">    <span class=\"attr\">release:</span> &#123;&#123; <span class=\"string\">$root.Release.Name</span> &#125;&#125;</span><br><span class=\"line\">    <span class=\"attr\">heritage:</span> &#123;&#123; <span class=\"string\">$root.Release.Service</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> &#123;&#123; <span class=\"string\">$container.replicaCount</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span>  <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $fullname &#125;&#125;</span>-<span class=\"template-variable\">&#123;&#123; $container.name &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">release:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $root.Release.Name &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $fullname &#125;&#125;</span>-<span class=\"template-variable\">&#123;&#123; $container.name &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">release:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $root.Release.Name &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun-registry-secret</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span>  &#123;&#123; <span class=\"string\">$fullname</span> &#125;&#125;<span class=\"string\">-&#123;&#123;</span> <span class=\"string\">$container.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> &#123;&#123; <span class=\"string\">$container.image.repository</span> &#125;&#125;<span class=\"string\">/&#123;&#123;</span> <span class=\"string\">$container.image.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> &#123;&#123; <span class=\"string\">$container.image.pullPolicy</span> &#125;&#125;</span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> &#123;&#123; <span class=\"string\">$container.service.internalPort</span> &#125;&#125;</span><br><span class=\"line\">        &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.service.healthUrl</span> &#125;&#125;</span><br><span class=\"line\">        <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> &#123;&#123; <span class=\"string\">$container.service.healthUrl</span> &#125;&#125;</span><br><span class=\"line\">            <span class=\"attr\">port:</span> &#123;&#123; <span class=\"string\">$container.service.managementPort</span> &#125;&#125;</span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">          <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">failureThreshold:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> &#123;&#123; <span class=\"string\">$container.service.healthUrl</span> &#125;&#125;</span><br><span class=\"line\">            <span class=\"attr\">port:</span> &#123;&#123; <span class=\"string\">$container.service.managementPort</span> &#125;&#125;</span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">          <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">failureThreshold:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_image_tags</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">docker-image=&#123;&#123;</span> <span class=\"string\">$container.image.repository</span> <span class=\"string\">&#125;&#125;/&#123;&#123;</span> <span class=\"string\">$container.image.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.container.spring</span> &#125;&#125;</span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">JAVA_OPTIONS</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">              <span class=\"string\">-XX:+UseG1GC</span></span><br><span class=\"line\">              <span class=\"string\">-XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class=\"line\">              <span class=\"string\">-Duser.timezone=Asia/Hong_Kong</span></span><br><span class=\"line\">              <span class=\"string\">-Dspring.profiles.active=&#123;&#123;</span> <span class=\"string\">$root.Values.container.spring.profile</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">&#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.container.env</span> &#125;&#125;</span><br><span class=\"line\">&#123;&#123; <span class=\"string\">toYaml</span> <span class=\"string\">$container.container.env</span> <span class=\"string\">|</span> <span class=\"string\">indent</span> <span class=\"number\">10</span> &#125;&#125;</span><br><span class=\"line\">&#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">        &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">or</span> <span class=\"string\">$container.container.cpu</span> <span class=\"string\">$container.container.memory</span> &#125;&#125;</span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.container.cpu</span> &#125;&#125;</span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $container.container.cpu &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.container.memory</span> &#125;&#125;</span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $container.container.memory &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">        &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">        &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">or</span> <span class=\"string\">$container.container.limitcpu</span> <span class=\"string\">$container.container.limitmemory</span> &#125;&#125;</span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.container.limitcpu</span> &#125;&#125;</span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $container.container.limitcpu &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.container.limitmemory</span> &#125;&#125;</span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $container.container.limitmemory &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">        &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> &#123;&#123; <span class=\"string\">$serviceprefix</span> &#125;&#125;<span class=\"string\">-&#123;&#123;</span> <span class=\"string\">$container.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> &#123;&#123; <span class=\"string\">$name</span> &#125;&#125;</span><br><span class=\"line\">    <span class=\"attr\">chart:</span> &#123;&#123; <span class=\"string\">$chartname</span> &#125;&#125;</span><br><span class=\"line\">    <span class=\"attr\">release:</span> &#123;&#123; <span class=\"string\">$root.Release.Name</span> &#125;&#125;</span><br><span class=\"line\">    <span class=\"attr\">heritage:</span> &#123;&#123; <span class=\"string\">$root.Release.Service</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> &#123;&#123; <span class=\"string\">$container.service.type</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> &#123;&#123; <span class=\"string\">$container.service.externalPort</span> &#125;&#125;</span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> &#123;&#123; <span class=\"string\">$container.service.internalPort</span> &#125;&#125;</span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> &#123;&#123; <span class=\"string\">$fullname</span> &#125;&#125;<span class=\"string\">-&#123;&#123;</span> <span class=\"string\">$container.name</span> <span class=\"string\">&#125;&#125;-http</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> &#123;&#123; <span class=\"string\">$fullname</span> &#125;&#125;<span class=\"string\">-&#123;&#123;</span> <span class=\"string\">$container.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">release:</span> &#123;&#123; <span class=\"string\">$root.Release.Name</span> &#125;&#125;</span><br><span class=\"line\">&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>将 values.yaml 值文件 和 deploy-server.yaml 模板文件通过 helm 渲染得出真正的 deploy 的 yaml 以及 service 的 yaml 文件。然后 k8s 接受到后，会生成相应的资源。</p>\n<h3 id=\"组件个性化开关\"><a class=\"markdownIt-Anchor\" href=\"#组件个性化开关\"></a> 组件个性化开关</h3>\n<p>每个应用的配置以及运行状态是不一样的,比如: java 启动的参数，node 应用的启动环境变量等等，所以就涉及到应用个性化参数开关的问题，那么解决这个的方案就是 helm 的条件控制结构。<br />\n<strong>helm 条件控制结构</strong><br />\n上面的实例文件中 containers 的数组的每个想内部存的是单个 deploy + service 的 value 值。从文件中可以看出差异部分。<br />\n第一个服务组件的值文件 spring 的值是 false。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">第二个服务组件的值文件</span> <span class=\"string\">spring</span> <span class=\"string\">的值是</span> <span class=\"literal\">true</span><span class=\"string\">。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">```yaml</span></span><br><span class=\"line\"><span class=\"attr\">container:</span></span><br><span class=\"line\">  <span class=\"attr\">memory:</span> <span class=\"string\">2048Mi</span></span><br><span class=\"line\">  <span class=\"attr\">limitmemory:</span> <span class=\"string\">2048Mi</span></span><br><span class=\"line\">  <span class=\"attr\">spring:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">hpa:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">memory</span></span><br><span class=\"line\">    <span class=\"attr\">value:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">env:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ALI_LOGSTORE</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">app2</span></span><br></pre></td></tr></table></figure>\n<p>deploy-service.yaml 文件中关于这块的文件描述是这样的。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_image_tags</span></span><br><span class=\"line\">    <span class=\"attr\">value:</span> <span class=\"string\">docker-image=&#123;&#123;</span> <span class=\"string\">$container.image.repository</span> <span class=\"string\">&#125;&#125;/&#123;&#123;</span> <span class=\"string\">$container.image.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.container.spring</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">JAVA_OPTIONS</span></span><br><span class=\"line\">    <span class=\"attr\">value:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">      <span class=\"string\">-XX:+UseG1GC</span></span><br><span class=\"line\">      <span class=\"string\">-XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class=\"line\">      <span class=\"string\">-Duser.timezone=Asia/Hong_Kong</span></span><br><span class=\"line\">      <span class=\"string\">-Dspring.profiles.active=&#123;&#123;</span> <span class=\"string\">$root.Values.container.spring.profile</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果就是当 spring 值是 true 的时候。env 的内容就会添加 Java 启动的环境变量参数。spring 值为 false 的时候就不会添加该环境变量。</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>helm 的核心优点在于 charts 一次编写到处运行以及其版本跟踪的能力。本篇博文主要讲述 helm 在本地开发 charts 时的一些技巧，通过这些技巧可以大大增加 charts 的易用性以及扩展性。</p>","more":"<p><strong>针对 helm 篇的实践落地方案分为如下几个部分：</strong></p>\n<blockquote>\n<ul>\n<li>helm 基础理论篇</li>\n<li>helm 使用技巧篇</li>\n<li>基础中间件服务运维篇</li>\n<li>微服务应用版本管理篇</li>\n<li>基于 jenkins + helm 的 CICD 方案</li>\n<li>Helm 实践趟坑篇</li>\n<li>基于 Helm Istio Jenkins 灰度发布实践方案</li>\n</ul>\n</blockquote>\n<p>本篇博文是该系列博客中的第二篇文章**《helm 的使用技巧》**。社区以及官方文档大多提供的是针对单个服务的 charts 编写指导。对于有依赖关系的多个服务时也是通过子 charts 的方式来实现多服务组件部署，但是本质上还是一个 charts 一个服务。这对于动辄十来个组件的微服务架构应用来说，显然是不可取的方案。针对微服务应用场景，我们总结一些 helm 撰写 charts 的最佳实践。</p>\n<h3 id=\"debug-调试妙用\"><a class=\"markdownIt-Anchor\" href=\"#debug-调试妙用\"></a> debug 调试妙用</h3>\n<p><strong>使用场景：</strong></p>\n<p><strong>helm</strong> 应用发布工具一般很少单独使用，在企业中的应用一般都是作为 DevOps 工具链中的一环。我们在做基础服务运维的时候一般都应该遵循一个基本原则“<strong>infra as code</strong>”。这样可以确保基础服务的可控和可追溯性。为了避免 charts 在实际运行中出错，我们可以在本地写 charts 的时候通过 debug 的功能，在不生成具体 release 的情况下检查 charts 是否存在语法错误和内容错误。</p>\n<p><strong>实践总结：</strong></p>\n<p>使用 Debug 功能的前提需要一个 k8s 集群且本地 helm 能够连接上该集群。最佳实践是尽可能确保本地 k8s 环境能与测试以及生产环境保持一致，这样才能确保 charts 的兼容性。笔者就遇到过这样的问题，charts 中包含了阿里云的日志服务 yaml 模板，在本地 minikube 集群上使用 helm 工具 debug 的时候总是报错的情况。最后将本地的 helm 工具直接连接阿里云上的 k8s 集群上，才顺利 debug。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helm install --dry-run --debug --name <span class=\"built_in\">test</span> tomcat</span><br><span class=\"line\">[debug] Created tunnel using <span class=\"built_in\">local</span> port: <span class=\"string\">&#x27;51358&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[debug] SERVER: <span class=\"string\">&quot;127.0.0.1:51358&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[debug] Original chart version: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">[debug] CHART PATH: /Users/mayershi/akd/charts/stable/tomcat</span><br><span class=\"line\"></span><br><span class=\"line\">NAME:   <span class=\"built_in\">test</span></span><br><span class=\"line\">REVISION: 1</span><br><span class=\"line\">RELEASED: Sat Mar 16 12:49:23 2019</span><br><span class=\"line\">CHART: tomcat-0.2.0</span><br><span class=\"line\">USER-SUPPLIED VALUES:</span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">COMPUTED VALUES:</span><br><span class=\"line\">affinity: &#123;&#125;</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  directory: /usr/<span class=\"built_in\">local</span>/tomcat/webapps</span><br><span class=\"line\">image:</span><br><span class=\"line\">  pullPolicy: IfNotPresent</span><br><span class=\"line\">  pullSecrets: []</span><br><span class=\"line\">  tomcat:</span><br><span class=\"line\">    repository: tomcat</span><br><span class=\"line\">    tag: <span class=\"string\">&quot;7.0&quot;</span></span><br><span class=\"line\">  webarchive:</span><br><span class=\"line\">    repository: ananwaresystems/webarchive</span><br><span class=\"line\">    tag: <span class=\"string\">&quot;1.0&quot;</span></span><br><span class=\"line\">ingress:</span><br><span class=\"line\">  annotations: &#123;&#125;</span><br><span class=\"line\">  enabled: <span class=\"literal\">false</span></span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">  - chart-example.local</span><br><span class=\"line\">  path: /</span><br><span class=\"line\">  tls: []</span><br><span class=\"line\">livenessProbe:</span><br><span class=\"line\">  initialDelaySeconds: 60</span><br><span class=\"line\">  path: /sample</span><br><span class=\"line\">  periodSeconds: 30</span><br><span class=\"line\">nodeSelector: &#123;&#125;</span><br><span class=\"line\">readinessProbe:</span><br><span class=\"line\">  failureThreshold: 6</span><br><span class=\"line\">  initialDelaySeconds: 60</span><br><span class=\"line\">  path: /sample</span><br><span class=\"line\">  periodSeconds: 30</span><br><span class=\"line\">replicaCount: 1</span><br><span class=\"line\">resources: &#123;&#125;</span><br><span class=\"line\">service:</span><br><span class=\"line\">  externalPort: 80</span><br><span class=\"line\">  internalPort: 8080</span><br><span class=\"line\">  name: http</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: LoadBalancer</span><br><span class=\"line\">tolerations: []</span><br><span class=\"line\"></span><br><span class=\"line\">HOOKS:</span><br><span class=\"line\">MANIFEST:</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"comment\"># Source: tomcat/templates/appsrv-svc.yaml</span></span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: <span class=\"built_in\">test</span>-tomcat</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: tomcat</span><br><span class=\"line\">    chart: tomcat-0.2.0</span><br><span class=\"line\">    release: <span class=\"built_in\">test</span></span><br><span class=\"line\">    heritage: Tiller</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: LoadBalancer</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - port: 80</span><br><span class=\"line\">      targetPort: 8080</span><br><span class=\"line\">      protocol: TCP</span><br><span class=\"line\">      name: http</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: tomcat</span><br><span class=\"line\">    release: <span class=\"built_in\">test</span></span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"comment\"># Source: tomcat/templates/appsrv.yaml</span></span><br><span class=\"line\">apiVersion: apps/v1beta2</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: <span class=\"built_in\">test</span>-tomcat</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: tomcat</span><br><span class=\"line\">    chart: tomcat-0.2.0</span><br><span class=\"line\">    release: <span class=\"built_in\">test</span></span><br><span class=\"line\">    heritage: Tiller</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  replicas: 1</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: tomcat</span><br><span class=\"line\">      release: <span class=\"built_in\">test</span></span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: tomcat</span><br><span class=\"line\">        release: <span class=\"built_in\">test</span></span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">        - name: app-volume</span><br><span class=\"line\">          emptyDir: &#123;&#125;</span><br><span class=\"line\">      initContainers:</span><br><span class=\"line\">        - name: war</span><br><span class=\"line\">          image: ananwaresystems/webarchive:1.0</span><br><span class=\"line\">          imagePullPolicy: IfNotPresent</span><br><span class=\"line\">          <span class=\"built_in\">command</span>:</span><br><span class=\"line\">            - <span class=\"string\">&quot;sh&quot;</span></span><br><span class=\"line\">            - <span class=\"string\">&quot;-c&quot;</span></span><br><span class=\"line\">            - <span class=\"string\">&quot;cp /*.war /app&quot;</span></span><br><span class=\"line\">          volumeMounts:</span><br><span class=\"line\">            - name: app-volume</span><br><span class=\"line\">              mountPath: /app</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">        - name: tomcat</span><br><span class=\"line\">          image: tomcat:7.0</span><br><span class=\"line\">          imagePullPolicy: IfNotPresent</span><br><span class=\"line\">          volumeMounts:</span><br><span class=\"line\">            - name: app-volume</span><br><span class=\"line\">              mountPath: /usr/<span class=\"built_in\">local</span>/tomcat/webapps</span><br><span class=\"line\">          ports:</span><br><span class=\"line\">            - containerPort: 8080</span><br><span class=\"line\">              hostPort: 8009</span><br><span class=\"line\">          livenessProbe:</span><br><span class=\"line\">            httpGet:</span><br><span class=\"line\">              path: /sample</span><br><span class=\"line\">              port: 8080</span><br><span class=\"line\">            initialDelaySeconds: 60</span><br><span class=\"line\">            periodSeconds: 30</span><br><span class=\"line\">          readinessProbe:</span><br><span class=\"line\">            httpGet:</span><br><span class=\"line\">              path: /sample</span><br><span class=\"line\">              port: 8080</span><br><span class=\"line\">            initialDelaySeconds: 60</span><br><span class=\"line\">            periodSeconds: 30</span><br><span class=\"line\">            failureThreshold: 6</span><br><span class=\"line\">          resources:</span><br><span class=\"line\">            &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多组件利器数组\"><a class=\"markdownIt-Anchor\" href=\"#多组件利器数组\"></a> 多组件利器数组</h3>\n<p>在社区以及一些其他同行的博客教程中一般都是单个服务单个 charts 的方式，但是这种对于采用了微服务架构的应用是有问题的。有很多的缺陷，比如： 不能对应用进行统一的版本管理；需要编写大量的 charts 效率不高。那么解决这个问就需要引入 helm 的控制结构。</p>\n<p><strong>helm 循环控制结构：</strong></p>\n<p>values.yaml 值文件部分示例内容。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">app1</span></span><br><span class=\"line\">    <span class=\"attr\">replicaCount:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">app1:1</span></span><br><span class=\"line\">      <span class=\"attr\">repository:</span> <span class=\"string\">dockerhub.com</span></span><br><span class=\"line\">      <span class=\"attr\">pullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">service:</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">      <span class=\"attr\">externalPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">internalPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">healthUrl:</span> <span class=\"string\">/token</span></span><br><span class=\"line\">      <span class=\"attr\">managementPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">container:</span></span><br><span class=\"line\">      <span class=\"attr\">spring:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">limitmemory:</span> <span class=\"string\">256Mi</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">app2</span></span><br><span class=\"line\">    <span class=\"attr\">replicaCount:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">app2:1</span></span><br><span class=\"line\">      <span class=\"attr\">repository:</span> <span class=\"string\">dockerhub.com</span></span><br><span class=\"line\">      <span class=\"attr\">pullPolicy:</span> <span class=\"string\">Always</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">service:</span></span><br><span class=\"line\">      <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br><span class=\"line\">      <span class=\"attr\">externalPort:</span> <span class=\"number\">12180</span></span><br><span class=\"line\">      <span class=\"attr\">internalPort:</span> <span class=\"number\">12180</span></span><br><span class=\"line\">      <span class=\"attr\">healthUrl:</span> <span class=\"string\">&quot;/manage/status&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">managementPort:</span> <span class=\"number\">12181</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">container:</span></span><br><span class=\"line\">      <span class=\"attr\">memory:</span> <span class=\"string\">2048Mi</span></span><br><span class=\"line\">      <span class=\"attr\">limitmemory:</span> <span class=\"string\">2048Mi</span></span><br><span class=\"line\">      <span class=\"attr\">spring:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">hpa:</span></span><br><span class=\"line\">        <span class=\"attr\">type:</span> <span class=\"string\">memory</span></span><br><span class=\"line\">        <span class=\"attr\">value:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ALI_LOGSTORE</span></span><br><span class=\"line\">          <span class=\"attr\">value:</span> <span class=\"string\">app2</span></span><br></pre></td></tr></table></figure>\n<p>deploy 和 service 模板文件内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">range</span> <span class=\"string\">$index</span>, <span class=\"string\">$container</span> <span class=\"string\">:=</span> <span class=\"string\">.Values.containers</span> &#125;&#125; <span class=\"string\">//</span> <span class=\"string\">由于helm是golang开发的所以，对于控制结构来说，他的循环控制结构和golang保持一致。通过这个循环控制结构可以将value值文件中的containers值下面的数组给遍历出来生成相应的deploy</span> <span class=\"string\">和</span> <span class=\"string\">service</span> <span class=\"string\">的k8s的资源。</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1beta2</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> &#123;&#123; <span class=\"string\">$fullname</span> &#125;&#125;<span class=\"string\">-&#123;&#123;</span> <span class=\"string\">$container.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> &#123;&#123; <span class=\"string\">$fullname</span> &#125;&#125;<span class=\"string\">-&#123;&#123;</span> <span class=\"string\">$container.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">chart:</span> &#123;&#123; <span class=\"string\">$chartname</span> &#125;&#125;</span><br><span class=\"line\">    <span class=\"attr\">release:</span> &#123;&#123; <span class=\"string\">$root.Release.Name</span> &#125;&#125;</span><br><span class=\"line\">    <span class=\"attr\">heritage:</span> &#123;&#123; <span class=\"string\">$root.Release.Service</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> &#123;&#123; <span class=\"string\">$container.replicaCount</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span>  <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $fullname &#125;&#125;</span>-<span class=\"template-variable\">&#123;&#123; $container.name &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">release:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $root.Release.Name &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $fullname &#125;&#125;</span>-<span class=\"template-variable\">&#123;&#123; $container.name &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">release:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $root.Release.Name &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun-registry-secret</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span>  &#123;&#123; <span class=\"string\">$fullname</span> &#125;&#125;<span class=\"string\">-&#123;&#123;</span> <span class=\"string\">$container.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> &#123;&#123; <span class=\"string\">$container.image.repository</span> &#125;&#125;<span class=\"string\">/&#123;&#123;</span> <span class=\"string\">$container.image.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> &#123;&#123; <span class=\"string\">$container.image.pullPolicy</span> &#125;&#125;</span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> &#123;&#123; <span class=\"string\">$container.service.internalPort</span> &#125;&#125;</span><br><span class=\"line\">        &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.service.healthUrl</span> &#125;&#125;</span><br><span class=\"line\">        <span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> &#123;&#123; <span class=\"string\">$container.service.healthUrl</span> &#125;&#125;</span><br><span class=\"line\">            <span class=\"attr\">port:</span> &#123;&#123; <span class=\"string\">$container.service.managementPort</span> &#125;&#125;</span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">          <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">failureThreshold:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">          <span class=\"attr\">httpGet:</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> &#123;&#123; <span class=\"string\">$container.service.healthUrl</span> &#125;&#125;</span><br><span class=\"line\">            <span class=\"attr\">port:</span> &#123;&#123; <span class=\"string\">$container.service.managementPort</span> &#125;&#125;</span><br><span class=\"line\">          <span class=\"attr\">initialDelaySeconds:</span> <span class=\"number\">60</span></span><br><span class=\"line\">          <span class=\"attr\">timeoutSeconds:</span> <span class=\"number\">10</span></span><br><span class=\"line\">          <span class=\"attr\">periodSeconds:</span> <span class=\"number\">30</span></span><br><span class=\"line\">          <span class=\"attr\">successThreshold:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">failureThreshold:</span> <span class=\"number\">5</span></span><br><span class=\"line\">        &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_image_tags</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">docker-image=&#123;&#123;</span> <span class=\"string\">$container.image.repository</span> <span class=\"string\">&#125;&#125;/&#123;&#123;</span> <span class=\"string\">$container.image.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.container.spring</span> &#125;&#125;</span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">JAVA_OPTIONS</span></span><br><span class=\"line\">            <span class=\"attr\">value:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">              <span class=\"string\">-XX:+UseG1GC</span></span><br><span class=\"line\">              <span class=\"string\">-XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class=\"line\">              <span class=\"string\">-Duser.timezone=Asia/Hong_Kong</span></span><br><span class=\"line\">              <span class=\"string\">-Dspring.profiles.active=&#123;&#123;</span> <span class=\"string\">$root.Values.container.spring.profile</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">&#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.container.env</span> &#125;&#125;</span><br><span class=\"line\">&#123;&#123; <span class=\"string\">toYaml</span> <span class=\"string\">$container.container.env</span> <span class=\"string\">|</span> <span class=\"string\">indent</span> <span class=\"number\">10</span> &#125;&#125;</span><br><span class=\"line\">&#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">        &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">or</span> <span class=\"string\">$container.container.cpu</span> <span class=\"string\">$container.container.memory</span> &#125;&#125;</span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.container.cpu</span> &#125;&#125;</span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $container.container.cpu &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.container.memory</span> &#125;&#125;</span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $container.container.memory &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">        &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">        &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">or</span> <span class=\"string\">$container.container.limitcpu</span> <span class=\"string\">$container.container.limitmemory</span> &#125;&#125;</span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.container.limitcpu</span> &#125;&#125;</span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $container.container.limitcpu &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.container.limitmemory</span> &#125;&#125;</span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; $container.container.limitmemory &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">          &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\">        &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> &#123;&#123; <span class=\"string\">$serviceprefix</span> &#125;&#125;<span class=\"string\">-&#123;&#123;</span> <span class=\"string\">$container.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> &#123;&#123; <span class=\"string\">$name</span> &#125;&#125;</span><br><span class=\"line\">    <span class=\"attr\">chart:</span> &#123;&#123; <span class=\"string\">$chartname</span> &#125;&#125;</span><br><span class=\"line\">    <span class=\"attr\">release:</span> &#123;&#123; <span class=\"string\">$root.Release.Name</span> &#125;&#125;</span><br><span class=\"line\">    <span class=\"attr\">heritage:</span> &#123;&#123; <span class=\"string\">$root.Release.Service</span> &#125;&#125;</span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> &#123;&#123; <span class=\"string\">$container.service.type</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> &#123;&#123; <span class=\"string\">$container.service.externalPort</span> &#125;&#125;</span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> &#123;&#123; <span class=\"string\">$container.service.internalPort</span> &#125;&#125;</span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> &#123;&#123; <span class=\"string\">$fullname</span> &#125;&#125;<span class=\"string\">-&#123;&#123;</span> <span class=\"string\">$container.name</span> <span class=\"string\">&#125;&#125;-http</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> &#123;&#123; <span class=\"string\">$fullname</span> &#125;&#125;<span class=\"string\">-&#123;&#123;</span> <span class=\"string\">$container.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">release:</span> &#123;&#123; <span class=\"string\">$root.Release.Name</span> &#125;&#125;</span><br><span class=\"line\">&#123;&#123;<span class=\"bullet\">-</span> <span class=\"string\">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>将 values.yaml 值文件 和 deploy-server.yaml 模板文件通过 helm 渲染得出真正的 deploy 的 yaml 以及 service 的 yaml 文件。然后 k8s 接受到后，会生成相应的资源。</p>\n<h3 id=\"组件个性化开关\"><a class=\"markdownIt-Anchor\" href=\"#组件个性化开关\"></a> 组件个性化开关</h3>\n<p>每个应用的配置以及运行状态是不一样的,比如: java 启动的参数，node 应用的启动环境变量等等，所以就涉及到应用个性化参数开关的问题，那么解决这个的方案就是 helm 的条件控制结构。<br />\n<strong>helm 条件控制结构</strong><br />\n上面的实例文件中 containers 的数组的每个想内部存的是单个 deploy + service 的 value 值。从文件中可以看出差异部分。<br />\n第一个服务组件的值文件 spring 的值是 false。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">```</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">第二个服务组件的值文件</span> <span class=\"string\">spring</span> <span class=\"string\">的值是</span> <span class=\"literal\">true</span><span class=\"string\">。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">```yaml</span></span><br><span class=\"line\"><span class=\"attr\">container:</span></span><br><span class=\"line\">  <span class=\"attr\">memory:</span> <span class=\"string\">2048Mi</span></span><br><span class=\"line\">  <span class=\"attr\">limitmemory:</span> <span class=\"string\">2048Mi</span></span><br><span class=\"line\">  <span class=\"attr\">spring:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">hpa:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">memory</span></span><br><span class=\"line\">    <span class=\"attr\">value:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">env:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">ALI_LOGSTORE</span></span><br><span class=\"line\">      <span class=\"attr\">value:</span> <span class=\"string\">app2</span></span><br></pre></td></tr></table></figure>\n<p>deploy-service.yaml 文件中关于这块的文件描述是这样的。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">aliyun_logs_image_tags</span></span><br><span class=\"line\">    <span class=\"attr\">value:</span> <span class=\"string\">docker-image=&#123;&#123;</span> <span class=\"string\">$container.image.repository</span> <span class=\"string\">&#125;&#125;/&#123;&#123;</span> <span class=\"string\">$container.image.name</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  &#123;&#123; <span class=\"string\">if</span> <span class=\"string\">$container.container.spring</span> &#125;&#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">JAVA_OPTIONS</span></span><br><span class=\"line\">    <span class=\"attr\">value:</span> <span class=\"string\">&gt;-</span></span><br><span class=\"line\">      <span class=\"string\">-XX:+UseG1GC</span></span><br><span class=\"line\">      <span class=\"string\">-XX:+HeapDumpOnOutOfMemoryError</span></span><br><span class=\"line\">      <span class=\"string\">-Duser.timezone=Asia/Hong_Kong</span></span><br><span class=\"line\">      <span class=\"string\">-Dspring.profiles.active=&#123;&#123;</span> <span class=\"string\">$root.Values.container.spring.profile</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  &#123;&#123; <span class=\"string\">end</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果就是当 spring 值是 true 的时候。env 的内容就会添加 Java 启动的环境变量参数。spring 值为 false 的时候就不会添加该环境变量。</p>"},{"title":"基于阿里云OSS解决前端图片跨域的问题","author":"Mayer Shi","date":"2020-08-09T03:25:23.000Z","draft":false,"_content":"\n开发前端应用通常将图片等一些资源存放在一些对象存储中比如，阿里云OSS、腾讯OSS等，在oss的基础加上CDN进行资源分发。这种场景下前端开发一般都会遇到跨域问题，该篇博客记录下解决过程。\n<!--more-->\n\n\n1. 登录阿里云oss账号，创建bucket。\n\n2. 对bucket进行跨域设置，设置规则如下：\n\n\n![ouJYe.p](https://wx2.sbimg.cn/2020/08/09/ouJYe.png)\n\n[![ouLFD.png](https://wx1.sbimg.cn/2020/08/09/ouLFD.png)]\n\n3. 针对OSS设置CDN，然后在dns中添加CNAME记录。\n\n3. 设置完毕以后，我们在开发中总是遇到报错。\n\n```bash\nMixed Content: The page at 'https://www.mayershi.me/#/front/user/center' was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint 'http://as.test.com/file/20200802115932-deqw.png'. This request has been blocked; the content must be served over HTTPS.\n```\n\n同时浏览器还报“与此网站构建的连接不完全安全。”\n\n4. 解决方案就是，将CDN所有的http请求强制转化成https.\n\n","source":"_posts/oss-crossdomain-ssl.md","raw":"---\ntitle: \"基于阿里云OSS解决前端图片跨域的问题\"\nauthor: \"Mayer Shi\"\ntags: [\"前端跨域\"]\ncategories: [\"frontend\"]\ndate: 2020-08-09 11:25:23\ndraft: false\n---\n\n开发前端应用通常将图片等一些资源存放在一些对象存储中比如，阿里云OSS、腾讯OSS等，在oss的基础加上CDN进行资源分发。这种场景下前端开发一般都会遇到跨域问题，该篇博客记录下解决过程。\n<!--more-->\n\n\n1. 登录阿里云oss账号，创建bucket。\n\n2. 对bucket进行跨域设置，设置规则如下：\n\n\n![ouJYe.p](https://wx2.sbimg.cn/2020/08/09/ouJYe.png)\n\n[![ouLFD.png](https://wx1.sbimg.cn/2020/08/09/ouLFD.png)]\n\n3. 针对OSS设置CDN，然后在dns中添加CNAME记录。\n\n3. 设置完毕以后，我们在开发中总是遇到报错。\n\n```bash\nMixed Content: The page at 'https://www.mayershi.me/#/front/user/center' was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint 'http://as.test.com/file/20200802115932-deqw.png'. This request has been blocked; the content must be served over HTTPS.\n```\n\n同时浏览器还报“与此网站构建的连接不完全安全。”\n\n4. 解决方案就是，将CDN所有的http请求强制转化成https.\n\n","slug":"oss-crossdomain-ssl","published":1,"updated":"2020-08-09T03:25:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoex001b24lv33a5ceby","content":"<p>开发前端应用通常将图片等一些资源存放在一些对象存储中比如，阿里云OSS、腾讯OSS等，在oss的基础加上CDN进行资源分发。这种场景下前端开发一般都会遇到跨域问题，该篇博客记录下解决过程。</p>\n<a id=\"more\"></a>\n<ol>\n<li>\n<p>登录阿里云oss账号，创建bucket。</p>\n</li>\n<li>\n<p>对bucket进行跨域设置，设置规则如下：</p>\n</li>\n</ol>\n<p><img src=\"https://wx2.sbimg.cn/2020/08/09/ouJYe.png\" alt=\"ouJYe.p\" /></p>\n<p>[<img src=\"https://wx1.sbimg.cn/2020/08/09/ouLFD.png\" alt=\"ouLFD.png\" />]</p>\n<ol start=\"3\">\n<li>\n<p>针对OSS设置CDN，然后在dns中添加CNAME记录。</p>\n</li>\n<li>\n<p>设置完毕以后，我们在开发中总是遇到报错。</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mixed Content: The page at <span class=\"string\">&#x27;https://www.mayershi.me/#/front/user/center&#x27;</span> was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint <span class=\"string\">&#x27;http://as.test.com/file/20200802115932-deqw.png&#x27;</span>. This request has been blocked; the content must be served over HTTPS.</span><br></pre></td></tr></table></figure>\n<p>同时浏览器还报“与此网站构建的连接不完全安全。”</p>\n<ol start=\"4\">\n<li>解决方案就是，将CDN所有的http请求强制转化成https.</li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>开发前端应用通常将图片等一些资源存放在一些对象存储中比如，阿里云OSS、腾讯OSS等，在oss的基础加上CDN进行资源分发。这种场景下前端开发一般都会遇到跨域问题，该篇博客记录下解决过程。</p>","more":"<ol>\n<li>\n<p>登录阿里云oss账号，创建bucket。</p>\n</li>\n<li>\n<p>对bucket进行跨域设置，设置规则如下：</p>\n</li>\n</ol>\n<p><img src=\"https://wx2.sbimg.cn/2020/08/09/ouJYe.png\" alt=\"ouJYe.p\" /></p>\n<p>[<img src=\"https://wx1.sbimg.cn/2020/08/09/ouLFD.png\" alt=\"ouLFD.png\" />]</p>\n<ol start=\"3\">\n<li>\n<p>针对OSS设置CDN，然后在dns中添加CNAME记录。</p>\n</li>\n<li>\n<p>设置完毕以后，我们在开发中总是遇到报错。</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mixed Content: The page at <span class=\"string\">&#x27;https://www.mayershi.me/#/front/user/center&#x27;</span> was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint <span class=\"string\">&#x27;http://as.test.com/file/20200802115932-deqw.png&#x27;</span>. This request has been blocked; the content must be served over HTTPS.</span><br></pre></td></tr></table></figure>\n<p>同时浏览器还报“与此网站构建的连接不完全安全。”</p>\n<ol start=\"4\">\n<li>解决方案就是，将CDN所有的http请求强制转化成https.</li>\n</ol>"},{"title":"VMware Workstation Pro 16 内置容器工具vctl彻底替换docker（内含批量激活密钥）","author":"Mayer Shi","date":"2020-09-16T12:25:23.000Z","draft":false,"_content":"\n本篇文章为您介绍VMware本月刚发布的新版本PC桌面虚拟化软件VMware Workstation 16 Pro的容器新特性。\n\n<!--more-->\n\n\n## 新特性有哪些？\n\n* 支持容器和kubernetes\n  * 通过vctl命令行工具build、run、pull、push 管理容器镜像\n  * 支持通过KIND工具部署的kubernetes集群运行在workstation上。\n\n   **注意：** 要求Windows10 1809版本或者更高 \n\n* 虚拟机支持新的操作系统版本\n  * RHEL 8.2\n  * Debian 10.5\n  * Fedora 32\n  * CentOS 8.2\n  * SLE 15 SP2 GA\n  * FreeBSD 11.4\n  * ESXi 7.0\n\n等等新特性。\n\n\n\n## VMware 新出的容器工具 vctl\n\n### 使用说明\n\n```bash\nvctl - A CLI tool for the container engine powered by VMware Workstation\nvctl Highlights:\n• Build and run OCI containers.\n• Push and pull container images between remote registries & local storage.\n• Use a lightweight virtual machine (CRX VM) based on VMware Photon OS to host a container. Use 'vctl system config -h' to learn more.\n• Easy shell access into virtual machine that hosts container. See 'vctl execvm’.\n\nUSAGE:\n  vctl COMMAND [OPTIONS]\n\nCOMMANDS:\n  build                        Build a container image from a Dockerfile.\n  create                       Create a new container from a container image.\n  describe                     Show details of a container.\n  exec                         Execute a command within a running container.\n  execvm                       Execute a command within a running virtual machine that hosts container.\n  help                         Help about any command.\n  images                       List container images.\n  inspect                      Return low-level information on objects.\n  kind                         Get system environment ready for vctl-based KIND.\n  login                        Log in to a registry.\n  logout                       Log out from a registry.\n  ps                           List containers.\n  pull                         Pull a container image from a registry.\n  push                         Push a container image to a registry.\n  rm                           Remove one or more containers.\n  rmi                          Remove one or more container images.\n  run                          Run a new container from a container image.\n  start                        Start an existing container.\n  stop                         Stop a container.\n  system                       Manage the container engine.\n  tag                          Tag container images.\n  version                      Print the version of vctl.\n  volume                       Manage volumes.\n\nRun 'vctl COMMAND --help' for more information on a command.\n\nOPTIONS:\n  -h, --help   Help for vctl\n```\n\n### 小试牛刀\n\n1. 启动vctl命令行工具\n\n```bash\nvctl system start\n```\n2. 基本用法\n\n```bash\nvctl.exe run -d  -p 80:80 --name nginx --restart unless-stopped daocloud.io/nginx #创建容器\n\nvctl.exe ps # 查看运行中的容器。\n────    ─────                      ───────                   ──               ─────       ──────    ─────────────\nNAME    IMAGE                      COMMAND                   IP               PORTS       STATUS    CREATION TIME\n────    ─────                      ───────                   ──               ─────       ──────    ─────────────\nnginx   daocloud.io/nginx:latest   /docker-entrypoint.s...   192.168.197.10   80:80/tcp   running   2020-09-17T22:28:44+08:00\n\n```\n\n### 容器与虚拟机网络融合\n\n通过上面vctl ps 命令查看到容器的IP其实是属于VMware Workstation 安装时自动创建的虚拟网络VMnet8子网下。是不是发现了什么？\n\n对，就是容器和虚拟机之间的网络处于同一平面，虚拟机与容器在网络中地位同等。\n\n### 总结\n\n笔者认为稳态和敏态两种类型应用将在未来企业架构中长期并存的，所以VMware这种将容器和虚拟化高度融合的方案是非常巧妙的，容器满足互联网化敏态应用的高速迭代场景，虚拟化兼顾需要稳态的数据库等中间件以及容器化成本过高的老旧系统场景。\n\n### VMware Workstation Pro 16 许可证密钥，批量永久激活\n\n```bash\nZF3R0-FHED2-M80TY-8QYGC-NPKYF\nYF390-0HF8P-M81RQ-2DXQE-M2UT6\nZF71R-DMX85-08DQY-8YMNC-PPHV8\n```\n\n下载地址：\n\nhttps://n802.com/file/21152422-461565567","source":"_posts/vmwareworkstation_16_pro_license.md","raw":"---\ntitle: \"VMware Workstation Pro 16 内置容器工具vctl彻底替换docker（内含批量激活密钥）\"\nauthor: \"Mayer Shi\"\ntags: [\"tools\"]\ncategories: [\"Ops\"]\ndate: 2020-09-16 20:25:23\ndraft: false\n---\n\n本篇文章为您介绍VMware本月刚发布的新版本PC桌面虚拟化软件VMware Workstation 16 Pro的容器新特性。\n\n<!--more-->\n\n\n## 新特性有哪些？\n\n* 支持容器和kubernetes\n  * 通过vctl命令行工具build、run、pull、push 管理容器镜像\n  * 支持通过KIND工具部署的kubernetes集群运行在workstation上。\n\n   **注意：** 要求Windows10 1809版本或者更高 \n\n* 虚拟机支持新的操作系统版本\n  * RHEL 8.2\n  * Debian 10.5\n  * Fedora 32\n  * CentOS 8.2\n  * SLE 15 SP2 GA\n  * FreeBSD 11.4\n  * ESXi 7.0\n\n等等新特性。\n\n\n\n## VMware 新出的容器工具 vctl\n\n### 使用说明\n\n```bash\nvctl - A CLI tool for the container engine powered by VMware Workstation\nvctl Highlights:\n• Build and run OCI containers.\n• Push and pull container images between remote registries & local storage.\n• Use a lightweight virtual machine (CRX VM) based on VMware Photon OS to host a container. Use 'vctl system config -h' to learn more.\n• Easy shell access into virtual machine that hosts container. See 'vctl execvm’.\n\nUSAGE:\n  vctl COMMAND [OPTIONS]\n\nCOMMANDS:\n  build                        Build a container image from a Dockerfile.\n  create                       Create a new container from a container image.\n  describe                     Show details of a container.\n  exec                         Execute a command within a running container.\n  execvm                       Execute a command within a running virtual machine that hosts container.\n  help                         Help about any command.\n  images                       List container images.\n  inspect                      Return low-level information on objects.\n  kind                         Get system environment ready for vctl-based KIND.\n  login                        Log in to a registry.\n  logout                       Log out from a registry.\n  ps                           List containers.\n  pull                         Pull a container image from a registry.\n  push                         Push a container image to a registry.\n  rm                           Remove one or more containers.\n  rmi                          Remove one or more container images.\n  run                          Run a new container from a container image.\n  start                        Start an existing container.\n  stop                         Stop a container.\n  system                       Manage the container engine.\n  tag                          Tag container images.\n  version                      Print the version of vctl.\n  volume                       Manage volumes.\n\nRun 'vctl COMMAND --help' for more information on a command.\n\nOPTIONS:\n  -h, --help   Help for vctl\n```\n\n### 小试牛刀\n\n1. 启动vctl命令行工具\n\n```bash\nvctl system start\n```\n2. 基本用法\n\n```bash\nvctl.exe run -d  -p 80:80 --name nginx --restart unless-stopped daocloud.io/nginx #创建容器\n\nvctl.exe ps # 查看运行中的容器。\n────    ─────                      ───────                   ──               ─────       ──────    ─────────────\nNAME    IMAGE                      COMMAND                   IP               PORTS       STATUS    CREATION TIME\n────    ─────                      ───────                   ──               ─────       ──────    ─────────────\nnginx   daocloud.io/nginx:latest   /docker-entrypoint.s...   192.168.197.10   80:80/tcp   running   2020-09-17T22:28:44+08:00\n\n```\n\n### 容器与虚拟机网络融合\n\n通过上面vctl ps 命令查看到容器的IP其实是属于VMware Workstation 安装时自动创建的虚拟网络VMnet8子网下。是不是发现了什么？\n\n对，就是容器和虚拟机之间的网络处于同一平面，虚拟机与容器在网络中地位同等。\n\n### 总结\n\n笔者认为稳态和敏态两种类型应用将在未来企业架构中长期并存的，所以VMware这种将容器和虚拟化高度融合的方案是非常巧妙的，容器满足互联网化敏态应用的高速迭代场景，虚拟化兼顾需要稳态的数据库等中间件以及容器化成本过高的老旧系统场景。\n\n### VMware Workstation Pro 16 许可证密钥，批量永久激活\n\n```bash\nZF3R0-FHED2-M80TY-8QYGC-NPKYF\nYF390-0HF8P-M81RQ-2DXQE-M2UT6\nZF71R-DMX85-08DQY-8YMNC-PPHV8\n```\n\n下载地址：\n\nhttps://n802.com/file/21152422-461565567","slug":"vmwareworkstation_16_pro_license","published":1,"updated":"2020-09-16T12:25:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoey001f24lv6iqqhpoc","content":"<p>本篇文章为您介绍VMware本月刚发布的新版本PC桌面虚拟化软件VMware Workstation 16 Pro的容器新特性。</p>\n<a id=\"more\"></a>\n<h2 id=\"新特性有哪些\"><a class=\"markdownIt-Anchor\" href=\"#新特性有哪些\"></a> 新特性有哪些？</h2>\n<ul>\n<li>\n<p>支持容器和kubernetes</p>\n<ul>\n<li>通过vctl命令行工具build、run、pull、push 管理容器镜像</li>\n<li>支持通过KIND工具部署的kubernetes集群运行在workstation上。</li>\n</ul>\n<p><strong>注意：</strong> 要求Windows10 1809版本或者更高</p>\n</li>\n<li>\n<p>虚拟机支持新的操作系统版本</p>\n<ul>\n<li>RHEL 8.2</li>\n<li>Debian 10.5</li>\n<li>Fedora 32</li>\n<li>CentOS 8.2</li>\n<li>SLE 15 SP2 GA</li>\n<li>FreeBSD 11.4</li>\n<li>ESXi 7.0</li>\n</ul>\n</li>\n</ul>\n<p>等等新特性。</p>\n<h2 id=\"vmware-新出的容器工具-vctl\"><a class=\"markdownIt-Anchor\" href=\"#vmware-新出的容器工具-vctl\"></a> VMware 新出的容器工具 vctl</h2>\n<h3 id=\"使用说明\"><a class=\"markdownIt-Anchor\" href=\"#使用说明\"></a> 使用说明</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vctl - A CLI tool <span class=\"keyword\">for</span> the container engine powered by VMware Workstation</span><br><span class=\"line\">vctl Highlights:</span><br><span class=\"line\">• Build and run OCI containers.</span><br><span class=\"line\">• Push and pull container images between remote registries &amp; <span class=\"built_in\">local</span> storage.</span><br><span class=\"line\">• Use a lightweight virtual machine (CRX VM) based on VMware Photon OS to host a container. Use <span class=\"string\">&#x27;vctl system config -h&#x27;</span> to learn more.</span><br><span class=\"line\">• Easy shell access into virtual machine that hosts container. See <span class=\"string\">&#x27;vctl execvm’.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">USAGE:</span></span><br><span class=\"line\"><span class=\"string\">  vctl COMMAND [OPTIONS]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">COMMANDS:</span></span><br><span class=\"line\"><span class=\"string\">  build                        Build a container image from a Dockerfile.</span></span><br><span class=\"line\"><span class=\"string\">  create                       Create a new container from a container image.</span></span><br><span class=\"line\"><span class=\"string\">  describe                     Show details of a container.</span></span><br><span class=\"line\"><span class=\"string\">  exec                         Execute a command within a running container.</span></span><br><span class=\"line\"><span class=\"string\">  execvm                       Execute a command within a running virtual machine that hosts container.</span></span><br><span class=\"line\"><span class=\"string\">  help                         Help about any command.</span></span><br><span class=\"line\"><span class=\"string\">  images                       List container images.</span></span><br><span class=\"line\"><span class=\"string\">  inspect                      Return low-level information on objects.</span></span><br><span class=\"line\"><span class=\"string\">  kind                         Get system environment ready for vctl-based KIND.</span></span><br><span class=\"line\"><span class=\"string\">  login                        Log in to a registry.</span></span><br><span class=\"line\"><span class=\"string\">  logout                       Log out from a registry.</span></span><br><span class=\"line\"><span class=\"string\">  ps                           List containers.</span></span><br><span class=\"line\"><span class=\"string\">  pull                         Pull a container image from a registry.</span></span><br><span class=\"line\"><span class=\"string\">  push                         Push a container image to a registry.</span></span><br><span class=\"line\"><span class=\"string\">  rm                           Remove one or more containers.</span></span><br><span class=\"line\"><span class=\"string\">  rmi                          Remove one or more container images.</span></span><br><span class=\"line\"><span class=\"string\">  run                          Run a new container from a container image.</span></span><br><span class=\"line\"><span class=\"string\">  start                        Start an existing container.</span></span><br><span class=\"line\"><span class=\"string\">  stop                         Stop a container.</span></span><br><span class=\"line\"><span class=\"string\">  system                       Manage the container engine.</span></span><br><span class=\"line\"><span class=\"string\">  tag                          Tag container images.</span></span><br><span class=\"line\"><span class=\"string\">  version                      Print the version of vctl.</span></span><br><span class=\"line\"><span class=\"string\">  volume                       Manage volumes.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Run &#x27;</span>vctl COMMAND --<span class=\"built_in\">help</span><span class=\"string\">&#x27; for more information on a command.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">OPTIONS:</span></span><br><span class=\"line\"><span class=\"string\">  -h, --help   Help for vctl</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"小试牛刀\"><a class=\"markdownIt-Anchor\" href=\"#小试牛刀\"></a> 小试牛刀</h3>\n<ol>\n<li>启动vctl命令行工具</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vctl system start</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>基本用法</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vctl.exe run -d  -p 80:80 --name nginx --restart unless-stopped daocloud.io/nginx <span class=\"comment\">#创建容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">vctl.exe ps <span class=\"comment\"># 查看运行中的容器。</span></span><br><span class=\"line\">────    ─────                      ───────                   ──               ─────       ──────    ─────────────</span><br><span class=\"line\">NAME    IMAGE                      COMMAND                   IP               PORTS       STATUS    CREATION TIME</span><br><span class=\"line\">────    ─────                      ───────                   ──               ─────       ──────    ─────────────</span><br><span class=\"line\">nginx   daocloud.io/nginx:latest   /docker-entrypoint.s...   192.168.197.10   80:80/tcp   running   2020-09-17T22:28:44+08:00</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"容器与虚拟机网络融合\"><a class=\"markdownIt-Anchor\" href=\"#容器与虚拟机网络融合\"></a> 容器与虚拟机网络融合</h3>\n<p>通过上面vctl ps 命令查看到容器的IP其实是属于VMware Workstation 安装时自动创建的虚拟网络VMnet8子网下。是不是发现了什么？</p>\n<p>对，就是容器和虚拟机之间的网络处于同一平面，虚拟机与容器在网络中地位同等。</p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h3>\n<p>笔者认为稳态和敏态两种类型应用将在未来企业架构中长期并存的，所以VMware这种将容器和虚拟化高度融合的方案是非常巧妙的，容器满足互联网化敏态应用的高速迭代场景，虚拟化兼顾需要稳态的数据库等中间件以及容器化成本过高的老旧系统场景。</p>\n<h3 id=\"vmware-workstation-pro-16-许可证密钥批量永久激活\"><a class=\"markdownIt-Anchor\" href=\"#vmware-workstation-pro-16-许可证密钥批量永久激活\"></a> VMware Workstation Pro 16 许可证密钥，批量永久激活</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZF3R0-FHED2-M80TY-8QYGC-NPKYF</span><br><span class=\"line\">YF390-0HF8P-M81RQ-2DXQE-M2UT6</span><br><span class=\"line\">ZF71R-DMX85-08DQY-8YMNC-PPHV8</span><br></pre></td></tr></table></figure>\n<p>下载地址：</p>\n<p><a href=\"https://n802.com/file/21152422-461565567\">https://n802.com/file/21152422-461565567</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>本篇文章为您介绍VMware本月刚发布的新版本PC桌面虚拟化软件VMware Workstation 16 Pro的容器新特性。</p>","more":"<h2 id=\"新特性有哪些\"><a class=\"markdownIt-Anchor\" href=\"#新特性有哪些\"></a> 新特性有哪些？</h2>\n<ul>\n<li>\n<p>支持容器和kubernetes</p>\n<ul>\n<li>通过vctl命令行工具build、run、pull、push 管理容器镜像</li>\n<li>支持通过KIND工具部署的kubernetes集群运行在workstation上。</li>\n</ul>\n<p><strong>注意：</strong> 要求Windows10 1809版本或者更高</p>\n</li>\n<li>\n<p>虚拟机支持新的操作系统版本</p>\n<ul>\n<li>RHEL 8.2</li>\n<li>Debian 10.5</li>\n<li>Fedora 32</li>\n<li>CentOS 8.2</li>\n<li>SLE 15 SP2 GA</li>\n<li>FreeBSD 11.4</li>\n<li>ESXi 7.0</li>\n</ul>\n</li>\n</ul>\n<p>等等新特性。</p>\n<h2 id=\"vmware-新出的容器工具-vctl\"><a class=\"markdownIt-Anchor\" href=\"#vmware-新出的容器工具-vctl\"></a> VMware 新出的容器工具 vctl</h2>\n<h3 id=\"使用说明\"><a class=\"markdownIt-Anchor\" href=\"#使用说明\"></a> 使用说明</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vctl - A CLI tool <span class=\"keyword\">for</span> the container engine powered by VMware Workstation</span><br><span class=\"line\">vctl Highlights:</span><br><span class=\"line\">• Build and run OCI containers.</span><br><span class=\"line\">• Push and pull container images between remote registries &amp; <span class=\"built_in\">local</span> storage.</span><br><span class=\"line\">• Use a lightweight virtual machine (CRX VM) based on VMware Photon OS to host a container. Use <span class=\"string\">&#x27;vctl system config -h&#x27;</span> to learn more.</span><br><span class=\"line\">• Easy shell access into virtual machine that hosts container. See <span class=\"string\">&#x27;vctl execvm’.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">USAGE:</span></span><br><span class=\"line\"><span class=\"string\">  vctl COMMAND [OPTIONS]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">COMMANDS:</span></span><br><span class=\"line\"><span class=\"string\">  build                        Build a container image from a Dockerfile.</span></span><br><span class=\"line\"><span class=\"string\">  create                       Create a new container from a container image.</span></span><br><span class=\"line\"><span class=\"string\">  describe                     Show details of a container.</span></span><br><span class=\"line\"><span class=\"string\">  exec                         Execute a command within a running container.</span></span><br><span class=\"line\"><span class=\"string\">  execvm                       Execute a command within a running virtual machine that hosts container.</span></span><br><span class=\"line\"><span class=\"string\">  help                         Help about any command.</span></span><br><span class=\"line\"><span class=\"string\">  images                       List container images.</span></span><br><span class=\"line\"><span class=\"string\">  inspect                      Return low-level information on objects.</span></span><br><span class=\"line\"><span class=\"string\">  kind                         Get system environment ready for vctl-based KIND.</span></span><br><span class=\"line\"><span class=\"string\">  login                        Log in to a registry.</span></span><br><span class=\"line\"><span class=\"string\">  logout                       Log out from a registry.</span></span><br><span class=\"line\"><span class=\"string\">  ps                           List containers.</span></span><br><span class=\"line\"><span class=\"string\">  pull                         Pull a container image from a registry.</span></span><br><span class=\"line\"><span class=\"string\">  push                         Push a container image to a registry.</span></span><br><span class=\"line\"><span class=\"string\">  rm                           Remove one or more containers.</span></span><br><span class=\"line\"><span class=\"string\">  rmi                          Remove one or more container images.</span></span><br><span class=\"line\"><span class=\"string\">  run                          Run a new container from a container image.</span></span><br><span class=\"line\"><span class=\"string\">  start                        Start an existing container.</span></span><br><span class=\"line\"><span class=\"string\">  stop                         Stop a container.</span></span><br><span class=\"line\"><span class=\"string\">  system                       Manage the container engine.</span></span><br><span class=\"line\"><span class=\"string\">  tag                          Tag container images.</span></span><br><span class=\"line\"><span class=\"string\">  version                      Print the version of vctl.</span></span><br><span class=\"line\"><span class=\"string\">  volume                       Manage volumes.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Run &#x27;</span>vctl COMMAND --<span class=\"built_in\">help</span><span class=\"string\">&#x27; for more information on a command.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">OPTIONS:</span></span><br><span class=\"line\"><span class=\"string\">  -h, --help   Help for vctl</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"小试牛刀\"><a class=\"markdownIt-Anchor\" href=\"#小试牛刀\"></a> 小试牛刀</h3>\n<ol>\n<li>启动vctl命令行工具</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vctl system start</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>基本用法</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vctl.exe run -d  -p 80:80 --name nginx --restart unless-stopped daocloud.io/nginx <span class=\"comment\">#创建容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">vctl.exe ps <span class=\"comment\"># 查看运行中的容器。</span></span><br><span class=\"line\">────    ─────                      ───────                   ──               ─────       ──────    ─────────────</span><br><span class=\"line\">NAME    IMAGE                      COMMAND                   IP               PORTS       STATUS    CREATION TIME</span><br><span class=\"line\">────    ─────                      ───────                   ──               ─────       ──────    ─────────────</span><br><span class=\"line\">nginx   daocloud.io/nginx:latest   /docker-entrypoint.s...   192.168.197.10   80:80/tcp   running   2020-09-17T22:28:44+08:00</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"容器与虚拟机网络融合\"><a class=\"markdownIt-Anchor\" href=\"#容器与虚拟机网络融合\"></a> 容器与虚拟机网络融合</h3>\n<p>通过上面vctl ps 命令查看到容器的IP其实是属于VMware Workstation 安装时自动创建的虚拟网络VMnet8子网下。是不是发现了什么？</p>\n<p>对，就是容器和虚拟机之间的网络处于同一平面，虚拟机与容器在网络中地位同等。</p>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结</h3>\n<p>笔者认为稳态和敏态两种类型应用将在未来企业架构中长期并存的，所以VMware这种将容器和虚拟化高度融合的方案是非常巧妙的，容器满足互联网化敏态应用的高速迭代场景，虚拟化兼顾需要稳态的数据库等中间件以及容器化成本过高的老旧系统场景。</p>\n<h3 id=\"vmware-workstation-pro-16-许可证密钥批量永久激活\"><a class=\"markdownIt-Anchor\" href=\"#vmware-workstation-pro-16-许可证密钥批量永久激活\"></a> VMware Workstation Pro 16 许可证密钥，批量永久激活</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZF3R0-FHED2-M80TY-8QYGC-NPKYF</span><br><span class=\"line\">YF390-0HF8P-M81RQ-2DXQE-M2UT6</span><br><span class=\"line\">ZF71R-DMX85-08DQY-8YMNC-PPHV8</span><br></pre></td></tr></table></figure>\n<p>下载地址：</p>\n<p><a href=\"https://n802.com/file/21152422-461565567\">https://n802.com/file/21152422-461565567</a></p>"},{"title":"zoom 国际版视频会议软件屏蔽后解决办法","date":"2019-12-26T03:11:46.000Z","author":"Mayer Shi","_content":"\n前段时间zoom视频会议软件由于视频数据没法留存在中国，导致zoom被墙掉了。但是可以通过一种方式解决。\n\n<!--more-->\n\n### 修改本地hosts文件\n\n```bash\nsudo vim /etc/hosts\n\n221.122.88.132   zoom.us\n52.202.62.203   zoom.us\n52.202.62.241   zoom.us\n52.202.62.241   share.zoom.us\n52.202.62.203   share.zoom.us\n\n104.16.51.111   support.zoom.us\n104.16.52.111   support.zoom.us\n104.16.53.111   support.zoom.us\n104.16.54.111   support.zoom.us\n\n221.122.88.132   www.zoom.us\n221.122.88.132   www3.zoom.us\n221.122.88.132   google.zoom.us\n221.122.88.132   facebook.zoom.us\n221.122.88.132   log.zoom.us\n221.122.88.132   api.zoom.us\n221.122.88.132   launcher.zoom.us\n221.122.88.132   imauth.zoom.us\n221.122.88.132   static.zoom.us\n221.122.89.232   file-ia.zoom.us\n221.122.89.180   xmpp001.zoom.us\n221.122.89.180   xmpp002.zoom.us\n221.122.89.180   xmpp003.zoom.us\n221.122.89.180   xmpp004.zoom.us\n221.122.89.180   xmpp005.zoom.us\n221.122.89.180   xmpp006.zoom.us\n221.122.89.180   xmpp007.zoom.us\n221.122.89.180   xmpp008.zoom.us\n221.122.89.180   xmpp009.zoom.us\n221.122.89.180   xmpp010.zoom.us\n221.122.89.180   xmpp011.zoom.us\n221.122.89.180   xmpp012.zoom.us\n221.122.89.180   xmpp013.zoom.us\n221.122.89.180   xmpp014.zoom.us\n221.122.89.180   xmpp015.zoom.us\n221.122.89.231   xmppapi.zoom.us\n```\n\n### 验证是否可以访问\n\n浏览器输入： https://zoom.us","source":"_posts/zoom-not-connect.md","raw":"---\ntitle: zoom 国际版视频会议软件屏蔽后解决办法\ndate: 2019-12-26 11:11:46\nauthor: \"Mayer Shi\"\ntags: [\"zoom\"]\ncategories: [\"Tools\"]\n---\n\n前段时间zoom视频会议软件由于视频数据没法留存在中国，导致zoom被墙掉了。但是可以通过一种方式解决。\n\n<!--more-->\n\n### 修改本地hosts文件\n\n```bash\nsudo vim /etc/hosts\n\n221.122.88.132   zoom.us\n52.202.62.203   zoom.us\n52.202.62.241   zoom.us\n52.202.62.241   share.zoom.us\n52.202.62.203   share.zoom.us\n\n104.16.51.111   support.zoom.us\n104.16.52.111   support.zoom.us\n104.16.53.111   support.zoom.us\n104.16.54.111   support.zoom.us\n\n221.122.88.132   www.zoom.us\n221.122.88.132   www3.zoom.us\n221.122.88.132   google.zoom.us\n221.122.88.132   facebook.zoom.us\n221.122.88.132   log.zoom.us\n221.122.88.132   api.zoom.us\n221.122.88.132   launcher.zoom.us\n221.122.88.132   imauth.zoom.us\n221.122.88.132   static.zoom.us\n221.122.89.232   file-ia.zoom.us\n221.122.89.180   xmpp001.zoom.us\n221.122.89.180   xmpp002.zoom.us\n221.122.89.180   xmpp003.zoom.us\n221.122.89.180   xmpp004.zoom.us\n221.122.89.180   xmpp005.zoom.us\n221.122.89.180   xmpp006.zoom.us\n221.122.89.180   xmpp007.zoom.us\n221.122.89.180   xmpp008.zoom.us\n221.122.89.180   xmpp009.zoom.us\n221.122.89.180   xmpp010.zoom.us\n221.122.89.180   xmpp011.zoom.us\n221.122.89.180   xmpp012.zoom.us\n221.122.89.180   xmpp013.zoom.us\n221.122.89.180   xmpp014.zoom.us\n221.122.89.180   xmpp015.zoom.us\n221.122.89.231   xmppapi.zoom.us\n```\n\n### 验证是否可以访问\n\n浏览器输入： https://zoom.us","slug":"zoom-not-connect","published":1,"updated":"2019-12-26T03:11:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qoez001i24lv38facwbl","content":"<p>前段时间zoom视频会议软件由于视频数据没法留存在中国，导致zoom被墙掉了。但是可以通过一种方式解决。</p>\n<a id=\"more\"></a>\n<h3 id=\"修改本地hosts文件\"><a class=\"markdownIt-Anchor\" href=\"#修改本地hosts文件\"></a> 修改本地hosts文件</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\">221.122.88.132   zoom.us</span><br><span class=\"line\">52.202.62.203   zoom.us</span><br><span class=\"line\">52.202.62.241   zoom.us</span><br><span class=\"line\">52.202.62.241   share.zoom.us</span><br><span class=\"line\">52.202.62.203   share.zoom.us</span><br><span class=\"line\"></span><br><span class=\"line\">104.16.51.111   support.zoom.us</span><br><span class=\"line\">104.16.52.111   support.zoom.us</span><br><span class=\"line\">104.16.53.111   support.zoom.us</span><br><span class=\"line\">104.16.54.111   support.zoom.us</span><br><span class=\"line\"></span><br><span class=\"line\">221.122.88.132   www.zoom.us</span><br><span class=\"line\">221.122.88.132   www3.zoom.us</span><br><span class=\"line\">221.122.88.132   google.zoom.us</span><br><span class=\"line\">221.122.88.132   facebook.zoom.us</span><br><span class=\"line\">221.122.88.132   log.zoom.us</span><br><span class=\"line\">221.122.88.132   api.zoom.us</span><br><span class=\"line\">221.122.88.132   launcher.zoom.us</span><br><span class=\"line\">221.122.88.132   imauth.zoom.us</span><br><span class=\"line\">221.122.88.132   static.zoom.us</span><br><span class=\"line\">221.122.89.232   file-ia.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp001.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp002.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp003.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp004.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp005.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp006.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp007.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp008.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp009.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp010.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp011.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp012.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp013.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp014.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp015.zoom.us</span><br><span class=\"line\">221.122.89.231   xmppapi.zoom.us</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证是否可以访问\"><a class=\"markdownIt-Anchor\" href=\"#验证是否可以访问\"></a> 验证是否可以访问</h3>\n<p>浏览器输入： <a href=\"https://zoom.us\">https://zoom.us</a></p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>前段时间zoom视频会议软件由于视频数据没法留存在中国，导致zoom被墙掉了。但是可以通过一种方式解决。</p>","more":"<h3 id=\"修改本地hosts文件\"><a class=\"markdownIt-Anchor\" href=\"#修改本地hosts文件\"></a> 修改本地hosts文件</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\">221.122.88.132   zoom.us</span><br><span class=\"line\">52.202.62.203   zoom.us</span><br><span class=\"line\">52.202.62.241   zoom.us</span><br><span class=\"line\">52.202.62.241   share.zoom.us</span><br><span class=\"line\">52.202.62.203   share.zoom.us</span><br><span class=\"line\"></span><br><span class=\"line\">104.16.51.111   support.zoom.us</span><br><span class=\"line\">104.16.52.111   support.zoom.us</span><br><span class=\"line\">104.16.53.111   support.zoom.us</span><br><span class=\"line\">104.16.54.111   support.zoom.us</span><br><span class=\"line\"></span><br><span class=\"line\">221.122.88.132   www.zoom.us</span><br><span class=\"line\">221.122.88.132   www3.zoom.us</span><br><span class=\"line\">221.122.88.132   google.zoom.us</span><br><span class=\"line\">221.122.88.132   facebook.zoom.us</span><br><span class=\"line\">221.122.88.132   log.zoom.us</span><br><span class=\"line\">221.122.88.132   api.zoom.us</span><br><span class=\"line\">221.122.88.132   launcher.zoom.us</span><br><span class=\"line\">221.122.88.132   imauth.zoom.us</span><br><span class=\"line\">221.122.88.132   static.zoom.us</span><br><span class=\"line\">221.122.89.232   file-ia.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp001.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp002.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp003.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp004.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp005.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp006.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp007.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp008.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp009.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp010.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp011.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp012.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp013.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp014.zoom.us</span><br><span class=\"line\">221.122.89.180   xmpp015.zoom.us</span><br><span class=\"line\">221.122.89.231   xmppapi.zoom.us</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证是否可以访问\"><a class=\"markdownIt-Anchor\" href=\"#验证是否可以访问\"></a> 验证是否可以访问</h3>\n<p>浏览器输入： <a href=\"https://zoom.us\">https://zoom.us</a></p>"},{"title":"创世纪","date":"2018-11-22T07:14:21.000Z","author":"Mayer Shi","_content":"\n开博客啦！ 这是我的个人博客，将在这里分享我的成长路上学习心得和收获。\n\n<!--more-->","source":"_posts/创世纪.md","raw":"---\ntitle: \"创世纪\"\ndate: 2018-11-22T23:14:21+08:00\ncategories: [\"Story\"]\ntags: [\"story\"]\nauthor: \"Mayer Shi\"\n---\n\n开博客啦！ 这是我的个人博客，将在这里分享我的成长路上学习心得和收获。\n\n<!--more-->","slug":"创世纪","published":1,"updated":"2018-11-22T07:14:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknd0qof0001l24lv0ce2bor4","content":"<p>开博客啦！ 这是我的个人博客，将在这里分享我的成长路上学习心得和收获。</p>\n<a id=\"more\"></a>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"<p>开博客啦！ 这是我的个人博客，将在这里分享我的成长路上学习心得和收获。</p>","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"cknd0qoe8000124lv0fcp6bj8","category_id":"cknd0qoed000424lv88j45nkr","_id":"cknd0qoel000h24lv7xaeany4"},{"post_id":"cknd0qoec000324lv936t4kzd","category_id":"cknd0qoej000c24lvfvy0aism","_id":"cknd0qoeo000o24lvf8mq6r4g"},{"post_id":"cknd0qoef000724lv6yhw8o93","category_id":"cknd0qoel000i24lv5qxb6ybr","_id":"cknd0qoes000w24lvd2am54cb"},{"post_id":"cknd0qoeh000924lveuzc5p8b","category_id":"cknd0qoel000i24lv5qxb6ybr","_id":"cknd0qoeu001224lv470kgv1t"},{"post_id":"cknd0qoes000y24lvhce14bzl","category_id":"cknd0qoej000c24lvfvy0aism","_id":"cknd0qoew001824lv7jpz2ab4"},{"post_id":"cknd0qoei000b24lvca1adkv4","category_id":"cknd0qoel000i24lv5qxb6ybr","_id":"cknd0qoex001c24lv8ssd3mow"},{"post_id":"cknd0qoek000f24lvd26egbw3","category_id":"cknd0qoel000i24lv5qxb6ybr","_id":"cknd0qoez001h24lvd48w4a0t"},{"post_id":"cknd0qoel000g24lv85tc6r1q","category_id":"cknd0qoel000i24lv5qxb6ybr","_id":"cknd0qof1001m24lvcr894v1p"},{"post_id":"cknd0qoey001f24lv6iqqhpoc","category_id":"cknd0qoel000i24lv5qxb6ybr","_id":"cknd0qof1001p24lvg2u08ccf"},{"post_id":"cknd0qoem000l24lvc23lf93h","category_id":"cknd0qoey001g24lv6yrw6vc2","_id":"cknd0qof2001s24lvalylh1hk"},{"post_id":"cknd0qoen000n24lvhbrdhlp8","category_id":"cknd0qof1001o24lvexee9zvw","_id":"cknd0qof3001w24lv2gjpf89x"},{"post_id":"cknd0qoeq000s24lv9tca81ib","category_id":"cknd0qof2001t24lv7s909iqg","_id":"cknd0qof4002124lv0hw4dgac"},{"post_id":"cknd0qoer000u24lv6xpodnte","category_id":"cknd0qof1001o24lvexee9zvw","_id":"cknd0qof7002524lv6w6r4czh"},{"post_id":"cknd0qoet001024lvhn5fh90y","category_id":"cknd0qof1001o24lvexee9zvw","_id":"cknd0qof7002824lv2rw90glo"},{"post_id":"cknd0qoev001524lvasp35w1o","category_id":"cknd0qof7002424lv4yl1e5dv","_id":"cknd0qof9002d24lv9z0ldkj7"},{"post_id":"cknd0qoev001724lva84vdgs6","category_id":"cknd0qof1001o24lvexee9zvw","_id":"cknd0qof9002f24lvehs9du4b"},{"post_id":"cknd0qoex001b24lv33a5ceby","category_id":"cknd0qof8002c24lv9vpr1dyd","_id":"cknd0qofa002i24lv4wo2bz9i"},{"post_id":"cknd0qoez001i24lv38facwbl","category_id":"cknd0qof7002424lv4yl1e5dv","_id":"cknd0qofa002j24lv9umrbo4f"},{"post_id":"cknd0qof0001l24lv0ce2bor4","category_id":"cknd0qof9002h24lv8dv0a9bi","_id":"cknd0qofa002k24lv4hveby2g"}],"PostTag":[{"post_id":"cknd0qoe8000124lv0fcp6bj8","tag_id":"cknd0qoee000524lv8h10fe6e","_id":"cknd0qoej000e24lv7iyd5xtv"},{"post_id":"cknd0qoek000f24lvd26egbw3","tag_id":"cknd0qoej000d24lv0nc35vhl","_id":"cknd0qoem000k24lv78an5quz"},{"post_id":"cknd0qoec000324lv936t4kzd","tag_id":"cknd0qoej000d24lv0nc35vhl","_id":"cknd0qoen000m24lv9j2kfbuk"},{"post_id":"cknd0qoel000g24lv85tc6r1q","tag_id":"cknd0qoej000d24lv0nc35vhl","_id":"cknd0qoep000r24lvcsy503gd"},{"post_id":"cknd0qoef000724lv6yhw8o93","tag_id":"cknd0qoel000j24lv2g403ci4","_id":"cknd0qoer000t24lvcl3oc19r"},{"post_id":"cknd0qoeh000924lveuzc5p8b","tag_id":"cknd0qoeo000q24lv75l1doca","_id":"cknd0qoet000z24lv12nght4s"},{"post_id":"cknd0qoes000y24lvhce14bzl","tag_id":"cknd0qoeo000q24lv75l1doca","_id":"cknd0qoeu001324lv9xwzczx8"},{"post_id":"cknd0qoei000b24lvca1adkv4","tag_id":"cknd0qoeo000q24lv75l1doca","_id":"cknd0qoev001624lvbyx05p4e"},{"post_id":"cknd0qoev001524lvasp35w1o","tag_id":"cknd0qoeo000q24lv75l1doca","_id":"cknd0qoew001a24lvd2u8baec"},{"post_id":"cknd0qoem000l24lvc23lf93h","tag_id":"cknd0qoeu001424lv2o3w9nf6","_id":"cknd0qoey001e24lvb2pw4reo"},{"post_id":"cknd0qoey001f24lv6iqqhpoc","tag_id":"cknd0qoeo000q24lv75l1doca","_id":"cknd0qof0001k24lv3nqpcxci"},{"post_id":"cknd0qoen000n24lvhbrdhlp8","tag_id":"cknd0qoex001d24lv7brc6z4o","_id":"cknd0qof1001n24lvfo473of2"},{"post_id":"cknd0qoeq000s24lv9tca81ib","tag_id":"cknd0qoez001j24lv876k20i8","_id":"cknd0qof2001r24lv413cgs2o"},{"post_id":"cknd0qoer000u24lv6xpodnte","tag_id":"cknd0qof1001q24lv6vnh9j0o","_id":"cknd0qof3001v24lv6q1o9rtd"},{"post_id":"cknd0qoet001024lvhn5fh90y","tag_id":"cknd0qof1001q24lv6vnh9j0o","_id":"cknd0qof4001z24lvg14phbkt"},{"post_id":"cknd0qoev001724lva84vdgs6","tag_id":"cknd0qoex001d24lv7brc6z4o","_id":"cknd0qof6002324lvhu7xaj61"},{"post_id":"cknd0qoex001b24lv33a5ceby","tag_id":"cknd0qof4002224lv8r8e6e4n","_id":"cknd0qof7002724lve0hf2kxb"},{"post_id":"cknd0qoez001i24lv38facwbl","tag_id":"cknd0qof7002624lv8d1xbkl4","_id":"cknd0qof8002b24lv98z49mf8"},{"post_id":"cknd0qof0001l24lv0ce2bor4","tag_id":"cknd0qof8002a24lvbr5u6qcp","_id":"cknd0qof9002e24lv6vnz71zq"}],"Tag":[{"name":"算法","_id":"cknd0qoee000524lv8h10fe6e"},{"name":"gitlab","_id":"cknd0qoej000d24lv0nc35vhl"},{"name":"cmd","_id":"cknd0qoel000j24lv2g403ci4"},{"name":"tools","_id":"cknd0qoeo000q24lv75l1doca"},{"name":"gitops","_id":"cknd0qoeu001424lv2o3w9nf6"},{"name":"helm","_id":"cknd0qoex001d24lv7brc6z4o"},{"name":"机器人","_id":"cknd0qoez001j24lv876k20i8"},{"name":"kubernetes","_id":"cknd0qof1001q24lv6vnh9j0o"},{"name":"前端跨域","_id":"cknd0qof4002224lv8r8e6e4n"},{"name":"zoom","_id":"cknd0qof7002624lv8d1xbkl4"},{"name":"story","_id":"cknd0qof8002a24lvbr5u6qcp"}]}}